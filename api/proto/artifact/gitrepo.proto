syntax = "proto3";
package proto.artifact;

option go_package = "github.com/spinnaker/kleat/api/client/artifact";

import "google/protobuf/wrappers.proto";

// Configuration for the Git repo artifact provider.
message GitRepo {
    // Whether the Git repo artifact provider is enabled.
    google.protobuf.BoolValue enabled = 1;

    // The list of configured Git Repo accounts.
    repeated GitRepoAccount accounts = 2;
}

// Configuration for a Git repo artifact account. An account maps to a
// credential that is able to authenticate against a Git repository hosted by a
// Git hosting service. Either `username` and `password`,
// `usernamePasswordFile`, `token`, `tokenFile`, or `sshPrivateKeyFilePath` and
// `sshPrivateKeyPassphrase` must be set.
message GitRepoAccount {
    // The name of the account.
    string name = 1;

    // The username of the account.
    string username = 2;

    // The password of the account.
    string password = 3;

    // The path to a file containing the username and password of the account
    // in the format `${username}:${password}`.
    string usernamePasswordFile = 4;

    // The Git repo access token.
    string token = 5;

    // The path to a file containing the Git repo access token.
    string tokenFile = 6;

    // The path to an SSH private key to be used when connecting with the Git
    // repo over SSH.
    string sshPrivateKeyFilePath = 7;

    // The passphrase to an SSH private key to be used when connecting with
    // the Git repo over SSH.
    string sshPrivateKeyPassphrase = 8;

    // The path to a `known_hosts` file to be used when connecting with a
    // Git repository over SSH.
    string sshKnownHostsFilePath = 9;

    // If `true`, Spinnaker can connect with a Git repository over SSH without
    // verifying the server's IP address against a `known_hosts` file.
    google.protobuf.BoolValue sshTrustUnknownHosts = 10;
}
