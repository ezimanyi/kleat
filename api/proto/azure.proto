syntax = "proto3";
package proto;

import "permissions.proto";

// Configuration for the Azure provider.
message AzureProvider {
    // Whether the provider is enabled.
    bool enabled = 1;

    // The list of configured accounts.
    repeated AzureAccount accounts = 2;

    // The name of the primary account.
    string primaryAccount = 3;

    // Configuration for Spinnaker's image bakery.
    AzureBakeryDefaults bakeryDefaults = 4;
}

message AzureAccount {
    // The name of the account.
    string name = 1;

    // (Required) The `appKey` (password) of your service principal.
    string appKey = 2;

    // (Required) The `clientId` (also called `appId`) of your service principal.
    string clientId = 3;

    // (Required) The name of a KeyVault that contains the user name, password,
    // and ssh public key used to create VMs
    string defaultKeyVault = 4;

    // (Required) The default resource group to contain any non-application
    // specific resources.
    string defaultResourceGroup = 5;

    // The environment name for the account. Many accounts can share the
    // same environment (e.g., dev, test, prod).
    string environment = 6;

    // The `objectId` of your service principal. This is only required if using
    // Packer to bake Windows images.
    string objectId = 7;

    // The resource group to use if baking images with Packer.
    string packerResourceGroup = 8;

    // The storage account to use if baking images with Packer.
    string packerStorageAccount = 9;

    // Fiat permissions configuration.
    Permissions permissions = 10;

    // (Deprecated): List of required Fiat permission groups. Configure
    // `permissions` instead.
    repeated string requiredGroupMemberships = 11;

    // The Azure regions this Spinnaker account will manage.
    // TODO(mneterval): Halyard defaults to `[westus, eastus]`. Move to
    // Clouddriver.
    repeated string regions = 12;

    // (Required) The `subscriptionId` to which your service principal is
    // assigned.
    string subscriptionId = 13;

    // (Required) The `tenantId` to which your service principal is assigned.
    string tenantId = 14;

    // If true, the  SSH public key is used to provision the linux VM.
    // If false, the password is used instead.
    // TODO(mneterval): Halyard defaults to `true`. Move to Clouddriver.
    bool useSshPublicKey = 15;
}

// Configuration for Spinnaker's image bakery.
message AzureBakeryDefaults {
    // List of configured base images.
    repeated AzureBaseImageSettings baseImages = 1;
}

// Configuration for a base image for the Azure provider's bakery.
message AzureBaseImageSettings {
    // Base image configuration.
    AzureBaseImage baseImage = 1;
}

// Base image configuration.
message AzureBaseImage {
    // A short description to help human operators identify the
    // image.
    string shortDescription = 1;

    // A long description to help human operators identify the
    // image.
    string detailedDescription = 2;

    // (Required) The Publisher name for your base image. See
    // https://aka.ms/azspinimage to get a list of images.
    string publisher = 3;

    // (Required) The offer for your base image. See https://aka.ms/azspinimage
    // to get a list of images.
    string offer = 4;

    // (Required) The SKU for your base image. See https://aka.ms/azspinimage to
    // get a list of images.
    string sku = 5;

    // The version of your base image. This defaults to `latest` if not
    // specified.
    string version = 6;

    // This is used to help Spinnaker's bakery download the build artifacts you
    // supply it with. For example, specifying `deb` indicates that your
    // artifacts will need to be fetched from a debian repository.
    string packageType = 7;

    // This is the name of the packer template that will be used to bake images
    // from this base image. The template file must be found in this list:
    // https://github.com/spinnaker/rosco/tree/master/rosco-web/config/packer,
    // or supplied as described here: https://spinnaker.io/setup/bakery/.
    string templateFile = 8;

}
