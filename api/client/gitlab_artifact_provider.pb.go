// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gitlab_artifact_provider.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Configuration for the GitLab artifact provider.
type GitLabArtifactProvider struct {
	// Whether the GitLab artifact provider is enabled.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// The list of configured GitLab accounts.
	Accounts             []*GitLabArtifactAccount `protobuf:"bytes,2,rep,name=accounts,proto3" json:"accounts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *GitLabArtifactProvider) Reset()         { *m = GitLabArtifactProvider{} }
func (m *GitLabArtifactProvider) String() string { return proto.CompactTextString(m) }
func (*GitLabArtifactProvider) ProtoMessage()    {}
func (*GitLabArtifactProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_beece7bbeb1da420, []int{0}
}

func (m *GitLabArtifactProvider) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GitLabArtifactProvider.Unmarshal(m, b)
}
func (m *GitLabArtifactProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GitLabArtifactProvider.Marshal(b, m, deterministic)
}
func (m *GitLabArtifactProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GitLabArtifactProvider.Merge(m, src)
}
func (m *GitLabArtifactProvider) XXX_Size() int {
	return xxx_messageInfo_GitLabArtifactProvider.Size(m)
}
func (m *GitLabArtifactProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_GitLabArtifactProvider.DiscardUnknown(m)
}

var xxx_messageInfo_GitLabArtifactProvider proto.InternalMessageInfo

func (m *GitLabArtifactProvider) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *GitLabArtifactProvider) GetAccounts() []*GitLabArtifactAccount {
	if m != nil {
		return m.Accounts
	}
	return nil
}

// Configuration for a GitLab artifact account. Either `token` or
// `tokenFile` should be specified as means of authentication.
type GitLabArtifactAccount struct {
	// The name of the account.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The GitLab access token.
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	// The path to a file containing the GitLab access token.
	TokenFile            string   `protobuf:"bytes,3,opt,name=tokenFile,proto3" json:"tokenFile,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GitLabArtifactAccount) Reset()         { *m = GitLabArtifactAccount{} }
func (m *GitLabArtifactAccount) String() string { return proto.CompactTextString(m) }
func (*GitLabArtifactAccount) ProtoMessage()    {}
func (*GitLabArtifactAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_beece7bbeb1da420, []int{1}
}

func (m *GitLabArtifactAccount) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GitLabArtifactAccount.Unmarshal(m, b)
}
func (m *GitLabArtifactAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GitLabArtifactAccount.Marshal(b, m, deterministic)
}
func (m *GitLabArtifactAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GitLabArtifactAccount.Merge(m, src)
}
func (m *GitLabArtifactAccount) XXX_Size() int {
	return xxx_messageInfo_GitLabArtifactAccount.Size(m)
}
func (m *GitLabArtifactAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_GitLabArtifactAccount.DiscardUnknown(m)
}

var xxx_messageInfo_GitLabArtifactAccount proto.InternalMessageInfo

func (m *GitLabArtifactAccount) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GitLabArtifactAccount) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *GitLabArtifactAccount) GetTokenFile() string {
	if m != nil {
		return m.TokenFile
	}
	return ""
}

func init() {
	proto.RegisterType((*GitLabArtifactProvider)(nil), "proto.GitLabArtifactProvider")
	proto.RegisterType((*GitLabArtifactAccount)(nil), "proto.GitLabArtifactAccount")
}

func init() { proto.RegisterFile("gitlab_artifact_provider.proto", fileDescriptor_beece7bbeb1da420) }

var fileDescriptor_beece7bbeb1da420 = []byte{
	// 182 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4b, 0xcf, 0x2c, 0xc9,
	0x49, 0x4c, 0x8a, 0x4f, 0x2c, 0x2a, 0xc9, 0x4c, 0x4b, 0x4c, 0x2e, 0x89, 0x2f, 0x28, 0xca, 0x2f,
	0xcb, 0x4c, 0x49, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x4a, 0x39,
	0x5c, 0x62, 0xee, 0x99, 0x25, 0x3e, 0x89, 0x49, 0x8e, 0x50, 0x75, 0x01, 0x50, 0x65, 0x42, 0x12,
	0x5c, 0xec, 0xa9, 0x79, 0x89, 0x49, 0x39, 0xa9, 0x29, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x1c, 0x41,
	0x30, 0xae, 0x90, 0x05, 0x17, 0x47, 0x62, 0x72, 0x72, 0x7e, 0x69, 0x5e, 0x49, 0xb1, 0x04, 0x93,
	0x02, 0xb3, 0x06, 0xb7, 0x91, 0x0c, 0xc4, 0x50, 0x3d, 0x54, 0xa3, 0x1c, 0x21, 0x8a, 0x82, 0xe0,
	0xaa, 0x95, 0xe2, 0xb9, 0x44, 0xb1, 0x2a, 0x11, 0x12, 0xe2, 0x62, 0xc9, 0x4b, 0xcc, 0x4d, 0x05,
	0xdb, 0xc4, 0x19, 0x04, 0x66, 0x0b, 0x89, 0x70, 0xb1, 0x96, 0xe4, 0x67, 0xa7, 0xe6, 0x49, 0x30,
	0x81, 0x05, 0x21, 0x1c, 0x21, 0x19, 0x2e, 0x4e, 0x30, 0xc3, 0x2d, 0x33, 0x27, 0x55, 0x82, 0x19,
	0x2c, 0x83, 0x10, 0x48, 0x62, 0x03, 0xbb, 0xc3, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x1a, 0xd8,
	0x4e, 0x86, 0xfe, 0x00, 0x00, 0x00,
}
