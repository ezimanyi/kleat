// Code generated by protoc-gen-go. DO NOT EDIT.
// source: huaweicloud_provider.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Configuration for the Huawei Cloud provider.
type HuaweiCloudProvider struct {
	// Whether the provider is enabled.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// The list of configured accounts.
	Accounts []*HuaweiCloudAccount `protobuf:"bytes,2,rep,name=accounts,proto3" json:"accounts,omitempty"`
	// The name of the primary account.
	PrimaryAccount string `protobuf:"bytes,3,opt,name=primaryAccount,proto3" json:"primaryAccount,omitempty"`
	// Configuration for Spinnaker's image bakery.
	BakeryDefaults       *HuaweiCloudBakeryDefaults `protobuf:"bytes,4,opt,name=bakeryDefaults,proto3" json:"bakeryDefaults,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *HuaweiCloudProvider) Reset()         { *m = HuaweiCloudProvider{} }
func (m *HuaweiCloudProvider) String() string { return proto.CompactTextString(m) }
func (*HuaweiCloudProvider) ProtoMessage()    {}
func (*HuaweiCloudProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_60ab933dd71b8098, []int{0}
}

func (m *HuaweiCloudProvider) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HuaweiCloudProvider.Unmarshal(m, b)
}
func (m *HuaweiCloudProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HuaweiCloudProvider.Marshal(b, m, deterministic)
}
func (m *HuaweiCloudProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HuaweiCloudProvider.Merge(m, src)
}
func (m *HuaweiCloudProvider) XXX_Size() int {
	return xxx_messageInfo_HuaweiCloudProvider.Size(m)
}
func (m *HuaweiCloudProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_HuaweiCloudProvider.DiscardUnknown(m)
}

var xxx_messageInfo_HuaweiCloudProvider proto.InternalMessageInfo

func (m *HuaweiCloudProvider) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *HuaweiCloudProvider) GetAccounts() []*HuaweiCloudAccount {
	if m != nil {
		return m.Accounts
	}
	return nil
}

func (m *HuaweiCloudProvider) GetPrimaryAccount() string {
	if m != nil {
		return m.PrimaryAccount
	}
	return ""
}

func (m *HuaweiCloudProvider) GetBakeryDefaults() *HuaweiCloudBakeryDefaults {
	if m != nil {
		return m.BakeryDefaults
	}
	return nil
}

// Configuration for a Huawei Cloud account.
type HuaweiCloudAccount struct {
	// The name of the account.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The type of account.
	AccountType string `protobuf:"bytes,2,opt,name=accountType,proto3" json:"accountType,omitempty"`
	// (Deprecated) List of required Fiat permission groups. Configure
	// `permissions` instead.
	RequiredGroupMemberships []string `protobuf:"bytes,3,rep,name=requiredGroupMemberships,proto3" json:"requiredGroupMemberships,omitempty"`
	// Fiat permissions configuration.
	Permissions *Permissions `protobuf:"bytes,4,opt,name=permissions,proto3" json:"permissions,omitempty"`
	// (Required) The auth URL of the cloud.
	AuthUrl string `protobuf:"bytes,5,opt,name=authUrl,proto3" json:"authUrl,omitempty"`
	// (Required) The domain name of the cloud.
	DomainName string `protobuf:"bytes,6,opt,name=domainName,proto3" json:"domainName,omitempty"`
	// The environment name for the account. Many accounts can share the
	// same environment (e.g., dev, test, prod).
	Environment string `protobuf:"bytes,7,opt,name=environment,proto3" json:"environment,omitempty"`
	// If `true`, disables certificate validation on SSL connections. Needed if
	// certificates are self-signed. Defaults to `false`.
	Insecure bool `protobuf:"varint,8,opt,name=insecure,proto3" json:"insecure,omitempty"`
	// (Required) The password used to access the cloud.
	Password string `protobuf:"bytes,9,opt,name=password,proto3" json:"password,omitempty"`
	// (Required) The name of the project within the cloud.
	ProjectName string `protobuf:"bytes,10,opt,name=projectName,proto3" json:"projectName,omitempty"`
	// (Required) The region(s) of the cloud.
	Regions []string `protobuf:"bytes,11,rep,name=regions,proto3" json:"regions,omitempty"`
	// (Required) The username used to access the cloud.
	Username             string   `protobuf:"bytes,12,opt,name=username,proto3" json:"username,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HuaweiCloudAccount) Reset()         { *m = HuaweiCloudAccount{} }
func (m *HuaweiCloudAccount) String() string { return proto.CompactTextString(m) }
func (*HuaweiCloudAccount) ProtoMessage()    {}
func (*HuaweiCloudAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_60ab933dd71b8098, []int{1}
}

func (m *HuaweiCloudAccount) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HuaweiCloudAccount.Unmarshal(m, b)
}
func (m *HuaweiCloudAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HuaweiCloudAccount.Marshal(b, m, deterministic)
}
func (m *HuaweiCloudAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HuaweiCloudAccount.Merge(m, src)
}
func (m *HuaweiCloudAccount) XXX_Size() int {
	return xxx_messageInfo_HuaweiCloudAccount.Size(m)
}
func (m *HuaweiCloudAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_HuaweiCloudAccount.DiscardUnknown(m)
}

var xxx_messageInfo_HuaweiCloudAccount proto.InternalMessageInfo

func (m *HuaweiCloudAccount) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *HuaweiCloudAccount) GetAccountType() string {
	if m != nil {
		return m.AccountType
	}
	return ""
}

func (m *HuaweiCloudAccount) GetRequiredGroupMemberships() []string {
	if m != nil {
		return m.RequiredGroupMemberships
	}
	return nil
}

func (m *HuaweiCloudAccount) GetPermissions() *Permissions {
	if m != nil {
		return m.Permissions
	}
	return nil
}

func (m *HuaweiCloudAccount) GetAuthUrl() string {
	if m != nil {
		return m.AuthUrl
	}
	return ""
}

func (m *HuaweiCloudAccount) GetDomainName() string {
	if m != nil {
		return m.DomainName
	}
	return ""
}

func (m *HuaweiCloudAccount) GetEnvironment() string {
	if m != nil {
		return m.Environment
	}
	return ""
}

func (m *HuaweiCloudAccount) GetInsecure() bool {
	if m != nil {
		return m.Insecure
	}
	return false
}

func (m *HuaweiCloudAccount) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *HuaweiCloudAccount) GetProjectName() string {
	if m != nil {
		return m.ProjectName
	}
	return ""
}

func (m *HuaweiCloudAccount) GetRegions() []string {
	if m != nil {
		return m.Regions
	}
	return nil
}

func (m *HuaweiCloudAccount) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

// Configuration for Spinnaker's image bakery.
type HuaweiCloudBakeryDefaults struct {
	// List of configured base images.
	BaseImages []*HuaweiCloudBaseImageSettings `protobuf:"bytes,1,rep,name=baseImages,proto3" json:"baseImages,omitempty"`
	// This is the name of the packer template that will be used to bake images
	// from this base image. The template file must be found in this list:
	// https://github.com/spinnaker/rosco/tree/master/rosco-web/config/packer, or
	// supplied as described here: https://spinnaker.io/setup/bakery/.
	TemplateFile string `protobuf:"bytes,2,opt,name=templateFile,proto3" json:"templateFile,omitempty"`
	// (Required) The default auth URL in which images will be baked.
	AuthUrl string `protobuf:"bytes,3,opt,name=authUrl,proto3" json:"authUrl,omitempty"`
	// (Required) The default username with which images will be baked.
	Username string `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	// (Required) The default password with which images will be baked.
	Password string `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
	// The name of the default project in which images will be baked.
	ProjectName string `protobuf:"bytes,6,opt,name=projectName,proto3" json:"projectName,omitempty"`
	// (Required) The default domain name in which images will be baked.
	DomainName string `protobuf:"bytes,7,opt,name=domainName,proto3" json:"domainName,omitempty"`
	// The security setting for connecting to the Huawei Cloud account. Defaults
	// to `false`.
	Insecure bool `protobuf:"varint,8,opt,name=insecure,proto3" json:"insecure,omitempty"`
	// (Required) The VPC in which images will be baked.
	VpcId string `protobuf:"bytes,9,opt,name=vpcId,proto3" json:"vpcId,omitempty"`
	//  (Required) The subnet in which images will be baked.
	SubnetId string `protobuf:"bytes,10,opt,name=subnetId,proto3" json:"subnetId,omitempty"`
	// (Required) The default security group in which images will be baked.
	SecurityGroup string `protobuf:"bytes,11,opt,name=securityGroup,proto3" json:"securityGroup,omitempty"`
	// (Required) The bandwidth size of EIP in which images will be baked.
	EipBandwidthSize     int32    `protobuf:"varint,12,opt,name=eipBandwidthSize,proto3" json:"eipBandwidthSize,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HuaweiCloudBakeryDefaults) Reset()         { *m = HuaweiCloudBakeryDefaults{} }
func (m *HuaweiCloudBakeryDefaults) String() string { return proto.CompactTextString(m) }
func (*HuaweiCloudBakeryDefaults) ProtoMessage()    {}
func (*HuaweiCloudBakeryDefaults) Descriptor() ([]byte, []int) {
	return fileDescriptor_60ab933dd71b8098, []int{2}
}

func (m *HuaweiCloudBakeryDefaults) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HuaweiCloudBakeryDefaults.Unmarshal(m, b)
}
func (m *HuaweiCloudBakeryDefaults) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HuaweiCloudBakeryDefaults.Marshal(b, m, deterministic)
}
func (m *HuaweiCloudBakeryDefaults) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HuaweiCloudBakeryDefaults.Merge(m, src)
}
func (m *HuaweiCloudBakeryDefaults) XXX_Size() int {
	return xxx_messageInfo_HuaweiCloudBakeryDefaults.Size(m)
}
func (m *HuaweiCloudBakeryDefaults) XXX_DiscardUnknown() {
	xxx_messageInfo_HuaweiCloudBakeryDefaults.DiscardUnknown(m)
}

var xxx_messageInfo_HuaweiCloudBakeryDefaults proto.InternalMessageInfo

func (m *HuaweiCloudBakeryDefaults) GetBaseImages() []*HuaweiCloudBaseImageSettings {
	if m != nil {
		return m.BaseImages
	}
	return nil
}

func (m *HuaweiCloudBakeryDefaults) GetTemplateFile() string {
	if m != nil {
		return m.TemplateFile
	}
	return ""
}

func (m *HuaweiCloudBakeryDefaults) GetAuthUrl() string {
	if m != nil {
		return m.AuthUrl
	}
	return ""
}

func (m *HuaweiCloudBakeryDefaults) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *HuaweiCloudBakeryDefaults) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *HuaweiCloudBakeryDefaults) GetProjectName() string {
	if m != nil {
		return m.ProjectName
	}
	return ""
}

func (m *HuaweiCloudBakeryDefaults) GetDomainName() string {
	if m != nil {
		return m.DomainName
	}
	return ""
}

func (m *HuaweiCloudBakeryDefaults) GetInsecure() bool {
	if m != nil {
		return m.Insecure
	}
	return false
}

func (m *HuaweiCloudBakeryDefaults) GetVpcId() string {
	if m != nil {
		return m.VpcId
	}
	return ""
}

func (m *HuaweiCloudBakeryDefaults) GetSubnetId() string {
	if m != nil {
		return m.SubnetId
	}
	return ""
}

func (m *HuaweiCloudBakeryDefaults) GetSecurityGroup() string {
	if m != nil {
		return m.SecurityGroup
	}
	return ""
}

func (m *HuaweiCloudBakeryDefaults) GetEipBandwidthSize() int32 {
	if m != nil {
		return m.EipBandwidthSize
	}
	return 0
}

// Configuration for a base image for the Huawei Cloud provider's bakery.
type HuaweiCloudBaseImageSettings struct {
	// Base image configuration.
	BaseImage *HuaweiCloudBaseImage `protobuf:"bytes,1,opt,name=baseImage,proto3" json:"baseImage,omitempty"`
	// Image source configuration.
	VirtualizationSettings []*HuaweiCloudVirtualizationSettings `protobuf:"bytes,2,rep,name=virtualizationSettings,proto3" json:"virtualizationSettings,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}                             `json:"-"`
	XXX_unrecognized       []byte                               `json:"-"`
	XXX_sizecache          int32                                `json:"-"`
}

func (m *HuaweiCloudBaseImageSettings) Reset()         { *m = HuaweiCloudBaseImageSettings{} }
func (m *HuaweiCloudBaseImageSettings) String() string { return proto.CompactTextString(m) }
func (*HuaweiCloudBaseImageSettings) ProtoMessage()    {}
func (*HuaweiCloudBaseImageSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_60ab933dd71b8098, []int{3}
}

func (m *HuaweiCloudBaseImageSettings) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HuaweiCloudBaseImageSettings.Unmarshal(m, b)
}
func (m *HuaweiCloudBaseImageSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HuaweiCloudBaseImageSettings.Marshal(b, m, deterministic)
}
func (m *HuaweiCloudBaseImageSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HuaweiCloudBaseImageSettings.Merge(m, src)
}
func (m *HuaweiCloudBaseImageSettings) XXX_Size() int {
	return xxx_messageInfo_HuaweiCloudBaseImageSettings.Size(m)
}
func (m *HuaweiCloudBaseImageSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_HuaweiCloudBaseImageSettings.DiscardUnknown(m)
}

var xxx_messageInfo_HuaweiCloudBaseImageSettings proto.InternalMessageInfo

func (m *HuaweiCloudBaseImageSettings) GetBaseImage() *HuaweiCloudBaseImage {
	if m != nil {
		return m.BaseImage
	}
	return nil
}

func (m *HuaweiCloudBaseImageSettings) GetVirtualizationSettings() []*HuaweiCloudVirtualizationSettings {
	if m != nil {
		return m.VirtualizationSettings
	}
	return nil
}

// Huawei Cloud base image settings.
type HuaweiCloudBaseImage struct {
	// The name of the base image.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// This is used to help Spinnaker's bakery download the build artifacts you
	// supply it with. For example, specifying `deb` indicates that your
	// artifacts will need to be fetched from a debian repository.
	PackageType string `protobuf:"bytes,2,opt,name=packageType,proto3" json:"packageType,omitempty"`
	// This is the name of the packer template that will be used to bake images
	// from this base image. The template file must be found in this list:
	// https://github.com/spinnaker/rosco/tree/master/rosco-web/config/packer, or
	// supplied as described here: https://spinnaker.io/setup/bakery/.
	TemplateFile string `protobuf:"bytes,3,opt,name=templateFile,proto3" json:"templateFile,omitempty"`
	// A short description to help human operators identify the
	// image.
	ShortDescription string `protobuf:"bytes,4,opt,name=shortDescription,proto3" json:"shortDescription,omitempty"`
	// A long description to help human operators identify the
	// image.
	DetailedDescription  string   `protobuf:"bytes,5,opt,name=detailedDescription,proto3" json:"detailedDescription,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HuaweiCloudBaseImage) Reset()         { *m = HuaweiCloudBaseImage{} }
func (m *HuaweiCloudBaseImage) String() string { return proto.CompactTextString(m) }
func (*HuaweiCloudBaseImage) ProtoMessage()    {}
func (*HuaweiCloudBaseImage) Descriptor() ([]byte, []int) {
	return fileDescriptor_60ab933dd71b8098, []int{4}
}

func (m *HuaweiCloudBaseImage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HuaweiCloudBaseImage.Unmarshal(m, b)
}
func (m *HuaweiCloudBaseImage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HuaweiCloudBaseImage.Marshal(b, m, deterministic)
}
func (m *HuaweiCloudBaseImage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HuaweiCloudBaseImage.Merge(m, src)
}
func (m *HuaweiCloudBaseImage) XXX_Size() int {
	return xxx_messageInfo_HuaweiCloudBaseImage.Size(m)
}
func (m *HuaweiCloudBaseImage) XXX_DiscardUnknown() {
	xxx_messageInfo_HuaweiCloudBaseImage.DiscardUnknown(m)
}

var xxx_messageInfo_HuaweiCloudBaseImage proto.InternalMessageInfo

func (m *HuaweiCloudBaseImage) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *HuaweiCloudBaseImage) GetPackageType() string {
	if m != nil {
		return m.PackageType
	}
	return ""
}

func (m *HuaweiCloudBaseImage) GetTemplateFile() string {
	if m != nil {
		return m.TemplateFile
	}
	return ""
}

func (m *HuaweiCloudBaseImage) GetShortDescription() string {
	if m != nil {
		return m.ShortDescription
	}
	return ""
}

func (m *HuaweiCloudBaseImage) GetDetailedDescription() string {
	if m != nil {
		return m.DetailedDescription
	}
	return ""
}

// Huawei Cloud virtualization settings.
type HuaweiCloudVirtualizationSettings struct {
	// (Required) The region for the baking configuration.
	Region string `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	// (Required) The instance type for the baking configuration.
	InstanceType string `protobuf:"bytes,2,opt,name=instanceType,proto3" json:"instanceType,omitempty"`
	// (Required) The source image ID for the baking configuration.
	SourceImageId string `protobuf:"bytes,3,opt,name=sourceImageId,proto3" json:"sourceImageId,omitempty"`
	// (Required) The SSH username for the baking configuration.
	SshUserName string `protobuf:"bytes,4,opt,name=sshUserName,proto3" json:"sshUserName,omitempty"`
	// (Required) The EIP type for the baking configuration. See the API doc to
	// get its value.
	EipType              string   `protobuf:"bytes,5,opt,name=eipType,proto3" json:"eipType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HuaweiCloudVirtualizationSettings) Reset()         { *m = HuaweiCloudVirtualizationSettings{} }
func (m *HuaweiCloudVirtualizationSettings) String() string { return proto.CompactTextString(m) }
func (*HuaweiCloudVirtualizationSettings) ProtoMessage()    {}
func (*HuaweiCloudVirtualizationSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_60ab933dd71b8098, []int{5}
}

func (m *HuaweiCloudVirtualizationSettings) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HuaweiCloudVirtualizationSettings.Unmarshal(m, b)
}
func (m *HuaweiCloudVirtualizationSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HuaweiCloudVirtualizationSettings.Marshal(b, m, deterministic)
}
func (m *HuaweiCloudVirtualizationSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HuaweiCloudVirtualizationSettings.Merge(m, src)
}
func (m *HuaweiCloudVirtualizationSettings) XXX_Size() int {
	return xxx_messageInfo_HuaweiCloudVirtualizationSettings.Size(m)
}
func (m *HuaweiCloudVirtualizationSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_HuaweiCloudVirtualizationSettings.DiscardUnknown(m)
}

var xxx_messageInfo_HuaweiCloudVirtualizationSettings proto.InternalMessageInfo

func (m *HuaweiCloudVirtualizationSettings) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *HuaweiCloudVirtualizationSettings) GetInstanceType() string {
	if m != nil {
		return m.InstanceType
	}
	return ""
}

func (m *HuaweiCloudVirtualizationSettings) GetSourceImageId() string {
	if m != nil {
		return m.SourceImageId
	}
	return ""
}

func (m *HuaweiCloudVirtualizationSettings) GetSshUserName() string {
	if m != nil {
		return m.SshUserName
	}
	return ""
}

func (m *HuaweiCloudVirtualizationSettings) GetEipType() string {
	if m != nil {
		return m.EipType
	}
	return ""
}

func init() {
	proto.RegisterType((*HuaweiCloudProvider)(nil), "proto.HuaweiCloudProvider")
	proto.RegisterType((*HuaweiCloudAccount)(nil), "proto.HuaweiCloudAccount")
	proto.RegisterType((*HuaweiCloudBakeryDefaults)(nil), "proto.HuaweiCloudBakeryDefaults")
	proto.RegisterType((*HuaweiCloudBaseImageSettings)(nil), "proto.HuaweiCloudBaseImageSettings")
	proto.RegisterType((*HuaweiCloudBaseImage)(nil), "proto.HuaweiCloudBaseImage")
	proto.RegisterType((*HuaweiCloudVirtualizationSettings)(nil), "proto.HuaweiCloudVirtualizationSettings")
}

func init() { proto.RegisterFile("huaweicloud_provider.proto", fileDescriptor_60ab933dd71b8098) }

var fileDescriptor_60ab933dd71b8098 = []byte{
	// 704 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x55, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0x96, 0xe3, 0x26, 0x4d, 0x26, 0xa5, 0x2a, 0xdb, 0xaa, 0x72, 0x0b, 0x42, 0x21, 0x20, 0x14,
	0xf5, 0x50, 0xa1, 0x02, 0x07, 0xb8, 0xd1, 0x56, 0xd0, 0x1c, 0xa8, 0x2a, 0x97, 0x72, 0x85, 0x8d,
	0x3d, 0x24, 0x4b, 0xed, 0xb5, 0xd9, 0x5d, 0xa7, 0x4a, 0x9f, 0x88, 0x47, 0x40, 0xe2, 0xc4, 0x95,
	0x27, 0xe0, 0x71, 0x90, 0xd7, 0xeb, 0x74, 0x5d, 0xa7, 0xe1, 0x94, 0xcc, 0x37, 0x3f, 0x3b, 0xf3,
	0x7d, 0xb3, 0x6b, 0xd8, 0x9d, 0x64, 0xf4, 0x0a, 0x59, 0x10, 0x25, 0x59, 0xf8, 0x39, 0x15, 0xc9,
	0x94, 0x85, 0x28, 0xf6, 0x53, 0x91, 0xa8, 0x84, 0x34, 0xf5, 0xcf, 0xee, 0xfd, 0x14, 0x45, 0xcc,
	0xa4, 0x64, 0x09, 0x97, 0x85, 0xa7, 0xff, 0xd7, 0x81, 0xcd, 0x13, 0x9d, 0x78, 0x94, 0x27, 0x9e,
	0x99, 0x3c, 0xe2, 0xc1, 0x2a, 0x72, 0x3a, 0x8a, 0x30, 0xf4, 0x9c, 0x9e, 0x33, 0x68, 0xfb, 0xa5,
	0x49, 0x5e, 0x41, 0x9b, 0x06, 0x41, 0x92, 0x71, 0x25, 0xbd, 0x46, 0xcf, 0x1d, 0x74, 0x0f, 0x76,
	0x8a, 0x5a, 0xfb, 0x56, 0x9d, 0xb7, 0x45, 0x84, 0x3f, 0x0f, 0x25, 0xcf, 0x60, 0x3d, 0x15, 0x2c,
	0xa6, 0x62, 0x66, 0x7c, 0x9e, 0xdb, 0x73, 0x06, 0x1d, 0xff, 0x16, 0x4a, 0x4e, 0x60, 0x7d, 0x44,
	0x2f, 0x51, 0xcc, 0x8e, 0xf1, 0x2b, 0xcd, 0x22, 0x25, 0xbd, 0x95, 0x9e, 0x33, 0xe8, 0x1e, 0xf4,
	0xea, 0x87, 0x1c, 0x56, 0xe2, 0xfc, 0x5b, 0x79, 0xfd, 0x1f, 0x2e, 0x90, 0x7a, 0x4b, 0x84, 0xc0,
	0x0a, 0xa7, 0x31, 0xea, 0xb1, 0x3a, 0xbe, 0xfe, 0x4f, 0x7a, 0xd0, 0x35, 0x8d, 0x7e, 0x9c, 0xa5,
	0xe8, 0x35, 0xb4, 0xcb, 0x86, 0xc8, 0x1b, 0xf0, 0x04, 0x7e, 0xcf, 0x98, 0xc0, 0xf0, 0xbd, 0x48,
	0xb2, 0xf4, 0x03, 0xc6, 0x23, 0x14, 0x72, 0xc2, 0x52, 0xe9, 0xb9, 0x3d, 0x77, 0xd0, 0xf1, 0xef,
	0xf4, 0x93, 0x97, 0xd0, 0xb5, 0x88, 0x37, 0xf3, 0x10, 0x33, 0xcf, 0xd9, 0x8d, 0xc7, 0xb7, 0xc3,
	0x72, 0x05, 0x68, 0xa6, 0x26, 0x17, 0x22, 0xf2, 0x9a, 0xba, 0x9f, 0xd2, 0x24, 0x8f, 0x00, 0xc2,
	0x24, 0xa6, 0x8c, 0x9f, 0xe6, 0x73, 0xb4, 0xb4, 0xd3, 0x42, 0xf2, 0x69, 0x90, 0x4f, 0x99, 0x48,
	0x78, 0x8c, 0x5c, 0x79, 0xab, 0xc5, 0x34, 0x16, 0x44, 0x76, 0xa1, 0xcd, 0xb8, 0xc4, 0x20, 0x13,
	0xe8, 0xb5, 0xb5, 0xbc, 0x73, 0x3b, 0xf7, 0xa5, 0x54, 0xca, 0xab, 0x44, 0x84, 0x5e, 0x47, 0xa7,
	0xce, 0xed, 0xbc, 0x72, 0x2a, 0x92, 0x6f, 0x18, 0x28, 0x7d, 0x34, 0x14, 0x95, 0x2d, 0x28, 0xef,
	0x5a, 0xe0, 0x58, 0xcf, 0xd9, 0xd5, 0xb4, 0x94, 0x66, 0x5e, 0x37, 0x93, 0x28, 0x34, 0xf7, 0x6b,
	0x45, 0xdd, 0xd2, 0xee, 0xff, 0x74, 0x61, 0xe7, 0x4e, 0x61, 0xc9, 0x11, 0xc0, 0x88, 0x4a, 0x1c,
	0xc6, 0x74, 0x8c, 0xd2, 0x73, 0xf4, 0xce, 0x3d, 0x59, 0xb4, 0x0e, 0x26, 0xe6, 0x1c, 0x95, 0x62,
	0x7c, 0x2c, 0x7d, 0x2b, 0x8d, 0xf4, 0x61, 0x4d, 0x61, 0x9c, 0x46, 0x54, 0xe1, 0x3b, 0x16, 0x95,
	0x1a, 0x57, 0x30, 0x9b, 0x72, 0xb7, 0x4a, 0xb9, 0xdd, 0xfc, 0x4a, 0xb5, 0xf9, 0x0a, 0x61, 0xcd,
	0xe5, 0x84, 0xb5, 0xea, 0x84, 0x55, 0xc5, 0x5c, 0xad, 0x89, 0xb9, 0x4c, 0xaa, 0x2d, 0x68, 0x4e,
	0xd3, 0x60, 0x58, 0xea, 0x54, 0x18, 0x79, 0x86, 0xcc, 0x46, 0x1c, 0xd5, 0x30, 0x34, 0x0a, 0xcd,
	0x6d, 0xf2, 0x14, 0xee, 0xe9, 0x5c, 0xa6, 0x66, 0x7a, 0x4d, 0xbd, 0xae, 0x0e, 0xa8, 0x82, 0x64,
	0x0f, 0x36, 0x90, 0xa5, 0x87, 0x94, 0x87, 0x57, 0x2c, 0x54, 0x93, 0x73, 0x76, 0x5d, 0x48, 0xd6,
	0xf4, 0x6b, 0x78, 0xff, 0x97, 0x03, 0x0f, 0x97, 0x89, 0x40, 0x5e, 0x43, 0x67, 0x2e, 0x83, 0xbe,
	0x74, 0xdd, 0x83, 0x07, 0x4b, 0xc4, 0xf3, 0x6f, 0xa2, 0xc9, 0x17, 0xd8, 0x9e, 0x32, 0xa1, 0x32,
	0x1a, 0xb1, 0x6b, 0xaa, 0x58, 0xc2, 0xcb, 0xa2, 0xe6, 0xe1, 0x19, 0xd4, 0xeb, 0x7c, 0x5a, 0x18,
	0xef, 0xdf, 0x51, 0xa7, 0xff, 0xc7, 0x81, 0xad, 0x45, 0x5d, 0x90, 0x75, 0x68, 0xb0, 0xd0, 0xbc,
	0x11, 0x0d, 0x56, 0x08, 0x49, 0x83, 0x4b, 0x3a, 0x46, 0xfb, 0x85, 0xb0, 0xa0, 0xda, 0x82, 0xb9,
	0x0b, 0x16, 0x6c, 0x0f, 0x36, 0xe4, 0x24, 0x11, 0xea, 0x18, 0x65, 0x20, 0x58, 0x9a, 0xb7, 0x62,
	0xd6, 0xa9, 0x86, 0x93, 0xe7, 0xb0, 0x19, 0xa2, 0xa2, 0x2c, 0xc2, 0xd0, 0x0e, 0x2f, 0x36, 0x6c,
	0x91, 0xab, 0xff, 0xdb, 0x81, 0xc7, 0xff, 0xa5, 0x82, 0x6c, 0x43, 0xab, 0xb8, 0x92, 0x66, 0x3a,
	0x63, 0xe5, 0xfd, 0x33, 0x2e, 0x15, 0xe5, 0x81, 0x3d, 0x62, 0x05, 0xd3, 0xeb, 0x93, 0x64, 0x22,
	0x28, 0x48, 0x1a, 0x86, 0x66, 0xc8, 0x2a, 0x98, 0x73, 0x25, 0xe5, 0xe4, 0x42, 0xa2, 0x38, 0xbd,
	0xb9, 0x2f, 0x36, 0xa4, 0xbf, 0x2e, 0x2c, 0xd5, 0xc7, 0x98, 0xb7, 0xcd, 0x98, 0xa3, 0x96, 0x56,
	0xf4, 0xc5, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xce, 0x12, 0x59, 0x15, 0xce, 0x06, 0x00, 0x00,
}
