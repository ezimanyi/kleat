// Code generated by protoc-gen-go. DO NOT EDIT.
// source: halconfig.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type HalConfig struct {
	PersistentStorage    *HalConfig_PersistentStorage `protobuf:"bytes,1,opt,name=persistentStorage,proto3" json:"persistentStorage,omitempty"`
	Providers            *HalConfig_Providers         `protobuf:"bytes,2,opt,name=providers,proto3" json:"providers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *HalConfig) Reset()         { *m = HalConfig{} }
func (m *HalConfig) String() string { return proto.CompactTextString(m) }
func (*HalConfig) ProtoMessage()    {}
func (*HalConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_cda1892e07435feb, []int{0}
}

func (m *HalConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HalConfig.Unmarshal(m, b)
}
func (m *HalConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HalConfig.Marshal(b, m, deterministic)
}
func (m *HalConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HalConfig.Merge(m, src)
}
func (m *HalConfig) XXX_Size() int {
	return xxx_messageInfo_HalConfig.Size(m)
}
func (m *HalConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_HalConfig.DiscardUnknown(m)
}

var xxx_messageInfo_HalConfig proto.InternalMessageInfo

func (m *HalConfig) GetPersistentStorage() *HalConfig_PersistentStorage {
	if m != nil {
		return m.PersistentStorage
	}
	return nil
}

func (m *HalConfig) GetProviders() *HalConfig_Providers {
	if m != nil {
		return m.Providers
	}
	return nil
}

type HalConfig_PersistentStorage struct {
	PersistentStoreType  string   `protobuf:"bytes,1,opt,name=persistentStoreType,proto3" json:"persistentStoreType,omitempty"`
	Gcs                  *GCS     `protobuf:"bytes,2,opt,name=gcs,proto3" json:"gcs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HalConfig_PersistentStorage) Reset()         { *m = HalConfig_PersistentStorage{} }
func (m *HalConfig_PersistentStorage) String() string { return proto.CompactTextString(m) }
func (*HalConfig_PersistentStorage) ProtoMessage()    {}
func (*HalConfig_PersistentStorage) Descriptor() ([]byte, []int) {
	return fileDescriptor_cda1892e07435feb, []int{0, 0}
}

func (m *HalConfig_PersistentStorage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HalConfig_PersistentStorage.Unmarshal(m, b)
}
func (m *HalConfig_PersistentStorage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HalConfig_PersistentStorage.Marshal(b, m, deterministic)
}
func (m *HalConfig_PersistentStorage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HalConfig_PersistentStorage.Merge(m, src)
}
func (m *HalConfig_PersistentStorage) XXX_Size() int {
	return xxx_messageInfo_HalConfig_PersistentStorage.Size(m)
}
func (m *HalConfig_PersistentStorage) XXX_DiscardUnknown() {
	xxx_messageInfo_HalConfig_PersistentStorage.DiscardUnknown(m)
}

var xxx_messageInfo_HalConfig_PersistentStorage proto.InternalMessageInfo

func (m *HalConfig_PersistentStorage) GetPersistentStoreType() string {
	if m != nil {
		return m.PersistentStoreType
	}
	return ""
}

func (m *HalConfig_PersistentStorage) GetGcs() *GCS {
	if m != nil {
		return m.Gcs
	}
	return nil
}

type HalConfig_Providers struct {
	Kubernetes           *Kubernetes     `protobuf:"bytes,1,opt,name=kubernetes,proto3" json:"kubernetes,omitempty"`
	Google               *Google         `protobuf:"bytes,2,opt,name=google,proto3" json:"google,omitempty"`
	Appengine            *Appengine      `protobuf:"bytes,3,opt,name=appengine,proto3" json:"appengine,omitempty"`
	Aws                  *Aws            `protobuf:"bytes,4,opt,name=aws,proto3" json:"aws,omitempty"`
	Azure                *Azure          `protobuf:"bytes,5,opt,name=azure,proto3" json:"azure,omitempty"`
	Cloudfoundry         *CloudFoundry   `protobuf:"bytes,6,opt,name=cloudfoundry,proto3" json:"cloudfoundry,omitempty"`
	Dcos                 *Dcos           `protobuf:"bytes,7,opt,name=dcos,proto3" json:"dcos,omitempty"`
	DockerRegistry       *DockerRegistry `protobuf:"bytes,8,opt,name=dockerRegistry,proto3" json:"dockerRegistry,omitempty"`
	Ecs                  *Ecs            `protobuf:"bytes,9,opt,name=ecs,proto3" json:"ecs,omitempty"`
	Huaweicloud          *HuaweiCloud    `protobuf:"bytes,10,opt,name=huaweicloud,proto3" json:"huaweicloud,omitempty"`
	Oracle               *Oracle         `protobuf:"bytes,11,opt,name=oracle,proto3" json:"oracle,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *HalConfig_Providers) Reset()         { *m = HalConfig_Providers{} }
func (m *HalConfig_Providers) String() string { return proto.CompactTextString(m) }
func (*HalConfig_Providers) ProtoMessage()    {}
func (*HalConfig_Providers) Descriptor() ([]byte, []int) {
	return fileDescriptor_cda1892e07435feb, []int{0, 1}
}

func (m *HalConfig_Providers) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HalConfig_Providers.Unmarshal(m, b)
}
func (m *HalConfig_Providers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HalConfig_Providers.Marshal(b, m, deterministic)
}
func (m *HalConfig_Providers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HalConfig_Providers.Merge(m, src)
}
func (m *HalConfig_Providers) XXX_Size() int {
	return xxx_messageInfo_HalConfig_Providers.Size(m)
}
func (m *HalConfig_Providers) XXX_DiscardUnknown() {
	xxx_messageInfo_HalConfig_Providers.DiscardUnknown(m)
}

var xxx_messageInfo_HalConfig_Providers proto.InternalMessageInfo

func (m *HalConfig_Providers) GetKubernetes() *Kubernetes {
	if m != nil {
		return m.Kubernetes
	}
	return nil
}

func (m *HalConfig_Providers) GetGoogle() *Google {
	if m != nil {
		return m.Google
	}
	return nil
}

func (m *HalConfig_Providers) GetAppengine() *Appengine {
	if m != nil {
		return m.Appengine
	}
	return nil
}

func (m *HalConfig_Providers) GetAws() *Aws {
	if m != nil {
		return m.Aws
	}
	return nil
}

func (m *HalConfig_Providers) GetAzure() *Azure {
	if m != nil {
		return m.Azure
	}
	return nil
}

func (m *HalConfig_Providers) GetCloudfoundry() *CloudFoundry {
	if m != nil {
		return m.Cloudfoundry
	}
	return nil
}

func (m *HalConfig_Providers) GetDcos() *Dcos {
	if m != nil {
		return m.Dcos
	}
	return nil
}

func (m *HalConfig_Providers) GetDockerRegistry() *DockerRegistry {
	if m != nil {
		return m.DockerRegistry
	}
	return nil
}

func (m *HalConfig_Providers) GetEcs() *Ecs {
	if m != nil {
		return m.Ecs
	}
	return nil
}

func (m *HalConfig_Providers) GetHuaweicloud() *HuaweiCloud {
	if m != nil {
		return m.Huaweicloud
	}
	return nil
}

func (m *HalConfig_Providers) GetOracle() *Oracle {
	if m != nil {
		return m.Oracle
	}
	return nil
}

func init() {
	proto.RegisterType((*HalConfig)(nil), "proto.HalConfig")
	proto.RegisterType((*HalConfig_PersistentStorage)(nil), "proto.HalConfig.PersistentStorage")
	proto.RegisterType((*HalConfig_Providers)(nil), "proto.HalConfig.Providers")
}

func init() { proto.RegisterFile("halconfig.proto", fileDescriptor_cda1892e07435feb) }

var fileDescriptor_cda1892e07435feb = []byte{
	// 448 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0x4f, 0x6b, 0x1b, 0x31,
	0x10, 0xc5, 0x49, 0x1d, 0xbb, 0xd5, 0xac, 0xdb, 0xc4, 0x0a, 0x01, 0xb1, 0x14, 0x5a, 0x0c, 0x85,
	0x9e, 0x4c, 0xff, 0x41, 0x7b, 0xe9, 0x21, 0xb8, 0xff, 0xa0, 0x87, 0x86, 0x49, 0xef, 0x41, 0xd1,
	0x2a, 0x9b, 0x25, 0x66, 0xb5, 0x48, 0xbb, 0x35, 0xe9, 0x47, 0x6e, 0xbf, 0x44, 0xd1, 0x48, 0x5a,
	0xef, 0xc6, 0x3d, 0x09, 0xde, 0xfb, 0x8d, 0x66, 0x86, 0x79, 0x70, 0x74, 0x23, 0x37, 0xca, 0xd4,
	0xd7, 0x55, 0xb9, 0x6a, 0xac, 0x69, 0x0d, 0x9f, 0xd2, 0x93, 0x8b, 0x46, 0x5b, 0x57, 0xb9, 0x56,
	0xd7, 0xed, 0xa5, 0x6b, 0x8d, 0x95, 0xa5, 0x0e, 0x40, 0x7e, 0x7c, 0xdb, 0x5d, 0x69, 0x5b, 0xeb,
	0x56, 0xbb, 0xa8, 0xcc, 0x4b, 0x63, 0xca, 0x4d, 0xf2, 0x8f, 0x64, 0xd3, 0xe8, 0xba, 0xac, 0xea,
	0x24, 0x30, 0xb9, 0x4d, 0x64, 0x26, 0x7f, 0x77, 0x36, 0xe9, 0x5c, 0x6d, 0x4c, 0x57, 0x5c, 0x9b,
	0xae, 0x2e, 0xec, 0x5d, 0xd4, 0xa0, 0x50, 0x26, 0xc1, 0xa7, 0x85, 0x51, 0xb7, 0xda, 0x5e, 0x5a,
	0x5d, 0x56, 0xae, 0xed, 0x11, 0xa6, 0x55, 0x22, 0x16, 0x37, 0x9d, 0xdc, 0xea, 0x8a, 0xfe, 0x49,
	0xb3, 0x18, 0x2b, 0x55, 0x9a, 0x65, 0xf9, 0x67, 0x0a, 0xec, 0x9b, 0xdc, 0xac, 0x69, 0x41, 0x7e,
	0x0e, 0x8b, 0xdd, 0x56, 0x17, 0x61, 0x29, 0x71, 0xf0, 0xfc, 0xe0, 0x65, 0xf6, 0x66, 0x19, 0x0a,
	0x56, 0x3d, 0xbc, 0x3a, 0xbf, 0x4f, 0xe2, 0x7e, 0x31, 0xff, 0x00, 0xac, 0xb1, 0xe6, 0x57, 0x55,
	0x68, 0xeb, 0xc4, 0x03, 0xfa, 0x29, 0xdf, 0xff, 0x29, 0x11, 0xb8, 0x83, 0x73, 0x05, 0x8b, 0xbd,
	0x0e, 0xfc, 0x15, 0x9c, 0x8c, 0x7b, 0xe8, 0x9f, 0x77, 0x4d, 0x18, 0x91, 0xe1, 0xff, 0x2c, 0xfe,
	0x14, 0x26, 0xa5, 0x4a, 0xad, 0x21, 0xb6, 0xfe, 0xba, 0xbe, 0x40, 0x2f, 0xe7, 0x7f, 0x27, 0xc0,
	0xfa, 0xee, 0xfc, 0x35, 0xc0, 0xee, 0x74, 0x71, 0xef, 0x45, 0x2c, 0xf9, 0xde, 0x1b, 0x38, 0x80,
	0xf8, 0x0b, 0x98, 0x85, 0xdb, 0xc6, 0x0e, 0x8f, 0x53, 0x07, 0x12, 0x31, 0x9a, 0x7c, 0x05, 0xac,
	0x3f, 0xba, 0x98, 0x10, 0x79, 0x1c, 0xc9, 0xb3, 0xa4, 0xe3, 0x0e, 0xf1, 0x53, 0xcb, 0xad, 0x13,
	0x87, 0xa3, 0xa9, 0xcf, 0xb6, 0x0e, 0xbd, 0xcc, 0x97, 0x30, 0xa5, 0x98, 0x88, 0x29, 0xf9, 0xf3,
	0xe4, 0x7b, 0x0d, 0x83, 0xc5, 0xdf, 0xc3, 0x7c, 0x98, 0x1e, 0x31, 0x23, 0xf4, 0x24, 0xa2, 0x6b,
	0x6f, 0x7d, 0x09, 0x16, 0x8e, 0x40, 0xfe, 0x0c, 0x0e, 0x7d, 0xc4, 0xc4, 0x43, 0x2a, 0xc8, 0x62,
	0xc1, 0x27, 0x65, 0x1c, 0x92, 0xc1, 0x3f, 0xc2, 0x93, 0x90, 0x3b, 0x8c, 0xb1, 0x13, 0x8f, 0x08,
	0x3d, 0x4d, 0xe8, 0xc8, 0xc4, 0x7b, 0xb0, 0x5f, 0x4d, 0x2b, 0x27, 0xd8, 0x68, 0xb5, 0xcf, 0xca,
	0xa1, 0x97, 0xf9, 0x3b, 0xc8, 0x06, 0x91, 0x15, 0x40, 0x14, 0x4f, 0x89, 0x21, 0x87, 0x66, 0xc7,
	0x21, 0xe6, 0xaf, 0x10, 0x52, 0x2d, 0xb2, 0xd1, 0x15, 0x7e, 0x90, 0x88, 0xd1, 0xbc, 0x9a, 0x91,
	0xfa, 0xf6, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x59, 0x06, 0x30, 0x56, 0xd3, 0x03, 0x00, 0x00,
}
