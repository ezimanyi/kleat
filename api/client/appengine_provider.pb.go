// Code generated by protoc-gen-go. DO NOT EDIT.
// source: appengine_provider.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Configuration for the Google App Engine (GAE) provider.
type AppengineProvider struct {
	// Whether the provider is enabled.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// The list of configured accounts.
	Accounts []*AppengineAccount `protobuf:"bytes,2,rep,name=accounts,proto3" json:"accounts,omitempty"`
	// The name of the primary account.
	PrimaryAccount       string   `protobuf:"bytes,3,opt,name=primaryAccount,proto3" json:"primaryAccount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AppengineProvider) Reset()         { *m = AppengineProvider{} }
func (m *AppengineProvider) String() string { return proto.CompactTextString(m) }
func (*AppengineProvider) ProtoMessage()    {}
func (*AppengineProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_b058e5b683ee2a72, []int{0}
}

func (m *AppengineProvider) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AppengineProvider.Unmarshal(m, b)
}
func (m *AppengineProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AppengineProvider.Marshal(b, m, deterministic)
}
func (m *AppengineProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppengineProvider.Merge(m, src)
}
func (m *AppengineProvider) XXX_Size() int {
	return xxx_messageInfo_AppengineProvider.Size(m)
}
func (m *AppengineProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_AppengineProvider.DiscardUnknown(m)
}

var xxx_messageInfo_AppengineProvider proto.InternalMessageInfo

func (m *AppengineProvider) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *AppengineProvider) GetAccounts() []*AppengineAccount {
	if m != nil {
		return m.Accounts
	}
	return nil
}

func (m *AppengineProvider) GetPrimaryAccount() string {
	if m != nil {
		return m.PrimaryAccount
	}
	return ""
}

// Configuration for an App Engine account.
type AppengineAccount struct {
	// The interval in seconds at which Spinnaker will poll for updates in
	// your App Engine clusters.
	CachingIntervalSeconds int32 `protobuf:"varint,1,opt,name=cachingIntervalSeconds,proto3" json:"cachingIntervalSeconds,omitempty"`
	// The environment name for the account. Many accounts can share the
	// same environment (e.g., dev, test, prod).
	Environment string `protobuf:"bytes,2,opt,name=environment,proto3" json:"environment,omitempty"`
	// The gcloud release track (`ALPHA`, `BETA`, or `STABLE`) that Spinnaker
	// will use when deploying to App Engine.
	GcloudReleaseTrack string `protobuf:"bytes,3,opt,name=gcloudReleaseTrack,proto3" json:"gcloudReleaseTrack,omitempty"`
	// A username to be used when connecting to a remote git repository
	// server over HTTPS. If set, `gitHttpsPassword` must also be set.
	GitHttpsUsername string `protobuf:"bytes,4,opt,name=gitHttpsUsername,proto3" json:"gitHttpsUsername,omitempty"`
	//  A password to be used when connecting to a remote git repository
	//  server over HTTPS. If set, `gitHttpsUsername` must also be set.
	GitHttpsPassword string `protobuf:"bytes,5,opt,name=gitHttpsPassword,proto3" json:"gitHttpsPassword,omitempty"`
	// An OAuth token provided by Github for connecting to a git repository
	// over HTTPS. See
	// https://help.github.com/articles/creating-an-access-token-for-command-line-use
	// for more information.
	GithubOAuthAccessToken string `protobuf:"bytes,6,opt,name=githubOAuthAccessToken,proto3" json:"githubOAuthAccessToken,omitempty"`
	// The path to a JSON service account that Spinnaker will use as
	// credentials. This is only needed if Spinnaker is not deployed on a
	// Google Compute Engine VM, or needs permissions not afforded to the VM
	// it is running on. See
	// https://cloud.google.com/compute/docs/access/service-accounts for
	// more information.
	JsonPath string `protobuf:"bytes,7,opt,name=jsonPath,proto3" json:"jsonPath,omitempty"`
	// A local directory to be used to stage source files for App Engine
	// deployments within Clouddriver.
	// Defaults to `/var/tmp/clouddriver`.
	LocalRepositoryDirectory string `protobuf:"bytes,8,opt,name=localRepositoryDirectory,proto3" json:"localRepositoryDirectory,omitempty"`
	// A list of regular expressions. Any service matching one of these
	// regexes will be ignored by Spinnaker.
	OmitServices []string `protobuf:"bytes,9,rep,name=omitServices,proto3" json:"omitServices,omitempty"`
	//  A list of regular expressions. Any version matching one of these
	//  regexes will be ignored by Spinnaker.
	OmitVersions []string `protobuf:"bytes,10,rep,name=omitVersions,proto3" json:"omitVersions,omitempty"`
	// The Google Cloud Platform project this Spinnaker account will manage.
	Project string `protobuf:"bytes,11,opt,name=project,proto3" json:"project,omitempty"`
	// Fiat permissions configuration.
	Permissions *Permissions `protobuf:"bytes,12,opt,name=permissions,proto3" json:"permissions,omitempty"`
	// (Deprecated): List of required Fiat permission groups. Configure
	// `permissions` instead.
	RequiredGroupMemberships []string `protobuf:"bytes,13,rep,name=requiredGroupMemberships,proto3" json:"requiredGroupMemberships,omitempty"`
	// A list of regular expressions. Any service matching one of these
	// regexes will be indexed by Spinnaker (unless the service also
	// matches a regex in `omitServices`).
	Services []string `protobuf:"bytes,14,rep,name=services,proto3" json:"services,omitempty"`
	// The path to a `known_hosts` file to be used when connecting with a
	// remote git repository over SSH.
	SshKnownHostsFilePath string `protobuf:"bytes,15,opt,name=sshKnownHostsFilePath,proto3" json:"sshKnownHostsFilePath,omitempty"`
	// The path to an SSH private key to be used when connecting with a
	// remote git repository over SSH. If set, `sshPrivateKeyPassphrase` must
	// also be set.
	SshPrivateKeyFilePath string `protobuf:"bytes,16,opt,name=sshPrivateKeyFilePath,proto3" json:"sshPrivateKeyFilePath,omitempty"`
	// The passphrase to an SSH private key to be used when connecting with
	// a remote git repository over SSH. If set, `sshPrivateKeyFilePath` must
	// also be set.
	SshPrivateKeyPassphrase string `protobuf:"bytes,17,opt,name=sshPrivateKeyPassphrase,proto3" json:"sshPrivateKeyPassphrase,omitempty"`
	// Enabling this flag will allow Spinnaker to connect with a remote git
	// repository over SSH without verifying the server's IP address against
	// a `known_hosts` file. Defaults to false.
	SshTrustUnknownHosts bool `protobuf:"varint,18,opt,name=sshTrustUnknownHosts,proto3" json:"sshTrustUnknownHosts,omitempty"`
	// A list of regular expressions. Any version matching one of these
	// regexes will be indexed by Spinnaker (unless the version also matches
	// a regex in `omitVersions`).
	Versions []string `protobuf:"bytes,19,rep,name=versions,proto3" json:"versions,omitempty"`
	// The name of the account.
	Name                 string   `protobuf:"bytes,20,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AppengineAccount) Reset()         { *m = AppengineAccount{} }
func (m *AppengineAccount) String() string { return proto.CompactTextString(m) }
func (*AppengineAccount) ProtoMessage()    {}
func (*AppengineAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_b058e5b683ee2a72, []int{1}
}

func (m *AppengineAccount) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AppengineAccount.Unmarshal(m, b)
}
func (m *AppengineAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AppengineAccount.Marshal(b, m, deterministic)
}
func (m *AppengineAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppengineAccount.Merge(m, src)
}
func (m *AppengineAccount) XXX_Size() int {
	return xxx_messageInfo_AppengineAccount.Size(m)
}
func (m *AppengineAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_AppengineAccount.DiscardUnknown(m)
}

var xxx_messageInfo_AppengineAccount proto.InternalMessageInfo

func (m *AppengineAccount) GetCachingIntervalSeconds() int32 {
	if m != nil {
		return m.CachingIntervalSeconds
	}
	return 0
}

func (m *AppengineAccount) GetEnvironment() string {
	if m != nil {
		return m.Environment
	}
	return ""
}

func (m *AppengineAccount) GetGcloudReleaseTrack() string {
	if m != nil {
		return m.GcloudReleaseTrack
	}
	return ""
}

func (m *AppengineAccount) GetGitHttpsUsername() string {
	if m != nil {
		return m.GitHttpsUsername
	}
	return ""
}

func (m *AppengineAccount) GetGitHttpsPassword() string {
	if m != nil {
		return m.GitHttpsPassword
	}
	return ""
}

func (m *AppengineAccount) GetGithubOAuthAccessToken() string {
	if m != nil {
		return m.GithubOAuthAccessToken
	}
	return ""
}

func (m *AppengineAccount) GetJsonPath() string {
	if m != nil {
		return m.JsonPath
	}
	return ""
}

func (m *AppengineAccount) GetLocalRepositoryDirectory() string {
	if m != nil {
		return m.LocalRepositoryDirectory
	}
	return ""
}

func (m *AppengineAccount) GetOmitServices() []string {
	if m != nil {
		return m.OmitServices
	}
	return nil
}

func (m *AppengineAccount) GetOmitVersions() []string {
	if m != nil {
		return m.OmitVersions
	}
	return nil
}

func (m *AppengineAccount) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *AppengineAccount) GetPermissions() *Permissions {
	if m != nil {
		return m.Permissions
	}
	return nil
}

func (m *AppengineAccount) GetRequiredGroupMemberships() []string {
	if m != nil {
		return m.RequiredGroupMemberships
	}
	return nil
}

func (m *AppengineAccount) GetServices() []string {
	if m != nil {
		return m.Services
	}
	return nil
}

func (m *AppengineAccount) GetSshKnownHostsFilePath() string {
	if m != nil {
		return m.SshKnownHostsFilePath
	}
	return ""
}

func (m *AppengineAccount) GetSshPrivateKeyFilePath() string {
	if m != nil {
		return m.SshPrivateKeyFilePath
	}
	return ""
}

func (m *AppengineAccount) GetSshPrivateKeyPassphrase() string {
	if m != nil {
		return m.SshPrivateKeyPassphrase
	}
	return ""
}

func (m *AppengineAccount) GetSshTrustUnknownHosts() bool {
	if m != nil {
		return m.SshTrustUnknownHosts
	}
	return false
}

func (m *AppengineAccount) GetVersions() []string {
	if m != nil {
		return m.Versions
	}
	return nil
}

func (m *AppengineAccount) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*AppengineProvider)(nil), "proto.AppengineProvider")
	proto.RegisterType((*AppengineAccount)(nil), "proto.AppengineAccount")
}

func init() { proto.RegisterFile("appengine_provider.proto", fileDescriptor_b058e5b683ee2a72) }

var fileDescriptor_b058e5b683ee2a72 = []byte{
	// 527 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x93, 0xcf, 0x6e, 0x13, 0x31,
	0x10, 0xc6, 0x95, 0xfe, 0x4d, 0x9d, 0x52, 0x5a, 0x53, 0xa8, 0xd5, 0xd3, 0x2a, 0x07, 0x14, 0x71,
	0xc8, 0x21, 0xad, 0x10, 0xe2, 0x16, 0x09, 0x41, 0x51, 0x85, 0x88, 0xb6, 0x29, 0x57, 0xe4, 0x78,
	0x47, 0x59, 0x37, 0xbb, 0xb6, 0x99, 0xf1, 0x6e, 0x95, 0x57, 0xe0, 0xa1, 0x11, 0x5a, 0x27, 0xbb,
	0x4d, 0xda, 0xe4, 0x94, 0x9d, 0xf9, 0x7d, 0x9f, 0x67, 0xc6, 0x9e, 0x30, 0x21, 0x9d, 0x03, 0x33,
	0xd5, 0x06, 0x7e, 0x3b, 0xb4, 0xa5, 0x4e, 0x00, 0xfb, 0x0e, 0xad, 0xb7, 0x7c, 0x3f, 0xfc, 0x5c,
	0x9e, 0x39, 0xc0, 0x5c, 0x13, 0x69, 0x6b, 0x68, 0x41, 0xba, 0x7f, 0x5b, 0xec, 0x6c, 0x58, 0xdb,
	0x46, 0x4b, 0x17, 0x17, 0xec, 0x10, 0x8c, 0x9c, 0x64, 0x90, 0x88, 0x56, 0xd4, 0xea, 0xb5, 0xe3,
	0x3a, 0xe4, 0x57, 0xac, 0x2d, 0x95, 0xb2, 0x85, 0xf1, 0x24, 0x76, 0xa2, 0xdd, 0x5e, 0x67, 0x70,
	0xb1, 0x38, 0xa9, 0xdf, 0x9c, 0x32, 0x5c, 0xf0, 0xb8, 0x11, 0xf2, 0xf7, 0xec, 0xc4, 0xa1, 0xce,
	0x25, 0xce, 0x97, 0x4c, 0xec, 0x46, 0xad, 0xde, 0x51, 0xfc, 0x2c, 0xdb, 0xfd, 0x77, 0xc0, 0x4e,
	0x9f, 0x1f, 0xc3, 0x3f, 0xb2, 0x77, 0x4a, 0xaa, 0x54, 0x9b, 0xe9, 0x77, 0xe3, 0x01, 0x4b, 0x99,
	0xdd, 0x81, 0xb2, 0x26, 0xa1, 0xd0, 0xda, 0x7e, 0xbc, 0x85, 0xf2, 0x88, 0x75, 0xc0, 0x94, 0x1a,
	0xad, 0xc9, 0xc1, 0x78, 0xb1, 0x13, 0x2a, 0xae, 0xa6, 0x78, 0x9f, 0xf1, 0xa9, 0xca, 0x6c, 0x91,
	0xc4, 0x90, 0x81, 0x24, 0x18, 0xa3, 0x54, 0xb3, 0x65, 0x6b, 0x1b, 0x08, 0xff, 0xc0, 0x4e, 0xa7,
	0xda, 0xdf, 0x78, 0xef, 0xe8, 0x9e, 0x00, 0x8d, 0xcc, 0x41, 0xec, 0x05, 0xf5, 0x8b, 0xfc, 0xaa,
	0x76, 0x24, 0x89, 0x1e, 0x2d, 0x26, 0x62, 0x7f, 0x5d, 0x5b, 0xe7, 0xab, 0x09, 0xa7, 0xda, 0xa7,
	0xc5, 0xe4, 0xe7, 0xb0, 0xf0, 0xe9, 0x50, 0x29, 0x20, 0x1a, 0xdb, 0x19, 0x18, 0x71, 0x10, 0x1c,
	0x5b, 0x28, 0xbf, 0x64, 0xed, 0x07, 0xb2, 0x66, 0x24, 0x7d, 0x2a, 0x0e, 0x83, 0xb2, 0x89, 0xf9,
	0x67, 0x26, 0x32, 0xab, 0x64, 0x16, 0x83, 0xb3, 0xa4, 0xbd, 0xc5, 0xf9, 0x17, 0x8d, 0xa0, 0xaa,
	0x0f, 0xd1, 0x0e, 0xda, 0xad, 0x9c, 0x77, 0xd9, 0xb1, 0xcd, 0xb5, 0xbf, 0x03, 0x2c, 0xb5, 0x02,
	0x12, 0x47, 0xd1, 0x6e, 0xef, 0x28, 0x5e, 0xcb, 0xd5, 0x9a, 0x5f, 0x80, 0x61, 0x9b, 0x04, 0x7b,
	0xd2, 0xd4, 0xb9, 0x6a, 0x8b, 0x1c, 0xda, 0x07, 0x50, 0x5e, 0x74, 0x42, 0xc9, 0x3a, 0xe4, 0xd7,
	0xac, 0xb3, 0xb2, 0x8a, 0xe2, 0x38, 0x6a, 0xf5, 0x3a, 0x03, 0xbe, 0x5c, 0xa4, 0xd1, 0x13, 0x89,
	0x57, 0x65, 0xd5, 0x4c, 0x08, 0x7f, 0x0a, 0x8d, 0x90, 0x7c, 0x43, 0x5b, 0xb8, 0x1f, 0x90, 0x4f,
	0x00, 0x29, 0xd5, 0x8e, 0xc4, 0xab, 0x50, 0x7f, 0x2b, 0xaf, 0xee, 0x8a, 0xea, 0x79, 0x4e, 0x82,
	0xb6, 0x89, 0xf9, 0x35, 0x7b, 0x4b, 0x94, 0xde, 0x1a, 0xfb, 0x68, 0x6e, 0x2c, 0x79, 0xfa, 0xaa,
	0x33, 0x08, 0x97, 0xfa, 0x3a, 0x74, 0xbd, 0x19, 0x2e, 0x5d, 0x23, 0xd4, 0xa5, 0xf4, 0x70, 0x0b,
	0xf3, 0xc6, 0x75, 0xda, 0xb8, 0x5e, 0x42, 0xfe, 0x89, 0x5d, 0xac, 0x81, 0x6a, 0x09, 0x5c, 0x8a,
	0x92, 0x40, 0x9c, 0x05, 0xdf, 0x36, 0xcc, 0x07, 0xec, 0x9c, 0x28, 0x1d, 0x63, 0x41, 0xfe, 0xde,
	0xcc, 0x9a, 0x7e, 0x04, 0x0f, 0x7f, 0xd0, 0x8d, 0xac, 0x9a, 0xba, 0xac, 0x5f, 0xe8, 0xcd, 0x62,
	0xea, 0x3a, 0xe6, 0x9c, 0xed, 0x85, 0x0d, 0x3e, 0x0f, 0x65, 0xc3, 0xf7, 0xe4, 0x20, 0xbc, 0xc0,
	0xd5, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x1a, 0x2a, 0x6e, 0x20, 0x4a, 0x04, 0x00, 0x00,
}
