// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dcos.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Configuration for the DC/OS (Distributed Cloud Operating System) provider.
type DcosProvider struct {
	// Whether the provider is enabled.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// The list of configured accounts.
	Accounts []*DcosAccount `protobuf:"bytes,2,rep,name=accounts,proto3" json:"accounts,omitempty"`
	// The name of the primary account.
	PrimaryAccount string `protobuf:"bytes,3,opt,name=primaryAccount,proto3" json:"primaryAccount,omitempty"`
	// The list of configured clusters.
	Clusters             []*DcosCluster `protobuf:"bytes,4,rep,name=clusters,proto3" json:"clusters,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *DcosProvider) Reset()         { *m = DcosProvider{} }
func (m *DcosProvider) String() string { return proto.CompactTextString(m) }
func (*DcosProvider) ProtoMessage()    {}
func (*DcosProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_7539d96d61ac2f4f, []int{0}
}

func (m *DcosProvider) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DcosProvider.Unmarshal(m, b)
}
func (m *DcosProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DcosProvider.Marshal(b, m, deterministic)
}
func (m *DcosProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DcosProvider.Merge(m, src)
}
func (m *DcosProvider) XXX_Size() int {
	return xxx_messageInfo_DcosProvider.Size(m)
}
func (m *DcosProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_DcosProvider.DiscardUnknown(m)
}

var xxx_messageInfo_DcosProvider proto.InternalMessageInfo

func (m *DcosProvider) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *DcosProvider) GetAccounts() []*DcosAccount {
	if m != nil {
		return m.Accounts
	}
	return nil
}

func (m *DcosProvider) GetPrimaryAccount() string {
	if m != nil {
		return m.PrimaryAccount
	}
	return ""
}

func (m *DcosProvider) GetClusters() []*DcosCluster {
	if m != nil {
		return m.Clusters
	}
	return nil
}

// Credentials to authenticate against one or more DC/OS clusters.
type DcosAccount struct {
	// (Required) The name of the account.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// (Required) The clusters against which this account will authenticate.
	Clusters []*DcosAccountCluster `protobuf:"bytes,2,rep,name=clusters,proto3" json:"clusters,omitempty"`
	// The environment name for the account. Many accounts can share the
	// same environment (e.g., dev, test, prod).
	Environment string `protobuf:"bytes,3,opt,name=environment,proto3" json:"environment,omitempty"`
	// (Required) The list of Docker registries to use with this DC/OS account.
	DockerRegistries []*DcosAccountDockerRegistry `protobuf:"bytes,4,rep,name=dockerRegistries,proto3" json:"dockerRegistries,omitempty"`
	// Fiat permissions configuration.
	Permissions *Permissions `protobuf:"bytes,5,opt,name=permissions,proto3" json:"permissions,omitempty"`
	// (Deprecated) List of required Fiat permission groups. Configure
	// `permissions` instead.
	RequiredGroupMemberships []string `protobuf:"bytes,6,rep,name=requiredGroupMemberships,proto3" json:"requiredGroupMemberships,omitempty"`
	XXX_NoUnkeyedLiteral     struct{} `json:"-"`
	XXX_unrecognized         []byte   `json:"-"`
	XXX_sizecache            int32    `json:"-"`
}

func (m *DcosAccount) Reset()         { *m = DcosAccount{} }
func (m *DcosAccount) String() string { return proto.CompactTextString(m) }
func (*DcosAccount) ProtoMessage()    {}
func (*DcosAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_7539d96d61ac2f4f, []int{1}
}

func (m *DcosAccount) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DcosAccount.Unmarshal(m, b)
}
func (m *DcosAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DcosAccount.Marshal(b, m, deterministic)
}
func (m *DcosAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DcosAccount.Merge(m, src)
}
func (m *DcosAccount) XXX_Size() int {
	return xxx_messageInfo_DcosAccount.Size(m)
}
func (m *DcosAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_DcosAccount.DiscardUnknown(m)
}

var xxx_messageInfo_DcosAccount proto.InternalMessageInfo

func (m *DcosAccount) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DcosAccount) GetClusters() []*DcosAccountCluster {
	if m != nil {
		return m.Clusters
	}
	return nil
}

func (m *DcosAccount) GetEnvironment() string {
	if m != nil {
		return m.Environment
	}
	return ""
}

func (m *DcosAccount) GetDockerRegistries() []*DcosAccountDockerRegistry {
	if m != nil {
		return m.DockerRegistries
	}
	return nil
}

func (m *DcosAccount) GetPermissions() *Permissions {
	if m != nil {
		return m.Permissions
	}
	return nil
}

func (m *DcosAccount) GetRequiredGroupMemberships() []string {
	if m != nil {
		return m.RequiredGroupMemberships
	}
	return nil
}

// Configuration for a DC/OS cluster associated with a `DcosAccount`.
type DcosAccountCluster struct {
	// (Required) The name of the cluster. Must match the name of a
	// `DcosCluster` defined for this provider.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// (Required) User or service account identifier.
	Uid string `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	// Path to a file containing the secret key for service account
	// authentication. If set, `password` should not be set.
	ServiceKeyFile string `protobuf:"bytes,3,opt,name=serviceKeyFile,proto3" json:"serviceKeyFile,omitempty"`
	// Password for a user account. If set, `serviceKeyFile` should not be set.
	Password             string   `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DcosAccountCluster) Reset()         { *m = DcosAccountCluster{} }
func (m *DcosAccountCluster) String() string { return proto.CompactTextString(m) }
func (*DcosAccountCluster) ProtoMessage()    {}
func (*DcosAccountCluster) Descriptor() ([]byte, []int) {
	return fileDescriptor_7539d96d61ac2f4f, []int{2}
}

func (m *DcosAccountCluster) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DcosAccountCluster.Unmarshal(m, b)
}
func (m *DcosAccountCluster) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DcosAccountCluster.Marshal(b, m, deterministic)
}
func (m *DcosAccountCluster) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DcosAccountCluster.Merge(m, src)
}
func (m *DcosAccountCluster) XXX_Size() int {
	return xxx_messageInfo_DcosAccountCluster.Size(m)
}
func (m *DcosAccountCluster) XXX_DiscardUnknown() {
	xxx_messageInfo_DcosAccountCluster.DiscardUnknown(m)
}

var xxx_messageInfo_DcosAccountCluster proto.InternalMessageInfo

func (m *DcosAccountCluster) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DcosAccountCluster) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *DcosAccountCluster) GetServiceKeyFile() string {
	if m != nil {
		return m.ServiceKeyFile
	}
	return ""
}

func (m *DcosAccountCluster) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

// Configuration for a DC/OS cluster.
type DcosCluster struct {
	// (Required) The name of the cluster.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Root certificate file to trust for connections to the cluster.
	CaCertFile string `protobuf:"bytes,2,opt,name=caCertFile,proto3" json:"caCertFile,omitempty"`
	// (Required) URL of the endpoint for the DC/OS cluster's admin router.
	DcosUrl string `protobuf:"bytes,3,opt,name=dcosUrl,proto3" json:"dcosUrl,omitempty"`
	// Configuration for a DC/OS load balancer.
	LoadBalancer *DcosClusterLoadBalancer `protobuf:"bytes,4,opt,name=loadBalancer,proto3" json:"loadBalancer,omitempty"`
	// If `true`, disables verification of certificates from the cluster
	// (insecure).
	InsecureSkipTlsVerify bool     `protobuf:"varint,5,opt,name=insecureSkipTlsVerify,proto3" json:"insecureSkipTlsVerify,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *DcosCluster) Reset()         { *m = DcosCluster{} }
func (m *DcosCluster) String() string { return proto.CompactTextString(m) }
func (*DcosCluster) ProtoMessage()    {}
func (*DcosCluster) Descriptor() ([]byte, []int) {
	return fileDescriptor_7539d96d61ac2f4f, []int{3}
}

func (m *DcosCluster) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DcosCluster.Unmarshal(m, b)
}
func (m *DcosCluster) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DcosCluster.Marshal(b, m, deterministic)
}
func (m *DcosCluster) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DcosCluster.Merge(m, src)
}
func (m *DcosCluster) XXX_Size() int {
	return xxx_messageInfo_DcosCluster.Size(m)
}
func (m *DcosCluster) XXX_DiscardUnknown() {
	xxx_messageInfo_DcosCluster.DiscardUnknown(m)
}

var xxx_messageInfo_DcosCluster proto.InternalMessageInfo

func (m *DcosCluster) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DcosCluster) GetCaCertFile() string {
	if m != nil {
		return m.CaCertFile
	}
	return ""
}

func (m *DcosCluster) GetDcosUrl() string {
	if m != nil {
		return m.DcosUrl
	}
	return ""
}

func (m *DcosCluster) GetLoadBalancer() *DcosClusterLoadBalancer {
	if m != nil {
		return m.LoadBalancer
	}
	return nil
}

func (m *DcosCluster) GetInsecureSkipTlsVerify() bool {
	if m != nil {
		return m.InsecureSkipTlsVerify
	}
	return false
}

// Configuration for a DC/OS load balancer.
type DcosClusterLoadBalancer struct {
	// Marathon-lb image to use when creating a load balancer with Spinnaker.
	Image string `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	// Name of the secret to use for allowing marathon-lb to authenticate with
	// the cluster. Only necessary for clusters with strict or permissive
	// security.
	ServiceAccountSecret string   `protobuf:"bytes,2,opt,name=serviceAccountSecret,proto3" json:"serviceAccountSecret,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DcosClusterLoadBalancer) Reset()         { *m = DcosClusterLoadBalancer{} }
func (m *DcosClusterLoadBalancer) String() string { return proto.CompactTextString(m) }
func (*DcosClusterLoadBalancer) ProtoMessage()    {}
func (*DcosClusterLoadBalancer) Descriptor() ([]byte, []int) {
	return fileDescriptor_7539d96d61ac2f4f, []int{4}
}

func (m *DcosClusterLoadBalancer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DcosClusterLoadBalancer.Unmarshal(m, b)
}
func (m *DcosClusterLoadBalancer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DcosClusterLoadBalancer.Marshal(b, m, deterministic)
}
func (m *DcosClusterLoadBalancer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DcosClusterLoadBalancer.Merge(m, src)
}
func (m *DcosClusterLoadBalancer) XXX_Size() int {
	return xxx_messageInfo_DcosClusterLoadBalancer.Size(m)
}
func (m *DcosClusterLoadBalancer) XXX_DiscardUnknown() {
	xxx_messageInfo_DcosClusterLoadBalancer.DiscardUnknown(m)
}

var xxx_messageInfo_DcosClusterLoadBalancer proto.InternalMessageInfo

func (m *DcosClusterLoadBalancer) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *DcosClusterLoadBalancer) GetServiceAccountSecret() string {
	if m != nil {
		return m.ServiceAccountSecret
	}
	return ""
}

// Configuration for a Docker registry associated with a `DcosAccount`.
type DcosAccountDockerRegistry struct {
	// The name of the Docker registry. Must be the name of an account
	// configured with the Docker registry provider.
	AccountName          string   `protobuf:"bytes,1,opt,name=accountName,proto3" json:"accountName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DcosAccountDockerRegistry) Reset()         { *m = DcosAccountDockerRegistry{} }
func (m *DcosAccountDockerRegistry) String() string { return proto.CompactTextString(m) }
func (*DcosAccountDockerRegistry) ProtoMessage()    {}
func (*DcosAccountDockerRegistry) Descriptor() ([]byte, []int) {
	return fileDescriptor_7539d96d61ac2f4f, []int{5}
}

func (m *DcosAccountDockerRegistry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DcosAccountDockerRegistry.Unmarshal(m, b)
}
func (m *DcosAccountDockerRegistry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DcosAccountDockerRegistry.Marshal(b, m, deterministic)
}
func (m *DcosAccountDockerRegistry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DcosAccountDockerRegistry.Merge(m, src)
}
func (m *DcosAccountDockerRegistry) XXX_Size() int {
	return xxx_messageInfo_DcosAccountDockerRegistry.Size(m)
}
func (m *DcosAccountDockerRegistry) XXX_DiscardUnknown() {
	xxx_messageInfo_DcosAccountDockerRegistry.DiscardUnknown(m)
}

var xxx_messageInfo_DcosAccountDockerRegistry proto.InternalMessageInfo

func (m *DcosAccountDockerRegistry) GetAccountName() string {
	if m != nil {
		return m.AccountName
	}
	return ""
}

func init() {
	proto.RegisterType((*DcosProvider)(nil), "proto.DcosProvider")
	proto.RegisterType((*DcosAccount)(nil), "proto.DcosAccount")
	proto.RegisterType((*DcosAccountCluster)(nil), "proto.DcosAccountCluster")
	proto.RegisterType((*DcosCluster)(nil), "proto.DcosCluster")
	proto.RegisterType((*DcosClusterLoadBalancer)(nil), "proto.DcosClusterLoadBalancer")
	proto.RegisterType((*DcosAccountDockerRegistry)(nil), "proto.DcosAccountDockerRegistry")
}

func init() { proto.RegisterFile("dcos.proto", fileDescriptor_7539d96d61ac2f4f) }

var fileDescriptor_7539d96d61ac2f4f = []byte{
	// 473 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x53, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x95, 0xf3, 0x51, 0x92, 0x71, 0x85, 0xca, 0xaa, 0x88, 0x6d, 0x0f, 0x95, 0xe5, 0x03, 0xca,
	0x29, 0x87, 0x50, 0x2e, 0x48, 0x1c, 0x68, 0x2b, 0x38, 0x50, 0x50, 0xb5, 0x05, 0xee, 0x9b, 0xf5,
	0x50, 0x56, 0xb5, 0xbd, 0x66, 0xd6, 0x0e, 0xca, 0x85, 0xdf, 0xc4, 0x99, 0xff, 0xc1, 0xff, 0x41,
	0x5e, 0xdb, 0xe9, 0x06, 0x27, 0x9c, 0xbc, 0x33, 0x6f, 0xf6, 0xcd, 0xdb, 0x79, 0x63, 0x80, 0x44,
	0x19, 0x3b, 0x2f, 0xc8, 0x94, 0x86, 0x8d, 0xdd, 0xe7, 0xf4, 0x49, 0x81, 0x94, 0x69, 0x6b, 0xb5,
	0xc9, 0x5b, 0x24, 0xfe, 0x15, 0xc0, 0xe1, 0x95, 0x32, 0xf6, 0x86, 0xcc, 0x4a, 0x27, 0x48, 0x8c,
	0xc3, 0x23, 0xcc, 0xe5, 0x32, 0xc5, 0x84, 0x07, 0x51, 0x30, 0x9b, 0x88, 0x2e, 0x64, 0x73, 0x98,
	0x48, 0xa5, 0x4c, 0x95, 0x97, 0x96, 0x0f, 0xa2, 0xe1, 0x2c, 0x5c, 0xb0, 0x86, 0x64, 0x5e, 0x13,
	0xbc, 0x69, 0x20, 0xb1, 0xa9, 0x61, 0xcf, 0xe1, 0x71, 0x41, 0x3a, 0x93, 0xb4, 0x6e, 0x31, 0x3e,
	0x8c, 0x82, 0xd9, 0x54, 0xfc, 0x93, 0xad, 0x79, 0x55, 0x5a, 0xd9, 0x12, 0xc9, 0xf2, 0x51, 0x8f,
	0xf7, 0xb2, 0x81, 0xc4, 0xa6, 0x26, 0xfe, 0x3d, 0x80, 0xd0, 0xeb, 0xc8, 0x18, 0x8c, 0x72, 0x99,
	0xa1, 0x93, 0x3b, 0x15, 0xee, 0xcc, 0x5e, 0x7a, 0x9c, 0x8d, 0xd6, 0x93, 0xbe, 0xd6, 0x1e, 0x35,
	0x8b, 0x20, 0xc4, 0x7c, 0xa5, 0xc9, 0xe4, 0x19, 0x6e, 0xf4, 0xfa, 0x29, 0x76, 0x0d, 0x47, 0x89,
	0x51, 0xf7, 0x48, 0x02, 0xef, 0xb4, 0x2d, 0x49, 0x63, 0x27, 0x3a, 0xea, 0x37, 0xb8, 0xf2, 0x2b,
	0xd7, 0xa2, 0x77, 0x93, 0x9d, 0x43, 0xe8, 0x59, 0xc2, 0xc7, 0x51, 0xe0, 0xbd, 0xfe, 0xe6, 0x01,
	0x11, 0x7e, 0x19, 0x7b, 0x05, 0x9c, 0xf0, 0x7b, 0xa5, 0x09, 0x93, 0x77, 0x64, 0xaa, 0xe2, 0x03,
	0x66, 0x4b, 0x24, 0xfb, 0x4d, 0x17, 0x96, 0x1f, 0x44, 0xc3, 0xd9, 0x54, 0xec, 0xc5, 0xe3, 0x9f,
	0xc0, 0xfa, 0x13, 0xd8, 0x39, 0xc2, 0x23, 0x18, 0x56, 0x3a, 0xe1, 0x03, 0x97, 0xaa, 0x8f, 0xb5,
	0xa1, 0x16, 0x69, 0xa5, 0x15, 0xbe, 0xc7, 0xf5, 0x5b, 0x9d, 0x62, 0x67, 0xe8, 0x76, 0x96, 0x9d,
	0xc2, 0xa4, 0x90, 0xd6, 0xfe, 0x30, 0x94, 0xf0, 0x91, 0xab, 0xd8, 0xc4, 0xf1, 0x9f, 0xa0, 0x31,
	0xef, 0x7f, 0x9d, 0xcf, 0x00, 0x94, 0xbc, 0x44, 0x2a, 0x5d, 0x8f, 0x46, 0x80, 0x97, 0xa9, 0x57,
	0xb4, 0xde, 0xed, 0xcf, 0x94, 0xb6, 0x02, 0xba, 0x90, 0x5d, 0xc0, 0x61, 0x6a, 0x64, 0x72, 0x21,
	0x53, 0x99, 0x2b, 0x24, 0xd7, 0x3d, 0x5c, 0x9c, 0xf5, 0xd7, 0xe9, 0xda, 0xab, 0x12, 0x5b, 0x77,
	0xd8, 0x39, 0x3c, 0xd5, 0xb9, 0x45, 0x55, 0x11, 0xde, 0xde, 0xeb, 0xe2, 0x53, 0x6a, 0xbf, 0x20,
	0xe9, 0xaf, 0x6b, 0xe7, 0xce, 0x44, 0xec, 0x06, 0x63, 0x05, 0xcf, 0xf6, 0xd0, 0xb3, 0x63, 0x18,
	0xeb, 0x4c, 0xde, 0x75, 0x6f, 0x6c, 0x02, 0xb6, 0x80, 0xe3, 0x76, 0x6c, 0xad, 0x17, 0xb7, 0xa8,
	0x08, 0xcb, 0xf6, 0xb9, 0x3b, 0xb1, 0xf8, 0x35, 0x9c, 0xec, 0xdd, 0xae, 0x7a, 0x77, 0xdb, 0x5f,
	0xef, 0xe3, 0xc3, 0x40, 0xfd, 0xd4, 0xf2, 0xc0, 0x8d, 0xe1, 0xc5, 0xdf, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x8d, 0x29, 0x32, 0xd6, 0x1a, 0x04, 0x00, 0x00,
}
