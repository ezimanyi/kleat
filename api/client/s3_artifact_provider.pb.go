// Code generated by protoc-gen-go. DO NOT EDIT.
// source: s3_artifact_provider.proto

package client

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Configuration for the S3 artifact provider.
type S3ArtifactProvider struct {
	// Whether the S3 artifact provider is enabled.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// The list of configured S3 artifact accounts.
	Accounts             []*S3ArtifactAccount `protobuf:"bytes,2,rep,name=accounts,proto3" json:"accounts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *S3ArtifactProvider) Reset()         { *m = S3ArtifactProvider{} }
func (m *S3ArtifactProvider) String() string { return proto.CompactTextString(m) }
func (*S3ArtifactProvider) ProtoMessage()    {}
func (*S3ArtifactProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d1b7390c451dbc2, []int{0}
}

func (m *S3ArtifactProvider) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_S3ArtifactProvider.Unmarshal(m, b)
}
func (m *S3ArtifactProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_S3ArtifactProvider.Marshal(b, m, deterministic)
}
func (m *S3ArtifactProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S3ArtifactProvider.Merge(m, src)
}
func (m *S3ArtifactProvider) XXX_Size() int {
	return xxx_messageInfo_S3ArtifactProvider.Size(m)
}
func (m *S3ArtifactProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_S3ArtifactProvider.DiscardUnknown(m)
}

var xxx_messageInfo_S3ArtifactProvider proto.InternalMessageInfo

func (m *S3ArtifactProvider) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *S3ArtifactProvider) GetAccounts() []*S3ArtifactAccount {
	if m != nil {
		return m.Accounts
	}
	return nil
}

// Configuration for an S3 artifact account.
type S3ArtifactAccount struct {
	// The name of the account.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The S3 API endpoint. Only required when using an S3 clone such as Minio.
	ApiEndpoint string `protobuf:"bytes,2,opt,name=apiEndpoint,proto3" json:"apiEndpoint,omitempty"`
	// The S3 API region. Only required when using an S3 clone such as Minio.
	ApiRegion string `protobuf:"bytes,3,opt,name=apiRegion,proto3" json:"apiRegion,omitempty"`
	// The AWS Access Key ID. If not provided, Spinnaker will try to find AWS
	// credentials as described at
	// http://docs.aws.amazon.com/sdk-for-java/v1/developer-guide/credentials.html#credentials-default.
	AwsAccessKeyId string `protobuf:"bytes,4,opt,name=awsAccessKeyId,proto3" json:"awsAccessKeyId,omitempty"`
	// The AWS Secret Key.
	AwsSecretAccessKey string `protobuf:"bytes,5,opt,name=awsSecretAccessKey,proto3" json:"awsSecretAccessKey,omitempty"`
	// The S3 region.
	Region               string   `protobuf:"bytes,6,opt,name=region,proto3" json:"region,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S3ArtifactAccount) Reset()         { *m = S3ArtifactAccount{} }
func (m *S3ArtifactAccount) String() string { return proto.CompactTextString(m) }
func (*S3ArtifactAccount) ProtoMessage()    {}
func (*S3ArtifactAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d1b7390c451dbc2, []int{1}
}

func (m *S3ArtifactAccount) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_S3ArtifactAccount.Unmarshal(m, b)
}
func (m *S3ArtifactAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_S3ArtifactAccount.Marshal(b, m, deterministic)
}
func (m *S3ArtifactAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S3ArtifactAccount.Merge(m, src)
}
func (m *S3ArtifactAccount) XXX_Size() int {
	return xxx_messageInfo_S3ArtifactAccount.Size(m)
}
func (m *S3ArtifactAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_S3ArtifactAccount.DiscardUnknown(m)
}

var xxx_messageInfo_S3ArtifactAccount proto.InternalMessageInfo

func (m *S3ArtifactAccount) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *S3ArtifactAccount) GetApiEndpoint() string {
	if m != nil {
		return m.ApiEndpoint
	}
	return ""
}

func (m *S3ArtifactAccount) GetApiRegion() string {
	if m != nil {
		return m.ApiRegion
	}
	return ""
}

func (m *S3ArtifactAccount) GetAwsAccessKeyId() string {
	if m != nil {
		return m.AwsAccessKeyId
	}
	return ""
}

func (m *S3ArtifactAccount) GetAwsSecretAccessKey() string {
	if m != nil {
		return m.AwsSecretAccessKey
	}
	return ""
}

func (m *S3ArtifactAccount) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func init() {
	proto.RegisterType((*S3ArtifactProvider)(nil), "proto.S3ArtifactProvider")
	proto.RegisterType((*S3ArtifactAccount)(nil), "proto.S3ArtifactAccount")
}

func init() { proto.RegisterFile("s3_artifact_provider.proto", fileDescriptor_2d1b7390c451dbc2) }

var fileDescriptor_2d1b7390c451dbc2 = []byte{
	// 267 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xcf, 0x4a, 0x03, 0x31,
	0x10, 0xc6, 0xe9, 0x5f, 0xdb, 0x29, 0x08, 0xce, 0x41, 0x82, 0x78, 0x58, 0x0a, 0x6a, 0x4f, 0xbb,
	0xe0, 0xfa, 0x02, 0x2b, 0x78, 0x10, 0x2f, 0xb2, 0xbd, 0x79, 0x29, 0xb3, 0xd9, 0xb1, 0x86, 0x6e,
	0x93, 0x90, 0xa4, 0x16, 0x9f, 0xd4, 0xd7, 0x11, 0xb2, 0x6b, 0x2b, 0xea, 0x29, 0x99, 0xef, 0xf7,
	0x63, 0x3e, 0x18, 0xb8, 0xf0, 0xf9, 0x8a, 0x5c, 0x50, 0xaf, 0x24, 0xc3, 0xca, 0x3a, 0xf3, 0xae,
	0x6a, 0x76, 0xa9, 0x75, 0x26, 0x18, 0x1c, 0xc5, 0x67, 0x5e, 0x03, 0x2e, 0xf3, 0xa2, 0x73, 0x9e,
	0x3b, 0x05, 0x05, 0x9c, 0xb0, 0xa6, 0xaa, 0xe1, 0x5a, 0xf4, 0x92, 0xde, 0x62, 0x52, 0x7e, 0x8f,
	0x78, 0x07, 0x13, 0x92, 0xd2, 0xec, 0x74, 0xf0, 0xa2, 0x9f, 0x0c, 0x16, 0xb3, 0x5b, 0xd1, 0x2e,
	0x4c, 0x8f, 0x6b, 0x8a, 0x56, 0x28, 0x0f, 0xe6, 0xfc, 0xb3, 0x07, 0x67, 0x7f, 0x38, 0x22, 0x0c,
	0x35, 0x6d, 0x39, 0x56, 0x4c, 0xcb, 0xf8, 0xc7, 0x04, 0x66, 0x64, 0xd5, 0x83, 0xae, 0xad, 0x51,
	0x3a, 0x88, 0x7e, 0x44, 0x3f, 0x23, 0xbc, 0x84, 0x29, 0x59, 0x55, 0xf2, 0x5a, 0x19, 0x2d, 0x06,
	0x91, 0x1f, 0x03, 0xbc, 0x86, 0x53, 0xda, 0xfb, 0x42, 0x4a, 0xf6, 0xfe, 0x89, 0x3f, 0x1e, 0x6b,
	0x31, 0x8c, 0xca, 0xaf, 0x14, 0x53, 0x40, 0xda, 0xfb, 0x25, 0x4b, 0xc7, 0xe1, 0x90, 0x8b, 0x51,
	0x74, 0xff, 0x21, 0x78, 0x0e, 0x63, 0xd7, 0x56, 0x8e, 0xa3, 0xd3, 0x4d, 0xf7, 0x37, 0x2f, 0x57,
	0x6b, 0x15, 0xde, 0x76, 0x55, 0x2a, 0xcd, 0x36, 0xf3, 0x56, 0x69, 0x4d, 0x1b, 0x76, 0xd9, 0xa6,
	0x61, 0x0a, 0x19, 0x59, 0x95, 0xc9, 0x46, 0xb1, 0x0e, 0xd5, 0x38, 0x5e, 0x29, 0xff, 0x0a, 0x00,
	0x00, 0xff, 0xff, 0x4c, 0x63, 0x6b, 0xe3, 0x94, 0x01, 0x00, 0x00,
}
