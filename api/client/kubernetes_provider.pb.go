// Code generated by protoc-gen-go. DO NOT EDIT.
// source: kubernetes_provider.proto

package client

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Configuration for the Kubernetes provider.
type KubernetesProvider struct {
	// Whether the provider is enabled.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// The list of configured accounts.
	Accounts []*KubernetesAccount `protobuf:"bytes,2,rep,name=accounts,proto3" json:"accounts,omitempty"`
	// The name of the primary account.
	PrimaryAccount       string   `protobuf:"bytes,3,opt,name=primaryAccount,proto3" json:"primaryAccount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KubernetesProvider) Reset()         { *m = KubernetesProvider{} }
func (m *KubernetesProvider) String() string { return proto.CompactTextString(m) }
func (*KubernetesProvider) ProtoMessage()    {}
func (*KubernetesProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_7029221de7665de1, []int{0}
}

func (m *KubernetesProvider) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KubernetesProvider.Unmarshal(m, b)
}
func (m *KubernetesProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KubernetesProvider.Marshal(b, m, deterministic)
}
func (m *KubernetesProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KubernetesProvider.Merge(m, src)
}
func (m *KubernetesProvider) XXX_Size() int {
	return xxx_messageInfo_KubernetesProvider.Size(m)
}
func (m *KubernetesProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_KubernetesProvider.DiscardUnknown(m)
}

var xxx_messageInfo_KubernetesProvider proto.InternalMessageInfo

func (m *KubernetesProvider) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *KubernetesProvider) GetAccounts() []*KubernetesAccount {
	if m != nil {
		return m.Accounts
	}
	return nil
}

func (m *KubernetesProvider) GetPrimaryAccount() string {
	if m != nil {
		return m.PrimaryAccount
	}
	return ""
}

// Configuration for a Spinnaker Kubernetes account. An account maps to a
// credential that can authenticate against your Kubernetes cluster.
type KubernetesAccount struct {
	// The name of the account.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Some providers support multiple versions/release tracks.
	// This allows you to pick the version of the provider (not the
	// resources it manages) to run within Spinnaker.
	ProviderVersion string `protobuf:"bytes,2,opt,name=providerVersion,proto3" json:"providerVersion,omitempty"`
	// A list of resource kinds this Spinnaker account can deploy and
	// will cache. When no kinds are configured, this defaults to all kinds
	// described here:
	// https://spinnaker.io/reference/providers/kubernetes-v2/.
	// This can only be set when omitKinds is empty or not set.
	Kinds []string `protobuf:"bytes,3,rep,name=kinds,proto3" json:"kinds,omitempty"`
	// A list of resource kinds this Spinnaker account cannot deploy to or
	// cache. This can only be set when kinds is empty or not set.
	OmitKinds []string `protobuf:"bytes,4,rep,name=omitKinds,proto3" json:"omitKinds,omitempty"`
	// The kubernetes context to be managed by Spinnaker. See
	// http://kubernetes.io/docs/user-guide/kubeconfig-file/#context for
	// more information. When no context is configured for an account the
	// `current-context` in your kubeconfig is assumed.
	Context string `protobuf:"bytes,5,opt,name=context,proto3" json:"context,omitempty"`
	// Number of caching agents for this kubernetes account.
	// Each agent handles a subset of the namespaces available to this account.
	// By default, only 1 agent caches all kinds for all namespaces in the
	// account.
	CacheThreads int32 `protobuf:"varint,6,opt,name=cacheThreads,proto3" json:"cacheThreads,omitempty"`
	// A list of namespaces this Spinnaker account can deploy to and will
	// cache. When no namespaces are configured, this defaults to all
	// namespaces.
	Namespaces []string `protobuf:"bytes,7,rep,name=namespaces,proto3" json:"namespaces,omitempty"`
	// A list of namespaces this Spinnaker account cannot deploy to or
	// cache. This can only be set when namespaces is empty or not set.
	OmitNamespaces []string `protobuf:"bytes,8,rep,name=omitNamespaces,proto3" json:"omitNamespaces,omitempty"`
	// The list of custom resources Clouddriver will manage and make
	// available for use in Patch and Delete (Manifest) stages.
	CustomResources []*KubernetesCustomResource `protobuf:"bytes,9,rep,name=customResources,proto3" json:"customResources,omitempty"`
	// The list of kind-specific caching policies.
	CachingPolicies []*KubernetesCachingPolicy `protobuf:"bytes,10,rep,name=cachingPolicies,proto3" json:"cachingPolicies,omitempty"`
	// The list of the Spinnaker docker registry account names this
	// Spinnaker account can use as image sources. These docker registry
	// accounts must be registered in your halconfig before you can add them
	// here.
	DockerRegistries []*KubernetesAccountDockerRegistry `protobuf:"bytes,11,rep,name=dockerRegistries,proto3" json:"dockerRegistries,omitempty"`
	// The list of OAuth scopes used by kubectl to fetch an OAuth token.
	OAuthScopes []string `protobuf:"bytes,12,rep,name=oAuthScopes,proto3" json:"oAuthScopes,omitempty"`
	// The path to your kubeconfig file. By default, it will be under the
	// Spinnaker user's home directory in the typical .kube/config location.
	// todo: document new var/secrets convention.
	KubeconfigFile string `protobuf:"bytes,13,opt,name=kubeconfigFile,proto3" json:"kubeconfigFile,omitempty"`
	// Fiat permissions configuration.
	Permissions *Permissions `protobuf:"bytes,14,opt,name=permissions,proto3" json:"permissions,omitempty"`
	// (Deprecated): List of required Fiat permission groups. Configure
	// `permissions` instead.
	RequiredGroupMemberships []string `protobuf:"bytes,15,rep,name=requiredGroupMemberships,proto3" json:"requiredGroupMemberships,omitempty"`
	XXX_NoUnkeyedLiteral     struct{} `json:"-"`
	XXX_unrecognized         []byte   `json:"-"`
	XXX_sizecache            int32    `json:"-"`
}

func (m *KubernetesAccount) Reset()         { *m = KubernetesAccount{} }
func (m *KubernetesAccount) String() string { return proto.CompactTextString(m) }
func (*KubernetesAccount) ProtoMessage()    {}
func (*KubernetesAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_7029221de7665de1, []int{1}
}

func (m *KubernetesAccount) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KubernetesAccount.Unmarshal(m, b)
}
func (m *KubernetesAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KubernetesAccount.Marshal(b, m, deterministic)
}
func (m *KubernetesAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KubernetesAccount.Merge(m, src)
}
func (m *KubernetesAccount) XXX_Size() int {
	return xxx_messageInfo_KubernetesAccount.Size(m)
}
func (m *KubernetesAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_KubernetesAccount.DiscardUnknown(m)
}

var xxx_messageInfo_KubernetesAccount proto.InternalMessageInfo

func (m *KubernetesAccount) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *KubernetesAccount) GetProviderVersion() string {
	if m != nil {
		return m.ProviderVersion
	}
	return ""
}

func (m *KubernetesAccount) GetKinds() []string {
	if m != nil {
		return m.Kinds
	}
	return nil
}

func (m *KubernetesAccount) GetOmitKinds() []string {
	if m != nil {
		return m.OmitKinds
	}
	return nil
}

func (m *KubernetesAccount) GetContext() string {
	if m != nil {
		return m.Context
	}
	return ""
}

func (m *KubernetesAccount) GetCacheThreads() int32 {
	if m != nil {
		return m.CacheThreads
	}
	return 0
}

func (m *KubernetesAccount) GetNamespaces() []string {
	if m != nil {
		return m.Namespaces
	}
	return nil
}

func (m *KubernetesAccount) GetOmitNamespaces() []string {
	if m != nil {
		return m.OmitNamespaces
	}
	return nil
}

func (m *KubernetesAccount) GetCustomResources() []*KubernetesCustomResource {
	if m != nil {
		return m.CustomResources
	}
	return nil
}

func (m *KubernetesAccount) GetCachingPolicies() []*KubernetesCachingPolicy {
	if m != nil {
		return m.CachingPolicies
	}
	return nil
}

func (m *KubernetesAccount) GetDockerRegistries() []*KubernetesAccountDockerRegistry {
	if m != nil {
		return m.DockerRegistries
	}
	return nil
}

func (m *KubernetesAccount) GetOAuthScopes() []string {
	if m != nil {
		return m.OAuthScopes
	}
	return nil
}

func (m *KubernetesAccount) GetKubeconfigFile() string {
	if m != nil {
		return m.KubeconfigFile
	}
	return ""
}

func (m *KubernetesAccount) GetPermissions() *Permissions {
	if m != nil {
		return m.Permissions
	}
	return nil
}

func (m *KubernetesAccount) GetRequiredGroupMemberships() []string {
	if m != nil {
		return m.RequiredGroupMemberships
	}
	return nil
}

// Configuration for a CRD to be managed by Spinnaker. If Spinnaker does not
// have permission to list CRDs but you need Spinnaker to manage CRDs, you
// need to explicitly register each CRD.
type KubernetesCustomResource struct {
	// The Kubernetes kind of the custom resource.
	KubernetesKind string `protobuf:"bytes,1,opt,name=kubernetesKind,proto3" json:"kubernetesKind,omitempty"`
	// The Spinnaker kind to which you would like the custom resource to
	// map.
	SpinnakerKind string `protobuf:"bytes,2,opt,name=spinnakerKind,proto3" json:"spinnakerKind,omitempty"`
	// An integer representing the deployment priority of this resource.
	// Resources with lower values are deployed before resources with higher
	// values.
	DeployPriority string `protobuf:"bytes,3,opt,name=deployPriority,proto3" json:"deployPriority,omitempty"`
	// Whether Spinnaker should manage versioning this resource.
	Versioned bool `protobuf:"varint,4,opt,name=versioned,proto3" json:"versioned,omitempty"`
	// Whether the resource is namespaced.
	Namespaced           bool     `protobuf:"varint,5,opt,name=namespaced,proto3" json:"namespaced,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KubernetesCustomResource) Reset()         { *m = KubernetesCustomResource{} }
func (m *KubernetesCustomResource) String() string { return proto.CompactTextString(m) }
func (*KubernetesCustomResource) ProtoMessage()    {}
func (*KubernetesCustomResource) Descriptor() ([]byte, []int) {
	return fileDescriptor_7029221de7665de1, []int{2}
}

func (m *KubernetesCustomResource) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KubernetesCustomResource.Unmarshal(m, b)
}
func (m *KubernetesCustomResource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KubernetesCustomResource.Marshal(b, m, deterministic)
}
func (m *KubernetesCustomResource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KubernetesCustomResource.Merge(m, src)
}
func (m *KubernetesCustomResource) XXX_Size() int {
	return xxx_messageInfo_KubernetesCustomResource.Size(m)
}
func (m *KubernetesCustomResource) XXX_DiscardUnknown() {
	xxx_messageInfo_KubernetesCustomResource.DiscardUnknown(m)
}

var xxx_messageInfo_KubernetesCustomResource proto.InternalMessageInfo

func (m *KubernetesCustomResource) GetKubernetesKind() string {
	if m != nil {
		return m.KubernetesKind
	}
	return ""
}

func (m *KubernetesCustomResource) GetSpinnakerKind() string {
	if m != nil {
		return m.SpinnakerKind
	}
	return ""
}

func (m *KubernetesCustomResource) GetDeployPriority() string {
	if m != nil {
		return m.DeployPriority
	}
	return ""
}

func (m *KubernetesCustomResource) GetVersioned() bool {
	if m != nil {
		return m.Versioned
	}
	return false
}

func (m *KubernetesCustomResource) GetNamespaced() bool {
	if m != nil {
		return m.Namespaced
	}
	return false
}

// Configuration for a kind-specific caching policy.
type KubernetesCachingPolicy struct {
	// The Kubernetes kind to which the policy applies.
	KubernetesKind string `protobuf:"bytes,1,opt,name=kubernetesKind,proto3" json:"kubernetesKind,omitempty"`
	// The maximum number of resources an agent will cache of the specified
	// Kubernetes kind.
	MaxEntriesPerAgent   int32    `protobuf:"varint,2,opt,name=maxEntriesPerAgent,proto3" json:"maxEntriesPerAgent,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KubernetesCachingPolicy) Reset()         { *m = KubernetesCachingPolicy{} }
func (m *KubernetesCachingPolicy) String() string { return proto.CompactTextString(m) }
func (*KubernetesCachingPolicy) ProtoMessage()    {}
func (*KubernetesCachingPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_7029221de7665de1, []int{3}
}

func (m *KubernetesCachingPolicy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KubernetesCachingPolicy.Unmarshal(m, b)
}
func (m *KubernetesCachingPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KubernetesCachingPolicy.Marshal(b, m, deterministic)
}
func (m *KubernetesCachingPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KubernetesCachingPolicy.Merge(m, src)
}
func (m *KubernetesCachingPolicy) XXX_Size() int {
	return xxx_messageInfo_KubernetesCachingPolicy.Size(m)
}
func (m *KubernetesCachingPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_KubernetesCachingPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_KubernetesCachingPolicy proto.InternalMessageInfo

func (m *KubernetesCachingPolicy) GetKubernetesKind() string {
	if m != nil {
		return m.KubernetesKind
	}
	return ""
}

func (m *KubernetesCachingPolicy) GetMaxEntriesPerAgent() int32 {
	if m != nil {
		return m.MaxEntriesPerAgent
	}
	return 0
}

// Configuration for a Docker registry.
type KubernetesAccountDockerRegistry struct {
	// The configured name of the Docker registry.
	AccountName string `protobuf:"bytes,1,opt,name=accountName,proto3" json:"accountName,omitempty"`
	// The list of Docker registry namespaces usable as image sources.
	Namespaces           []string `protobuf:"bytes,2,rep,name=namespaces,proto3" json:"namespaces,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KubernetesAccountDockerRegistry) Reset()         { *m = KubernetesAccountDockerRegistry{} }
func (m *KubernetesAccountDockerRegistry) String() string { return proto.CompactTextString(m) }
func (*KubernetesAccountDockerRegistry) ProtoMessage()    {}
func (*KubernetesAccountDockerRegistry) Descriptor() ([]byte, []int) {
	return fileDescriptor_7029221de7665de1, []int{4}
}

func (m *KubernetesAccountDockerRegistry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KubernetesAccountDockerRegistry.Unmarshal(m, b)
}
func (m *KubernetesAccountDockerRegistry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KubernetesAccountDockerRegistry.Marshal(b, m, deterministic)
}
func (m *KubernetesAccountDockerRegistry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KubernetesAccountDockerRegistry.Merge(m, src)
}
func (m *KubernetesAccountDockerRegistry) XXX_Size() int {
	return xxx_messageInfo_KubernetesAccountDockerRegistry.Size(m)
}
func (m *KubernetesAccountDockerRegistry) XXX_DiscardUnknown() {
	xxx_messageInfo_KubernetesAccountDockerRegistry.DiscardUnknown(m)
}

var xxx_messageInfo_KubernetesAccountDockerRegistry proto.InternalMessageInfo

func (m *KubernetesAccountDockerRegistry) GetAccountName() string {
	if m != nil {
		return m.AccountName
	}
	return ""
}

func (m *KubernetesAccountDockerRegistry) GetNamespaces() []string {
	if m != nil {
		return m.Namespaces
	}
	return nil
}

func init() {
	proto.RegisterType((*KubernetesProvider)(nil), "proto.KubernetesProvider")
	proto.RegisterType((*KubernetesAccount)(nil), "proto.KubernetesAccount")
	proto.RegisterType((*KubernetesCustomResource)(nil), "proto.KubernetesCustomResource")
	proto.RegisterType((*KubernetesCachingPolicy)(nil), "proto.KubernetesCachingPolicy")
	proto.RegisterType((*KubernetesAccountDockerRegistry)(nil), "proto.KubernetesAccountDockerRegistry")
}

func init() { proto.RegisterFile("kubernetes_provider.proto", fileDescriptor_7029221de7665de1) }

var fileDescriptor_7029221de7665de1 = []byte{
	// 601 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xcd, 0x6e, 0x13, 0x3d,
	0x14, 0xd5, 0x34, 0x4d, 0x9b, 0xdc, 0xb4, 0xcd, 0x57, 0xeb, 0x93, 0x30, 0x08, 0xb5, 0xa3, 0x08,
	0xca, 0xac, 0x12, 0xa9, 0x74, 0xc5, 0xae, 0xfc, 0xa3, 0x8a, 0x2a, 0x32, 0x88, 0x05, 0x1b, 0x34,
	0xf1, 0x5c, 0x12, 0x2b, 0x19, 0x7b, 0x6a, 0x7b, 0xaa, 0xe6, 0x1d, 0x78, 0x18, 0x9e, 0x84, 0x67,
	0x42, 0xf6, 0x24, 0x9d, 0x9f, 0x10, 0xc1, 0x2a, 0xf1, 0x39, 0xe7, 0x9e, 0xb9, 0xf7, 0xce, 0xf1,
	0xc0, 0xc3, 0x79, 0x3e, 0x41, 0x2d, 0xd1, 0xa2, 0xf9, 0x96, 0x69, 0x75, 0x2b, 0x12, 0xd4, 0xc3,
	0x4c, 0x2b, 0xab, 0x48, 0xdb, 0xff, 0x3c, 0x3a, 0xce, 0x50, 0xa7, 0xc2, 0x18, 0xa1, 0xa4, 0x29,
	0x98, 0xc1, 0x8f, 0x00, 0xc8, 0xd5, 0x7d, 0xdd, 0x78, 0x55, 0x46, 0x28, 0xec, 0xa3, 0x8c, 0x27,
	0x0b, 0x4c, 0x68, 0x10, 0x06, 0x51, 0x87, 0xad, 0x8f, 0xe4, 0x02, 0x3a, 0x31, 0xe7, 0x2a, 0x97,
	0xd6, 0xd0, 0x9d, 0xb0, 0x15, 0xf5, 0xce, 0x69, 0x61, 0x35, 0x2c, 0x6d, 0x2e, 0x0b, 0x01, 0xbb,
	0x57, 0x92, 0x33, 0x38, 0xca, 0xb4, 0x48, 0x63, 0xbd, 0x5c, 0x71, 0xb4, 0x15, 0x06, 0x51, 0x97,
	0x35, 0xd0, 0xc1, 0xcf, 0x36, 0x1c, 0x6f, 0xf8, 0x10, 0x02, 0xbb, 0x32, 0x4e, 0xd1, 0xb7, 0xd2,
	0x65, 0xfe, 0x3f, 0x89, 0xa0, 0xbf, 0x1e, 0xf2, 0x0b, 0x6a, 0x37, 0x12, 0xdd, 0xf1, 0x74, 0x13,
	0x26, 0xff, 0x43, 0x7b, 0x2e, 0x64, 0x62, 0x68, 0x2b, 0x6c, 0x45, 0x5d, 0x56, 0x1c, 0xc8, 0x63,
	0xe8, 0xaa, 0x54, 0xd8, 0x2b, 0xcf, 0xec, 0x7a, 0xa6, 0x04, 0xdc, 0xfc, 0x5c, 0x49, 0x8b, 0x77,
	0x96, 0xb6, 0xbd, 0xeb, 0xfa, 0x48, 0x06, 0x70, 0xc0, 0x63, 0x3e, 0xc3, 0xcf, 0x33, 0x8d, 0x71,
	0x62, 0xe8, 0x5e, 0x18, 0x44, 0x6d, 0x56, 0xc3, 0xc8, 0x09, 0x80, 0xeb, 0xd1, 0x64, 0x31, 0x47,
	0x43, 0xf7, 0xbd, 0x79, 0x05, 0x71, 0xdb, 0x70, 0x8f, 0xba, 0x2e, 0x35, 0x1d, 0xaf, 0x69, 0xa0,
	0xe4, 0x03, 0xf4, 0x79, 0x6e, 0xac, 0x4a, 0x19, 0x1a, 0x95, 0x6b, 0x27, 0xec, 0xfa, 0x95, 0x9f,
	0x6e, 0xac, 0xfc, 0x55, 0x4d, 0xc7, 0x9a, 0x75, 0xe4, 0x3d, 0xf4, 0x5d, 0x8b, 0x42, 0x4e, 0xc7,
	0x6a, 0x21, 0xb8, 0x40, 0x43, 0xc1, 0x5b, 0x9d, 0x6c, 0x5a, 0x55, 0x74, 0x4b, 0xd6, 0x2c, 0x23,
	0x0c, 0xfe, 0x4b, 0x14, 0x9f, 0xa3, 0x66, 0x38, 0x15, 0xc6, 0x6a, 0x67, 0xd5, 0xf3, 0x56, 0x67,
	0xdb, 0x82, 0xf0, 0xba, 0xaa, 0x5f, 0xb2, 0x8d, 0x7a, 0x12, 0x42, 0x4f, 0x5d, 0xe6, 0x76, 0xf6,
	0x89, 0xab, 0x0c, 0x0d, 0x3d, 0xf0, 0xdb, 0xa8, 0x42, 0x6e, 0x65, 0x2e, 0xde, 0x5c, 0xc9, 0xef,
	0x62, 0xfa, 0x56, 0x2c, 0x90, 0x1e, 0x16, 0x01, 0xaa, 0xa3, 0xe4, 0x02, 0x7a, 0x95, 0x90, 0xd3,
	0xa3, 0x30, 0x88, 0x7a, 0xe7, 0x64, 0xd5, 0xd8, 0xb8, 0x64, 0x58, 0x55, 0x46, 0x5e, 0x00, 0xd5,
	0x78, 0x93, 0x0b, 0x8d, 0xc9, 0x3b, 0xad, 0xf2, 0xec, 0x23, 0xa6, 0x13, 0xd4, 0x66, 0x26, 0x32,
	0x43, 0xfb, 0xbe, 0x99, 0xad, 0xfc, 0xe0, 0x57, 0x00, 0x74, 0xdb, 0x7b, 0x58, 0xb7, 0x5d, 0x70,
	0x2e, 0x5a, 0xab, 0x0c, 0x37, 0x50, 0xf2, 0x04, 0x0e, 0x4d, 0x26, 0xa4, 0x8c, 0xe7, 0xa8, 0xbd,
	0xac, 0xc8, 0x72, 0x1d, 0x74, 0x6e, 0x09, 0x66, 0x0b, 0xb5, 0x1c, 0x6b, 0xa1, 0xb4, 0xb0, 0xcb,
	0xf5, 0x2d, 0xaa, 0xa3, 0x2e, 0xdb, 0xb7, 0x45, 0xf8, 0x31, 0xa1, 0xbb, 0xfe, 0xfe, 0x96, 0x40,
	0x2d, 0x9d, 0x89, 0x8f, 0x77, 0xa7, 0x92, 0xce, 0x64, 0x70, 0x03, 0x0f, 0xb6, 0x84, 0xe1, 0x9f,
	0xc7, 0x19, 0x02, 0x49, 0xe3, 0xbb, 0x37, 0xd2, 0xbf, 0xdd, 0x31, 0xea, 0xcb, 0x29, 0x4a, 0xeb,
	0x67, 0x6a, 0xb3, 0x3f, 0x30, 0x03, 0x0e, 0xa7, 0x7f, 0x09, 0x8d, 0x8b, 0xc8, 0xea, 0x6b, 0x72,
	0x5d, 0x7e, 0x0a, 0xaa, 0x50, 0xe3, 0xd6, 0xed, 0x34, 0x6f, 0xdd, 0xcb, 0x67, 0x5f, 0x9f, 0x4e,
	0x85, 0x9d, 0xe5, 0x93, 0x21, 0x57, 0xe9, 0xe8, 0x7e, 0xb3, 0xa3, 0xf9, 0x02, 0x63, 0x3b, 0x8a,
	0x33, 0x31, 0xe2, 0x0b, 0x81, 0xd2, 0x4e, 0xf6, 0x7c, 0x5a, 0x9e, 0xff, 0x0e, 0x00, 0x00, 0xff,
	0xff, 0x04, 0xd3, 0x78, 0x3d, 0x51, 0x05, 0x00, 0x00,
}
