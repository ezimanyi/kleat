// Code generated by protoc-gen-go. DO NOT EDIT.
// source: persistent_storage.proto

package client

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GCS struct {
	// A path to a JSON service account with permission to read and write to the bucket to be used as a backing store.
	JsonPath string `protobuf:"bytes,1,opt,name=jsonPath,proto3" json:"jsonPath,omitempty"`
	// The Google Cloud Platform project you are using to host the GCS bucket as a backing store.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// The name of a storage bucket that your specified account has access to. If not specified, a
	// random name will be chosen. If you specify a globally unique bucket name that does not exist
	// yet, Halyard will create that bucket for you.
	Bucket string `protobuf:"bytes,3,opt,name=bucket,proto3" json:"bucket,omitempty"`
	// The root folder in the chosen bucket to place all of Spinnaker's persistent data in.
	RootFolder string `protobuf:"bytes,4,opt,name=rootFolder,proto3" json:"rootFolder,omitempty"`
	// This is only required if the bucket you specify does not exist yet.
	BucketLocation       string   `protobuf:"bytes,5,opt,name=bucketLocation,proto3" json:"bucketLocation,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GCS) Reset()         { *m = GCS{} }
func (m *GCS) String() string { return proto.CompactTextString(m) }
func (*GCS) ProtoMessage()    {}
func (*GCS) Descriptor() ([]byte, []int) {
	return fileDescriptor_ede3f68be6f140c2, []int{0}
}

func (m *GCS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GCS.Unmarshal(m, b)
}
func (m *GCS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GCS.Marshal(b, m, deterministic)
}
func (m *GCS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GCS.Merge(m, src)
}
func (m *GCS) XXX_Size() int {
	return xxx_messageInfo_GCS.Size(m)
}
func (m *GCS) XXX_DiscardUnknown() {
	xxx_messageInfo_GCS.DiscardUnknown(m)
}

var xxx_messageInfo_GCS proto.InternalMessageInfo

func (m *GCS) GetJsonPath() string {
	if m != nil {
		return m.JsonPath
	}
	return ""
}

func (m *GCS) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *GCS) GetBucket() string {
	if m != nil {
		return m.Bucket
	}
	return ""
}

func (m *GCS) GetRootFolder() string {
	if m != nil {
		return m.RootFolder
	}
	return ""
}

func (m *GCS) GetBucketLocation() string {
	if m != nil {
		return m.BucketLocation
	}
	return ""
}

func init() {
	proto.RegisterType((*GCS)(nil), "proto.GCS")
}

func init() { proto.RegisterFile("persistent_storage.proto", fileDescriptor_ede3f68be6f140c2) }

var fileDescriptor_ede3f68be6f140c2 = []byte{
	// 200 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x8f, 0xbf, 0x6a, 0xc3, 0x30,
	0x10, 0x87, 0x71, 0x5d, 0xbb, 0xed, 0x0d, 0x1d, 0x34, 0x14, 0xd1, 0xa1, 0x94, 0x42, 0xff, 0x4c,
	0xd6, 0xd0, 0x37, 0x48, 0x20, 0x59, 0x32, 0x84, 0x64, 0xcb, 0x12, 0x64, 0xe5, 0xb0, 0x65, 0x3b,
	0x3a, 0x21, 0x9d, 0x9f, 0x26, 0x2f, 0x1b, 0x50, 0xfe, 0x10, 0x32, 0x1d, 0xdf, 0xef, 0xfb, 0x96,
	0x03, 0xe9, 0x31, 0x44, 0x1b, 0x19, 0x1d, 0x6f, 0x23, 0x53, 0xd0, 0x0d, 0x56, 0x3e, 0x10, 0x93,
	0x28, 0xd2, 0xf9, 0x3a, 0x64, 0x90, 0xcf, 0xa7, 0x6b, 0xf1, 0x0e, 0xcf, 0x5d, 0x24, 0xb7, 0xd4,
	0xdc, 0xca, 0xec, 0x33, 0xfb, 0x7b, 0x59, 0x5d, 0x59, 0x48, 0x78, 0xf2, 0x81, 0x3a, 0x34, 0x2c,
	0x1f, 0x92, 0xba, 0xa0, 0x78, 0x83, 0xb2, 0x1e, 0x4d, 0x8f, 0x2c, 0xf3, 0x24, 0xce, 0x24, 0x3e,
	0x00, 0x02, 0x11, 0xcf, 0x68, 0xd8, 0x61, 0x90, 0x8f, 0xc9, 0xdd, 0x2c, 0xe2, 0x07, 0x5e, 0x4f,
	0xe5, 0x82, 0x8c, 0x66, 0x4b, 0x4e, 0x16, 0xa9, 0xb9, 0x5b, 0x27, 0xbf, 0x9b, 0xef, 0xc6, 0x72,
	0x3b, 0xd6, 0x95, 0xa1, 0xbd, 0x8a, 0xde, 0x3a, 0xa7, 0x7b, 0x0c, 0xaa, 0x1f, 0x50, 0xb3, 0xd2,
	0xde, 0x2a, 0x33, 0x58, 0x74, 0x5c, 0x97, 0xe9, 0x9b, 0xff, 0x63, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x3b, 0xf2, 0x92, 0xd2, 0xf0, 0x00, 0x00, 0x00,
}
