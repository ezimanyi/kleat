// Code generated by protoc-gen-go. DO NOT EDIT.
// source: oracle_artifact_provider.proto

package client

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Configuration for the Oracle artifact provider.
type OracleArtifactProvider struct {
	// Whether the Oracle artifact provider is enabled.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// The list of configured Oracle artifact accounts.
	Accounts             []*OracleArtifactAccount `protobuf:"bytes,2,rep,name=accounts,proto3" json:"accounts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *OracleArtifactProvider) Reset()         { *m = OracleArtifactProvider{} }
func (m *OracleArtifactProvider) String() string { return proto.CompactTextString(m) }
func (*OracleArtifactProvider) ProtoMessage()    {}
func (*OracleArtifactProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_c30a104913dd69e6, []int{0}
}

func (m *OracleArtifactProvider) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OracleArtifactProvider.Unmarshal(m, b)
}
func (m *OracleArtifactProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OracleArtifactProvider.Marshal(b, m, deterministic)
}
func (m *OracleArtifactProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OracleArtifactProvider.Merge(m, src)
}
func (m *OracleArtifactProvider) XXX_Size() int {
	return xxx_messageInfo_OracleArtifactProvider.Size(m)
}
func (m *OracleArtifactProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_OracleArtifactProvider.DiscardUnknown(m)
}

var xxx_messageInfo_OracleArtifactProvider proto.InternalMessageInfo

func (m *OracleArtifactProvider) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *OracleArtifactProvider) GetAccounts() []*OracleArtifactAccount {
	if m != nil {
		return m.Accounts
	}
	return nil
}

// Configuration for an Oracle artifact account.
type OracleArtifactAccount struct {
	// The name of the account.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The fingerprint of the public key.
	Fingerprint string `protobuf:"bytes,2,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`
	// The namespace in which the bucket and objects should be created.
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// The passphrase used for the private key, if it is encrypted.
	PrivateKeyPassphrase string `protobuf:"bytes,4,opt,name=privateKeyPassphrase,proto3" json:"privateKeyPassphrase,omitempty"`
	// An Oracle region (e.g., `us-phoenix-1`).
	Region string `protobuf:"bytes,5,opt,name=region,proto3" json:"region,omitempty"`
	// Path to the private key in PEM format.
	SshPrivateKeyFilePath string `protobuf:"bytes,6,opt,name=sshPrivateKeyFilePath,proto3" json:"sshPrivateKeyFilePath,omitempty"`
	// The OCID of the Oracle Tenancy to use.
	TenancyId string `protobuf:"bytes,7,opt,name=tenancyId,proto3" json:"tenancyId,omitempty"`
	// The OCID of the Oracle User with which to authenticate.
	UserId               string   `protobuf:"bytes,8,opt,name=userId,proto3" json:"userId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OracleArtifactAccount) Reset()         { *m = OracleArtifactAccount{} }
func (m *OracleArtifactAccount) String() string { return proto.CompactTextString(m) }
func (*OracleArtifactAccount) ProtoMessage()    {}
func (*OracleArtifactAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_c30a104913dd69e6, []int{1}
}

func (m *OracleArtifactAccount) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OracleArtifactAccount.Unmarshal(m, b)
}
func (m *OracleArtifactAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OracleArtifactAccount.Marshal(b, m, deterministic)
}
func (m *OracleArtifactAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OracleArtifactAccount.Merge(m, src)
}
func (m *OracleArtifactAccount) XXX_Size() int {
	return xxx_messageInfo_OracleArtifactAccount.Size(m)
}
func (m *OracleArtifactAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_OracleArtifactAccount.DiscardUnknown(m)
}

var xxx_messageInfo_OracleArtifactAccount proto.InternalMessageInfo

func (m *OracleArtifactAccount) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *OracleArtifactAccount) GetFingerprint() string {
	if m != nil {
		return m.Fingerprint
	}
	return ""
}

func (m *OracleArtifactAccount) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *OracleArtifactAccount) GetPrivateKeyPassphrase() string {
	if m != nil {
		return m.PrivateKeyPassphrase
	}
	return ""
}

func (m *OracleArtifactAccount) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *OracleArtifactAccount) GetSshPrivateKeyFilePath() string {
	if m != nil {
		return m.SshPrivateKeyFilePath
	}
	return ""
}

func (m *OracleArtifactAccount) GetTenancyId() string {
	if m != nil {
		return m.TenancyId
	}
	return ""
}

func (m *OracleArtifactAccount) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func init() {
	proto.RegisterType((*OracleArtifactProvider)(nil), "proto.OracleArtifactProvider")
	proto.RegisterType((*OracleArtifactAccount)(nil), "proto.OracleArtifactAccount")
}

func init() { proto.RegisterFile("oracle_artifact_provider.proto", fileDescriptor_c30a104913dd69e6) }

var fileDescriptor_c30a104913dd69e6 = []byte{
	// 302 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0x4f, 0x6b, 0x02, 0x31,
	0x10, 0xc5, 0xf1, 0xbf, 0xc6, 0x5b, 0xa8, 0x92, 0x83, 0x14, 0x11, 0x4a, 0x3d, 0xb9, 0x60, 0x7b,
	0xe8, 0xd5, 0x1e, 0x0a, 0xd2, 0x43, 0x17, 0x8f, 0xbd, 0xc8, 0x98, 0x1d, 0xdd, 0x60, 0x4c, 0xc2,
	0x24, 0x0a, 0x7e, 0x9e, 0x7e, 0xd1, 0x62, 0x76, 0xbb, 0x6d, 0x61, 0x4f, 0xc9, 0x7b, 0xef, 0x97,
	0x79, 0x43, 0xd8, 0xbd, 0x25, 0x90, 0x1a, 0xb7, 0x40, 0x41, 0xed, 0x41, 0x86, 0xad, 0x23, 0x7b,
	0x51, 0x19, 0xd2, 0xc2, 0x91, 0x0d, 0x96, 0x77, 0xe2, 0x31, 0xd3, 0x6c, 0xfc, 0x11, 0xc1, 0x55,
	0xc9, 0xa5, 0x25, 0xc6, 0x05, 0xeb, 0xa1, 0x81, 0x9d, 0xc6, 0x4c, 0x34, 0xa6, 0x8d, 0x79, 0x7f,
	0xf3, 0x23, 0xf9, 0x0b, 0xeb, 0x83, 0x94, 0xf6, 0x6c, 0x82, 0x17, 0xcd, 0x69, 0x6b, 0x3e, 0x5c,
	0x4e, 0x8a, 0xa1, 0x8b, 0xff, 0xa3, 0x56, 0x05, 0xb4, 0xa9, 0xe8, 0xd9, 0x57, 0x93, 0x8d, 0x6a,
	0x19, 0xce, 0x59, 0xdb, 0xc0, 0x09, 0x63, 0xd5, 0x60, 0x13, 0xef, 0x7c, 0xca, 0x86, 0x7b, 0x65,
	0x0e, 0x48, 0x8e, 0x94, 0x09, 0xa2, 0x19, 0xa3, 0xbf, 0x16, 0x9f, 0xb0, 0xc1, 0x8d, 0xf4, 0x0e,
	0x24, 0x8a, 0x56, 0xcc, 0x7f, 0x0d, 0xbe, 0x64, 0x77, 0x8e, 0xd4, 0x05, 0x02, 0xbe, 0xe3, 0x35,
	0x05, 0xef, 0x5d, 0x4e, 0xe0, 0x51, 0xb4, 0x23, 0x58, 0x9b, 0xf1, 0x31, 0xeb, 0x12, 0x1e, 0x94,
	0x35, 0xa2, 0x13, 0xa9, 0x52, 0xf1, 0x67, 0x36, 0xf2, 0x3e, 0x4f, 0xab, 0x27, 0x6f, 0x4a, 0x63,
	0x0a, 0x21, 0x17, 0xdd, 0x88, 0xd5, 0x87, 0xb7, 0xfd, 0x02, 0x1a, 0x30, 0xf2, 0xba, 0xce, 0x44,
	0xaf, 0xd8, 0xaf, 0x32, 0x6e, 0x5d, 0x67, 0x8f, 0xb4, 0xce, 0x44, 0xbf, 0xe8, 0x2a, 0xd4, 0xeb,
	0xe3, 0xe7, 0xc3, 0x41, 0x85, 0xfc, 0xbc, 0x5b, 0x48, 0x7b, 0x4a, 0xbc, 0x53, 0xc6, 0xc0, 0x11,
	0x29, 0x39, 0x6a, 0x84, 0x90, 0x80, 0x53, 0x89, 0xd4, 0x0a, 0x4d, 0xd8, 0x75, 0xe3, 0xaf, 0x3f,
	0x7d, 0x07, 0x00, 0x00, 0xff, 0xff, 0xf0, 0x8b, 0xcf, 0xd9, 0xec, 0x01, 0x00, 0x00,
}
