// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gitlab.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Configuration for the GitLab artifact provider.
type GitLabProvider struct {
	// Whether the GitLab artifact provider is enabled.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// The list of configured GitLab accounts.
	Accounts             []*GitLabAccount `protobuf:"bytes,2,rep,name=accounts,proto3" json:"accounts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GitLabProvider) Reset()         { *m = GitLabProvider{} }
func (m *GitLabProvider) String() string { return proto.CompactTextString(m) }
func (*GitLabProvider) ProtoMessage()    {}
func (*GitLabProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_b1397c7b5cc6205a, []int{0}
}

func (m *GitLabProvider) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GitLabProvider.Unmarshal(m, b)
}
func (m *GitLabProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GitLabProvider.Marshal(b, m, deterministic)
}
func (m *GitLabProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GitLabProvider.Merge(m, src)
}
func (m *GitLabProvider) XXX_Size() int {
	return xxx_messageInfo_GitLabProvider.Size(m)
}
func (m *GitLabProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_GitLabProvider.DiscardUnknown(m)
}

var xxx_messageInfo_GitLabProvider proto.InternalMessageInfo

func (m *GitLabProvider) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *GitLabProvider) GetAccounts() []*GitLabAccount {
	if m != nil {
		return m.Accounts
	}
	return nil
}

// Configuration for a GitLab artifact account. Either `token` or
// `tokenFile` should be specified as means of authentication.
type GitLabAccount struct {
	// The name of the account.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The GitLab access token.
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	// The path to a file containing the GitLab access token.
	TokenFile            string   `protobuf:"bytes,3,opt,name=tokenFile,proto3" json:"tokenFile,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GitLabAccount) Reset()         { *m = GitLabAccount{} }
func (m *GitLabAccount) String() string { return proto.CompactTextString(m) }
func (*GitLabAccount) ProtoMessage()    {}
func (*GitLabAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_b1397c7b5cc6205a, []int{1}
}

func (m *GitLabAccount) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GitLabAccount.Unmarshal(m, b)
}
func (m *GitLabAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GitLabAccount.Marshal(b, m, deterministic)
}
func (m *GitLabAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GitLabAccount.Merge(m, src)
}
func (m *GitLabAccount) XXX_Size() int {
	return xxx_messageInfo_GitLabAccount.Size(m)
}
func (m *GitLabAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_GitLabAccount.DiscardUnknown(m)
}

var xxx_messageInfo_GitLabAccount proto.InternalMessageInfo

func (m *GitLabAccount) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GitLabAccount) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *GitLabAccount) GetTokenFile() string {
	if m != nil {
		return m.TokenFile
	}
	return ""
}

func init() {
	proto.RegisterType((*GitLabProvider)(nil), "proto.GitLabProvider")
	proto.RegisterType((*GitLabAccount)(nil), "proto.GitLabAccount")
}

func init() { proto.RegisterFile("gitlab.proto", fileDescriptor_b1397c7b5cc6205a) }

var fileDescriptor_b1397c7b5cc6205a = []byte{
	// 166 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0xcf, 0x2c, 0xc9,
	0x49, 0x4c, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x4a, 0x31, 0x5c, 0x7c,
	0xee, 0x99, 0x25, 0x3e, 0x89, 0x49, 0x01, 0x45, 0xf9, 0x65, 0x99, 0x29, 0xa9, 0x45, 0x42, 0x12,
	0x5c, 0xec, 0xa9, 0x79, 0x89, 0x49, 0x39, 0xa9, 0x29, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x1c, 0x41,
	0x30, 0xae, 0x90, 0x01, 0x17, 0x47, 0x62, 0x72, 0x72, 0x7e, 0x69, 0x5e, 0x49, 0xb1, 0x04, 0x93,
	0x02, 0xb3, 0x06, 0xb7, 0x91, 0x08, 0xc4, 0x30, 0x3d, 0x88, 0x11, 0x8e, 0x10, 0xc9, 0x20, 0xb8,
	0x2a, 0xa5, 0x70, 0x2e, 0x5e, 0x14, 0x29, 0x21, 0x21, 0x2e, 0x96, 0xbc, 0xc4, 0xdc, 0x54, 0xb0,
	0xc9, 0x9c, 0x41, 0x60, 0xb6, 0x90, 0x08, 0x17, 0x6b, 0x49, 0x7e, 0x76, 0x6a, 0x9e, 0x04, 0x13,
	0x58, 0x10, 0xc2, 0x11, 0x92, 0xe1, 0xe2, 0x04, 0x33, 0xdc, 0x32, 0x73, 0x52, 0x25, 0x98, 0xc1,
	0x32, 0x08, 0x81, 0x24, 0x36, 0xb0, 0xbd, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9e, 0x76,
	0x78, 0xbb, 0xd4, 0x00, 0x00, 0x00,
}
