// Code generated by protoc-gen-go. DO NOT EDIT.
// source: azure_provider.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Configuration for the Azure provider.
type AzureProvider struct {
	// Whether the provider is enabled.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// The list of configured accounts.
	Accounts []*AzureAccount `protobuf:"bytes,2,rep,name=accounts,proto3" json:"accounts,omitempty"`
	// The name of the primary account.
	PrimaryAccount string `protobuf:"bytes,3,opt,name=primaryAccount,proto3" json:"primaryAccount,omitempty"`
	// Configuration for Spinnaker's image bakery.
	BakeryDefaults       *AzureBakeryDefaults `protobuf:"bytes,4,opt,name=bakeryDefaults,proto3" json:"bakeryDefaults,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *AzureProvider) Reset()         { *m = AzureProvider{} }
func (m *AzureProvider) String() string { return proto.CompactTextString(m) }
func (*AzureProvider) ProtoMessage()    {}
func (*AzureProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4df88c5b97d8b54, []int{0}
}

func (m *AzureProvider) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AzureProvider.Unmarshal(m, b)
}
func (m *AzureProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AzureProvider.Marshal(b, m, deterministic)
}
func (m *AzureProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AzureProvider.Merge(m, src)
}
func (m *AzureProvider) XXX_Size() int {
	return xxx_messageInfo_AzureProvider.Size(m)
}
func (m *AzureProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_AzureProvider.DiscardUnknown(m)
}

var xxx_messageInfo_AzureProvider proto.InternalMessageInfo

func (m *AzureProvider) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *AzureProvider) GetAccounts() []*AzureAccount {
	if m != nil {
		return m.Accounts
	}
	return nil
}

func (m *AzureProvider) GetPrimaryAccount() string {
	if m != nil {
		return m.PrimaryAccount
	}
	return ""
}

func (m *AzureProvider) GetBakeryDefaults() *AzureBakeryDefaults {
	if m != nil {
		return m.BakeryDefaults
	}
	return nil
}

type AzureAccount struct {
	// The name of the account.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// (Required) The `appKey` (password) of your service principal.
	AppKey string `protobuf:"bytes,2,opt,name=appKey,proto3" json:"appKey,omitempty"`
	// (Required) The `clientId` (also called `appId`) of your service principal.
	ClientId string `protobuf:"bytes,3,opt,name=clientId,proto3" json:"clientId,omitempty"`
	// (Required) The name of a KeyVault that contains the user name, password,
	// and ssh public key used to create VMs
	DefaultKeyVault string `protobuf:"bytes,4,opt,name=defaultKeyVault,proto3" json:"defaultKeyVault,omitempty"`
	// (Required) The default resource group to contain any non-application
	// specific resources.
	DefaultResourceGroup string `protobuf:"bytes,5,opt,name=defaultResourceGroup,proto3" json:"defaultResourceGroup,omitempty"`
	// The environment name for the account. Many accounts can share the
	// same environment (e.g., dev, test, prod).
	Environment string `protobuf:"bytes,6,opt,name=environment,proto3" json:"environment,omitempty"`
	// The `objectId` of your service principal. This is only required if using
	// Packer to bake Windows images.
	ObjectId string `protobuf:"bytes,7,opt,name=objectId,proto3" json:"objectId,omitempty"`
	// The resource group to use if baking images with Packer.
	PackerResourceGroup string `protobuf:"bytes,8,opt,name=packerResourceGroup,proto3" json:"packerResourceGroup,omitempty"`
	// The storage account to use if baking images with Packer.
	PackerStorageAccount string `protobuf:"bytes,9,opt,name=packerStorageAccount,proto3" json:"packerStorageAccount,omitempty"`
	// Fiat permissions configuration.
	Permissions *Permissions `protobuf:"bytes,10,opt,name=permissions,proto3" json:"permissions,omitempty"`
	// (Deprecated): List of required Fiat permission groups. Configure
	// `permissions` instead.
	RequiredGroupMemberships []string `protobuf:"bytes,11,rep,name=requiredGroupMemberships,proto3" json:"requiredGroupMemberships,omitempty"`
	// The Azure regions this Spinnaker account will manage.
	Regions []string `protobuf:"bytes,12,rep,name=regions,proto3" json:"regions,omitempty"`
	// (Required) The `subscriptionId` to which your service principal is
	// assigned.
	SubscriptionId string `protobuf:"bytes,13,opt,name=subscriptionId,proto3" json:"subscriptionId,omitempty"`
	// (Required) The `tenantId` to which your service principal is assigned.
	TenantId string `protobuf:"bytes,14,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
	// If true, the  SSH public key is used to provision the linux VM.
	// If false, the password is used instead.
	UseSshPublicKey      bool     `protobuf:"varint,15,opt,name=useSshPublicKey,proto3" json:"useSshPublicKey,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AzureAccount) Reset()         { *m = AzureAccount{} }
func (m *AzureAccount) String() string { return proto.CompactTextString(m) }
func (*AzureAccount) ProtoMessage()    {}
func (*AzureAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4df88c5b97d8b54, []int{1}
}

func (m *AzureAccount) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AzureAccount.Unmarshal(m, b)
}
func (m *AzureAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AzureAccount.Marshal(b, m, deterministic)
}
func (m *AzureAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AzureAccount.Merge(m, src)
}
func (m *AzureAccount) XXX_Size() int {
	return xxx_messageInfo_AzureAccount.Size(m)
}
func (m *AzureAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_AzureAccount.DiscardUnknown(m)
}

var xxx_messageInfo_AzureAccount proto.InternalMessageInfo

func (m *AzureAccount) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AzureAccount) GetAppKey() string {
	if m != nil {
		return m.AppKey
	}
	return ""
}

func (m *AzureAccount) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *AzureAccount) GetDefaultKeyVault() string {
	if m != nil {
		return m.DefaultKeyVault
	}
	return ""
}

func (m *AzureAccount) GetDefaultResourceGroup() string {
	if m != nil {
		return m.DefaultResourceGroup
	}
	return ""
}

func (m *AzureAccount) GetEnvironment() string {
	if m != nil {
		return m.Environment
	}
	return ""
}

func (m *AzureAccount) GetObjectId() string {
	if m != nil {
		return m.ObjectId
	}
	return ""
}

func (m *AzureAccount) GetPackerResourceGroup() string {
	if m != nil {
		return m.PackerResourceGroup
	}
	return ""
}

func (m *AzureAccount) GetPackerStorageAccount() string {
	if m != nil {
		return m.PackerStorageAccount
	}
	return ""
}

func (m *AzureAccount) GetPermissions() *Permissions {
	if m != nil {
		return m.Permissions
	}
	return nil
}

func (m *AzureAccount) GetRequiredGroupMemberships() []string {
	if m != nil {
		return m.RequiredGroupMemberships
	}
	return nil
}

func (m *AzureAccount) GetRegions() []string {
	if m != nil {
		return m.Regions
	}
	return nil
}

func (m *AzureAccount) GetSubscriptionId() string {
	if m != nil {
		return m.SubscriptionId
	}
	return ""
}

func (m *AzureAccount) GetTenantId() string {
	if m != nil {
		return m.TenantId
	}
	return ""
}

func (m *AzureAccount) GetUseSshPublicKey() bool {
	if m != nil {
		return m.UseSshPublicKey
	}
	return false
}

// Configuration for Spinnaker's image bakery.
type AzureBakeryDefaults struct {
	// List of configured base images.
	BaseImages           []*AzureBaseImageSettings `protobuf:"bytes,1,rep,name=baseImages,proto3" json:"baseImages,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *AzureBakeryDefaults) Reset()         { *m = AzureBakeryDefaults{} }
func (m *AzureBakeryDefaults) String() string { return proto.CompactTextString(m) }
func (*AzureBakeryDefaults) ProtoMessage()    {}
func (*AzureBakeryDefaults) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4df88c5b97d8b54, []int{2}
}

func (m *AzureBakeryDefaults) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AzureBakeryDefaults.Unmarshal(m, b)
}
func (m *AzureBakeryDefaults) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AzureBakeryDefaults.Marshal(b, m, deterministic)
}
func (m *AzureBakeryDefaults) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AzureBakeryDefaults.Merge(m, src)
}
func (m *AzureBakeryDefaults) XXX_Size() int {
	return xxx_messageInfo_AzureBakeryDefaults.Size(m)
}
func (m *AzureBakeryDefaults) XXX_DiscardUnknown() {
	xxx_messageInfo_AzureBakeryDefaults.DiscardUnknown(m)
}

var xxx_messageInfo_AzureBakeryDefaults proto.InternalMessageInfo

func (m *AzureBakeryDefaults) GetBaseImages() []*AzureBaseImageSettings {
	if m != nil {
		return m.BaseImages
	}
	return nil
}

// Configuration for a base image for the Azure provider's bakery.
type AzureBaseImageSettings struct {
	// Base image configuration.
	BaseImage            *AzureBaseImage `protobuf:"bytes,1,opt,name=baseImage,proto3" json:"baseImage,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *AzureBaseImageSettings) Reset()         { *m = AzureBaseImageSettings{} }
func (m *AzureBaseImageSettings) String() string { return proto.CompactTextString(m) }
func (*AzureBaseImageSettings) ProtoMessage()    {}
func (*AzureBaseImageSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4df88c5b97d8b54, []int{3}
}

func (m *AzureBaseImageSettings) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AzureBaseImageSettings.Unmarshal(m, b)
}
func (m *AzureBaseImageSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AzureBaseImageSettings.Marshal(b, m, deterministic)
}
func (m *AzureBaseImageSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AzureBaseImageSettings.Merge(m, src)
}
func (m *AzureBaseImageSettings) XXX_Size() int {
	return xxx_messageInfo_AzureBaseImageSettings.Size(m)
}
func (m *AzureBaseImageSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_AzureBaseImageSettings.DiscardUnknown(m)
}

var xxx_messageInfo_AzureBaseImageSettings proto.InternalMessageInfo

func (m *AzureBaseImageSettings) GetBaseImage() *AzureBaseImage {
	if m != nil {
		return m.BaseImage
	}
	return nil
}

// Base image configuration.
type AzureBaseImage struct {
	// A short description to help human operators identify the
	// image.
	ShortDescription string `protobuf:"bytes,1,opt,name=shortDescription,proto3" json:"shortDescription,omitempty"`
	// A long description to help human operators identify the
	// image.
	DetailedDescription string `protobuf:"bytes,2,opt,name=detailedDescription,proto3" json:"detailedDescription,omitempty"`
	// (Required) The Publisher name for your base image. See
	// https://aka.ms/azspinimage to get a list of images.
	Publisher string `protobuf:"bytes,3,opt,name=publisher,proto3" json:"publisher,omitempty"`
	// (Required) The offer for your base image. See https://aka.ms/azspinimage
	// to get a list of images.
	Offer string `protobuf:"bytes,4,opt,name=offer,proto3" json:"offer,omitempty"`
	// (Required) The SKU for your base image. See https://aka.ms/azspinimage to
	// get a list of images.
	Sku string `protobuf:"bytes,5,opt,name=sku,proto3" json:"sku,omitempty"`
	// The version of your base image. This defaults to `latest` if not
	// specified.
	Version string `protobuf:"bytes,6,opt,name=version,proto3" json:"version,omitempty"`
	// This is used to help Spinnaker's bakery download the build artifacts you
	// supply it with. For example, specifying `deb` indicates that your
	// artifacts will need to be fetched from a debian repository.
	PackageType string `protobuf:"bytes,7,opt,name=packageType,proto3" json:"packageType,omitempty"`
	// This is the name of the packer template that will be used to bake images
	// from this base image. The template file must be found in this list:
	// https://github.com/spinnaker/rosco/tree/master/rosco-web/config/packer,
	// or supplied as described here: https://spinnaker.io/setup/bakery/.
	TemplateFile         string   `protobuf:"bytes,8,opt,name=templateFile,proto3" json:"templateFile,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AzureBaseImage) Reset()         { *m = AzureBaseImage{} }
func (m *AzureBaseImage) String() string { return proto.CompactTextString(m) }
func (*AzureBaseImage) ProtoMessage()    {}
func (*AzureBaseImage) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4df88c5b97d8b54, []int{4}
}

func (m *AzureBaseImage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AzureBaseImage.Unmarshal(m, b)
}
func (m *AzureBaseImage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AzureBaseImage.Marshal(b, m, deterministic)
}
func (m *AzureBaseImage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AzureBaseImage.Merge(m, src)
}
func (m *AzureBaseImage) XXX_Size() int {
	return xxx_messageInfo_AzureBaseImage.Size(m)
}
func (m *AzureBaseImage) XXX_DiscardUnknown() {
	xxx_messageInfo_AzureBaseImage.DiscardUnknown(m)
}

var xxx_messageInfo_AzureBaseImage proto.InternalMessageInfo

func (m *AzureBaseImage) GetShortDescription() string {
	if m != nil {
		return m.ShortDescription
	}
	return ""
}

func (m *AzureBaseImage) GetDetailedDescription() string {
	if m != nil {
		return m.DetailedDescription
	}
	return ""
}

func (m *AzureBaseImage) GetPublisher() string {
	if m != nil {
		return m.Publisher
	}
	return ""
}

func (m *AzureBaseImage) GetOffer() string {
	if m != nil {
		return m.Offer
	}
	return ""
}

func (m *AzureBaseImage) GetSku() string {
	if m != nil {
		return m.Sku
	}
	return ""
}

func (m *AzureBaseImage) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *AzureBaseImage) GetPackageType() string {
	if m != nil {
		return m.PackageType
	}
	return ""
}

func (m *AzureBaseImage) GetTemplateFile() string {
	if m != nil {
		return m.TemplateFile
	}
	return ""
}

func init() {
	proto.RegisterType((*AzureProvider)(nil), "proto.AzureProvider")
	proto.RegisterType((*AzureAccount)(nil), "proto.AzureAccount")
	proto.RegisterType((*AzureBakeryDefaults)(nil), "proto.AzureBakeryDefaults")
	proto.RegisterType((*AzureBaseImageSettings)(nil), "proto.AzureBaseImageSettings")
	proto.RegisterType((*AzureBaseImage)(nil), "proto.AzureBaseImage")
}

func init() { proto.RegisterFile("azure_provider.proto", fileDescriptor_a4df88c5b97d8b54) }

var fileDescriptor_a4df88c5b97d8b54 = []byte{
	// 603 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x53, 0xcd, 0x4e, 0xdc, 0x30,
	0x10, 0xd6, 0xb2, 0xfc, 0x6c, 0x66, 0x61, 0xa1, 0x86, 0x22, 0x0b, 0xb5, 0xd2, 0x2a, 0x87, 0x2a,
	0xea, 0x81, 0x56, 0x4b, 0x4f, 0x95, 0x7a, 0x00, 0xa1, 0x56, 0x08, 0x21, 0xa1, 0x80, 0x7a, 0xad,
	0x9c, 0x64, 0xd8, 0x75, 0x49, 0x62, 0xd7, 0x76, 0x90, 0xb6, 0xcf, 0xd1, 0x67, 0xea, 0x03, 0xf4,
	0x89, 0x2a, 0x3b, 0xce, 0x92, 0x6c, 0xd3, 0x53, 0x3c, 0xdf, 0xf7, 0xd9, 0x33, 0x99, 0xf9, 0x06,
	0x8e, 0xd8, 0xcf, 0x4a, 0xe1, 0x37, 0xa9, 0xc4, 0x13, 0xcf, 0x50, 0x9d, 0x4a, 0x25, 0x8c, 0x20,
	0x5b, 0xee, 0x73, 0xf2, 0x42, 0xa2, 0x2a, 0xb8, 0xd6, 0x5c, 0x94, 0xba, 0x66, 0xc2, 0xdf, 0x03,
	0xd8, 0x3b, 0xb7, 0x57, 0x6e, 0xfd, 0x0d, 0x42, 0x61, 0x07, 0x4b, 0x96, 0xe4, 0x98, 0xd1, 0xc1,
	0x74, 0x10, 0x8d, 0xe2, 0x26, 0x24, 0xef, 0x60, 0xc4, 0xd2, 0x54, 0x54, 0xa5, 0xd1, 0x74, 0x63,
	0x3a, 0x8c, 0xc6, 0xb3, 0xc3, 0xfa, 0x95, 0x53, 0xf7, 0xc2, 0x79, 0xcd, 0xc5, 0x2b, 0x11, 0x79,
	0x03, 0x13, 0xa9, 0x78, 0xc1, 0xd4, 0xd2, 0x73, 0x74, 0x38, 0x1d, 0x44, 0x41, 0xbc, 0x86, 0x92,
	0x0b, 0x98, 0x24, 0xec, 0x11, 0xd5, 0xf2, 0x12, 0x1f, 0x58, 0x95, 0x1b, 0x4d, 0x37, 0xa7, 0x83,
	0x68, 0x3c, 0x3b, 0x69, 0x3f, 0x7f, 0xd1, 0x51, 0xc4, 0x6b, 0x37, 0xc2, 0x3f, 0x9b, 0xb0, 0xdb,
	0x2e, 0x83, 0x10, 0xd8, 0x2c, 0x59, 0x81, 0xee, 0x27, 0x82, 0xd8, 0x9d, 0xc9, 0x31, 0x6c, 0x33,
	0x29, 0xaf, 0x71, 0x49, 0x37, 0x1c, 0xea, 0x23, 0x72, 0x02, 0xa3, 0x34, 0xe7, 0x58, 0x9a, 0xab,
	0xcc, 0x97, 0xb8, 0x8a, 0x49, 0x04, 0xfb, 0x59, 0x9d, 0xe4, 0x1a, 0x97, 0x5f, 0xed, 0xd7, 0x55,
	0x17, 0xc4, 0xeb, 0x30, 0x99, 0xc1, 0x91, 0x87, 0x62, 0xd4, 0xa2, 0x52, 0x29, 0x7e, 0x51, 0xa2,
	0x92, 0x74, 0xcb, 0xc9, 0x7b, 0x39, 0x32, 0x85, 0x31, 0x96, 0x4f, 0x5c, 0x89, 0xb2, 0xc0, 0xd2,
	0xd0, 0x6d, 0x27, 0x6d, 0x43, 0xb6, 0x36, 0x91, 0x7c, 0xc7, 0xd4, 0xd6, 0xb6, 0x53, 0xd7, 0xd6,
	0xc4, 0xe4, 0x3d, 0x1c, 0x4a, 0x96, 0x3e, 0xa2, 0xea, 0x26, 0x1c, 0x39, 0x59, 0x1f, 0x65, 0x6b,
	0xac, 0xe1, 0x3b, 0x23, 0x14, 0x9b, 0x37, 0xdd, 0xa2, 0x41, 0x5d, 0x63, 0x1f, 0x47, 0x3e, 0xc0,
	0xb8, 0x65, 0x1c, 0x0a, 0x6e, 0x36, 0xc4, 0xcf, 0xe6, 0xf6, 0x99, 0x89, 0xdb, 0x32, 0xf2, 0x11,
	0xa8, 0xc2, 0x1f, 0x15, 0x57, 0x98, 0xb9, 0xd4, 0x37, 0x58, 0x24, 0xa8, 0xf4, 0x82, 0x4b, 0x4d,
	0xc7, 0xd3, 0x61, 0x14, 0xc4, 0xff, 0xe5, 0xad, 0x07, 0x15, 0xce, 0x5d, 0xb6, 0x5d, 0x27, 0x6d,
	0x42, 0x6b, 0x29, 0x5d, 0x25, 0x3a, 0x55, 0x5c, 0x1a, 0x2e, 0xca, 0xab, 0x8c, 0xee, 0xd5, 0x96,
	0xea, 0xa2, 0xb6, 0x6b, 0x06, 0x4b, 0xe6, 0x26, 0x3a, 0xa9, 0xbb, 0xd6, 0xc4, 0x76, 0xa2, 0x95,
	0xc6, 0x3b, 0xbd, 0xb8, 0xad, 0x92, 0x9c, 0xa7, 0xd6, 0x0e, 0xfb, 0xce, 0xe9, 0xeb, 0x70, 0x78,
	0x0f, 0x87, 0x3d, 0xde, 0x23, 0x9f, 0x00, 0x12, 0xa6, 0xf1, 0xaa, 0x60, 0x73, 0xd4, 0x74, 0xe0,
	0x56, 0xe1, 0x75, 0xd7, 0xab, 0x9e, 0xbd, 0x43, 0x63, 0x78, 0x39, 0xd7, 0x71, 0xeb, 0x42, 0x78,
	0x03, 0xc7, 0xfd, 0x2a, 0x72, 0x06, 0xc1, 0x4a, 0xe7, 0x8c, 0x3b, 0x9e, 0xbd, 0xec, 0x7d, 0x37,
	0x7e, 0xd6, 0x85, 0xbf, 0x36, 0x60, 0xd2, 0x65, 0xc9, 0x5b, 0x38, 0xd0, 0x0b, 0xa1, 0xcc, 0x25,
	0xae, 0x7a, 0xe2, 0xf7, 0xe0, 0x1f, 0xdc, 0x7a, 0x28, 0x43, 0xc3, 0x78, 0x8e, 0x59, 0x5b, 0x5e,
	0x2f, 0x48, 0x1f, 0x45, 0x5e, 0x41, 0x20, 0x6d, 0x8b, 0xf4, 0x02, 0x95, 0x5f, 0x97, 0x67, 0x80,
	0x1c, 0xc1, 0x96, 0x78, 0x78, 0x40, 0xe5, 0xb7, 0xa4, 0x0e, 0xc8, 0x01, 0x0c, 0xf5, 0x63, 0xe5,
	0x57, 0xc1, 0x1e, 0xed, 0x8c, 0x9f, 0x50, 0x59, 0xaf, 0x78, 0xd7, 0x37, 0xa1, 0xdd, 0x09, 0xeb,
	0x43, 0x36, 0xc7, 0xfb, 0xa5, 0x44, 0x6f, 0xfa, 0x36, 0x44, 0x42, 0xd8, 0x35, 0x58, 0xc8, 0x9c,
	0x19, 0xfc, 0xcc, 0x73, 0xf4, 0x86, 0xef, 0x60, 0xc9, 0xb6, 0xeb, 0xdb, 0xd9, 0xdf, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x39, 0x37, 0x03, 0xb0, 0x12, 0x05, 0x00, 0x00,
}
