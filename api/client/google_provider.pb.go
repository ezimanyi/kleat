// Code generated by protoc-gen-go. DO NOT EDIT.
// source: google_provider.proto

package client

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Configuration for the Google Compute Engine (GCE) provider.
type GoogleProvider struct {
	// Whether the provider is enabled.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// The list of configured accounts.
	Accounts []*GoogleAccount `protobuf:"bytes,2,rep,name=accounts,proto3" json:"accounts,omitempty"`
	// The name of the primary account.
	PrimaryAccount string `protobuf:"bytes,3,opt,name=primaryAccount,proto3" json:"primaryAccount,omitempty"`
	// Configuration for Spinnaker's image bakery.
	BakeryDefaults       *GoogleBakeryDefaults `protobuf:"bytes,4,opt,name=bakeryDefaults,proto3" json:"bakeryDefaults,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *GoogleProvider) Reset()         { *m = GoogleProvider{} }
func (m *GoogleProvider) String() string { return proto.CompactTextString(m) }
func (*GoogleProvider) ProtoMessage()    {}
func (*GoogleProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_dae3eb34120f6e8e, []int{0}
}

func (m *GoogleProvider) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GoogleProvider.Unmarshal(m, b)
}
func (m *GoogleProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GoogleProvider.Marshal(b, m, deterministic)
}
func (m *GoogleProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GoogleProvider.Merge(m, src)
}
func (m *GoogleProvider) XXX_Size() int {
	return xxx_messageInfo_GoogleProvider.Size(m)
}
func (m *GoogleProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_GoogleProvider.DiscardUnknown(m)
}

var xxx_messageInfo_GoogleProvider proto.InternalMessageInfo

func (m *GoogleProvider) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *GoogleProvider) GetAccounts() []*GoogleAccount {
	if m != nil {
		return m.Accounts
	}
	return nil
}

func (m *GoogleProvider) GetPrimaryAccount() string {
	if m != nil {
		return m.PrimaryAccount
	}
	return ""
}

func (m *GoogleProvider) GetBakeryDefaults() *GoogleBakeryDefaults {
	if m != nil {
		return m.BakeryDefaults
	}
	return nil
}

// Configuration for a Spinnaker Google account. An account maps to a
// credential that can authenticate against a GCP project.
type GoogleAccount struct {
	// The name of the account.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// (Deprecated): List of required Fiat permission groups. Configure
	// `permissions` instead.
	RequiredGroupMemberships []string `protobuf:"bytes,3,rep,name=requiredGroupMemberships,proto3" json:"requiredGroupMemberships,omitempty"`
	// Fiat permissions configuration.
	Permissions *Permissions `protobuf:"bytes,4,opt,name=permissions,proto3" json:"permissions,omitempty"`
	// The GCP project this Spinnaker account will manage.
	Project string `protobuf:"bytes,5,opt,name=project,proto3" json:"project,omitempty"`
	// The path to a JSON service account that Spinnaker will use as
	// credentials. This is only needed if Spinnaker is not deployed on a
	// Google Compute Engine VM, or needs permissions not afforded to the VM
	// it is running on. See
	// https://cloud.google.com/compute/docs/access/service-accounts for
	// more information.
	JsonPath string `protobuf:"bytes,6,opt,name=jsonPath,proto3" json:"jsonPath,omitempty"`
	// Enable this flag if your GCP project has access to alpha features and
	// you want Spinnaker to take advantage of them.
	AlphaListed bool `protobuf:"varint,7,opt,name=alphaListed,proto3" json:"alphaListed,omitempty"`
	// A list of GCP projects from which Spinnaker will be able to cache and
	// deploy images. When this is omitted, it defaults to the current
	// project. Each project must have granted the IAM role
	// compute.imageUser to the service account associated with the JSON key
	// used by this account, as well as to the Google APIs service account
	// automatically created for the project being managed (should look
	// similar to 12345678912@cloudservices.gserviceaccount.com). See
	// https://cloud.google.com/compute/docs/images/sharing-images-across-projects
	// for more information about sharing images across GCP projects.
	ImageProjects []string `protobuf:"bytes,8,rep,name=imageProjects,proto3" json:"imageProjects,omitempty"`
	// Configuration for Consul.
	Consul *Consul `protobuf:"bytes,9,opt,name=consul,proto3" json:"consul,omitempty"`
	// A list of regions for caching and mutating calls. This overwrites
	// any default regions set on the provider.
	Regions []string `protobuf:"bytes,10,rep,name=regions,proto3" json:"regions,omitempty"`
	//  The path to user data template file. Spinnaker has the ability to
	//  inject userdata into generated instance templates. The mechanism is
	//  via a template file that is token replaced to provide some specifics
	//  about the deployment. See
	//  https://github.com/spinnaker/clouddriver/blob/master/clouddriver-aws/UserData.md
	//  for more information.
	UserDataFile         string   `protobuf:"bytes,11,opt,name=userDataFile,proto3" json:"userDataFile,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GoogleAccount) Reset()         { *m = GoogleAccount{} }
func (m *GoogleAccount) String() string { return proto.CompactTextString(m) }
func (*GoogleAccount) ProtoMessage()    {}
func (*GoogleAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_dae3eb34120f6e8e, []int{1}
}

func (m *GoogleAccount) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GoogleAccount.Unmarshal(m, b)
}
func (m *GoogleAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GoogleAccount.Marshal(b, m, deterministic)
}
func (m *GoogleAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GoogleAccount.Merge(m, src)
}
func (m *GoogleAccount) XXX_Size() int {
	return xxx_messageInfo_GoogleAccount.Size(m)
}
func (m *GoogleAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_GoogleAccount.DiscardUnknown(m)
}

var xxx_messageInfo_GoogleAccount proto.InternalMessageInfo

func (m *GoogleAccount) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GoogleAccount) GetRequiredGroupMemberships() []string {
	if m != nil {
		return m.RequiredGroupMemberships
	}
	return nil
}

func (m *GoogleAccount) GetPermissions() *Permissions {
	if m != nil {
		return m.Permissions
	}
	return nil
}

func (m *GoogleAccount) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *GoogleAccount) GetJsonPath() string {
	if m != nil {
		return m.JsonPath
	}
	return ""
}

func (m *GoogleAccount) GetAlphaListed() bool {
	if m != nil {
		return m.AlphaListed
	}
	return false
}

func (m *GoogleAccount) GetImageProjects() []string {
	if m != nil {
		return m.ImageProjects
	}
	return nil
}

func (m *GoogleAccount) GetConsul() *Consul {
	if m != nil {
		return m.Consul
	}
	return nil
}

func (m *GoogleAccount) GetRegions() []string {
	if m != nil {
		return m.Regions
	}
	return nil
}

func (m *GoogleAccount) GetUserDataFile() string {
	if m != nil {
		return m.UserDataFile
	}
	return ""
}

// Configuration for Spinnaker's image bakery.
type GoogleBakeryDefaults struct {
	// The name of the Packer template that will be used to bake images from
	// this base image. The template file must be found in this list:
	// https://github.com/spinnaker/rosco/tree/master/rosco-web/config/packer,
	// or supplied as described here: https://spinnaker.io/setup/bakery/.
	TemplateFile string `protobuf:"bytes,1,opt,name=templateFile,proto3" json:"templateFile,omitempty"`
	// List of configured base images.
	BaseImages []*GoogleBaseImageSettings `protobuf:"bytes,2,rep,name=baseImages,proto3" json:"baseImages,omitempty"`
	// The default zone in which to bake an image.
	Zone string `protobuf:"bytes,3,opt,name=zone,proto3" json:"zone,omitempty"`
	// The Google Compute network ID or URL to use for the launched
	// instance. Defaults to default.
	Network string `protobuf:"bytes,4,opt,name=network,proto3" json:"network,omitempty"`
	// If true, use the instance's internal IP instead of its external IP
	// during baking.
	UseInternalIp bool `protobuf:"varint,5,opt,name=useInternalIp,proto3" json:"useInternalIp,omitempty"`
	// The default project ID for the network and subnet to use for the VM
	// baking your image.
	NetworkProjectId     string   `protobuf:"bytes,6,opt,name=networkProjectId,proto3" json:"networkProjectId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GoogleBakeryDefaults) Reset()         { *m = GoogleBakeryDefaults{} }
func (m *GoogleBakeryDefaults) String() string { return proto.CompactTextString(m) }
func (*GoogleBakeryDefaults) ProtoMessage()    {}
func (*GoogleBakeryDefaults) Descriptor() ([]byte, []int) {
	return fileDescriptor_dae3eb34120f6e8e, []int{2}
}

func (m *GoogleBakeryDefaults) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GoogleBakeryDefaults.Unmarshal(m, b)
}
func (m *GoogleBakeryDefaults) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GoogleBakeryDefaults.Marshal(b, m, deterministic)
}
func (m *GoogleBakeryDefaults) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GoogleBakeryDefaults.Merge(m, src)
}
func (m *GoogleBakeryDefaults) XXX_Size() int {
	return xxx_messageInfo_GoogleBakeryDefaults.Size(m)
}
func (m *GoogleBakeryDefaults) XXX_DiscardUnknown() {
	xxx_messageInfo_GoogleBakeryDefaults.DiscardUnknown(m)
}

var xxx_messageInfo_GoogleBakeryDefaults proto.InternalMessageInfo

func (m *GoogleBakeryDefaults) GetTemplateFile() string {
	if m != nil {
		return m.TemplateFile
	}
	return ""
}

func (m *GoogleBakeryDefaults) GetBaseImages() []*GoogleBaseImageSettings {
	if m != nil {
		return m.BaseImages
	}
	return nil
}

func (m *GoogleBakeryDefaults) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

func (m *GoogleBakeryDefaults) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *GoogleBakeryDefaults) GetUseInternalIp() bool {
	if m != nil {
		return m.UseInternalIp
	}
	return false
}

func (m *GoogleBakeryDefaults) GetNetworkProjectId() string {
	if m != nil {
		return m.NetworkProjectId
	}
	return ""
}

// Configuration for a base image for the Google provider's bakery.
type GoogleBaseImageSettings struct {
	// Base image configuration.
	BaseImage *GoogleBaseImage `protobuf:"bytes,1,opt,name=baseImage,proto3" json:"baseImage,omitempty"`
	// Image source configuration.
	VirtualizationSettings *VirtualizationSettings `protobuf:"bytes,2,opt,name=virtualizationSettings,proto3" json:"virtualizationSettings,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}                `json:"-"`
	XXX_unrecognized       []byte                  `json:"-"`
	XXX_sizecache          int32                   `json:"-"`
}

func (m *GoogleBaseImageSettings) Reset()         { *m = GoogleBaseImageSettings{} }
func (m *GoogleBaseImageSettings) String() string { return proto.CompactTextString(m) }
func (*GoogleBaseImageSettings) ProtoMessage()    {}
func (*GoogleBaseImageSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_dae3eb34120f6e8e, []int{3}
}

func (m *GoogleBaseImageSettings) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GoogleBaseImageSettings.Unmarshal(m, b)
}
func (m *GoogleBaseImageSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GoogleBaseImageSettings.Marshal(b, m, deterministic)
}
func (m *GoogleBaseImageSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GoogleBaseImageSettings.Merge(m, src)
}
func (m *GoogleBaseImageSettings) XXX_Size() int {
	return xxx_messageInfo_GoogleBaseImageSettings.Size(m)
}
func (m *GoogleBaseImageSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_GoogleBaseImageSettings.DiscardUnknown(m)
}

var xxx_messageInfo_GoogleBaseImageSettings proto.InternalMessageInfo

func (m *GoogleBaseImageSettings) GetBaseImage() *GoogleBaseImage {
	if m != nil {
		return m.BaseImage
	}
	return nil
}

func (m *GoogleBaseImageSettings) GetVirtualizationSettings() *VirtualizationSettings {
	if m != nil {
		return m.VirtualizationSettings
	}
	return nil
}

// Base image configuration.
type GoogleBaseImage struct {
	// This is the identifier used by GCP to find this base
	// image.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// A short description to help human operators identify the
	// image.
	ShortDescription string `protobuf:"bytes,2,opt,name=shortDescription,proto3" json:"shortDescription,omitempty"`
	// A long description to help human operators identify the
	// image.
	DetailedDescription string `protobuf:"bytes,3,opt,name=detailedDescription,proto3" json:"detailedDescription,omitempty"`
	//  This is used to help Spinnaker's bakery download the build
	//  artifacts you supply it with. For example, specifying deb
	//  indicates that your artifacts will need to be fetched from a
	//  debian repository.
	PackageType string `protobuf:"bytes,4,opt,name=packageType,proto3" json:"packageType,omitempty"`
	// If set to true, Deck will annotate the popup tooltip to
	// indicate that the selected option represents an image family.
	ImageFamily          bool     `protobuf:"varint,5,opt,name=imageFamily,proto3" json:"imageFamily,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GoogleBaseImage) Reset()         { *m = GoogleBaseImage{} }
func (m *GoogleBaseImage) String() string { return proto.CompactTextString(m) }
func (*GoogleBaseImage) ProtoMessage()    {}
func (*GoogleBaseImage) Descriptor() ([]byte, []int) {
	return fileDescriptor_dae3eb34120f6e8e, []int{4}
}

func (m *GoogleBaseImage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GoogleBaseImage.Unmarshal(m, b)
}
func (m *GoogleBaseImage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GoogleBaseImage.Marshal(b, m, deterministic)
}
func (m *GoogleBaseImage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GoogleBaseImage.Merge(m, src)
}
func (m *GoogleBaseImage) XXX_Size() int {
	return xxx_messageInfo_GoogleBaseImage.Size(m)
}
func (m *GoogleBaseImage) XXX_DiscardUnknown() {
	xxx_messageInfo_GoogleBaseImage.DiscardUnknown(m)
}

var xxx_messageInfo_GoogleBaseImage proto.InternalMessageInfo

func (m *GoogleBaseImage) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *GoogleBaseImage) GetShortDescription() string {
	if m != nil {
		return m.ShortDescription
	}
	return ""
}

func (m *GoogleBaseImage) GetDetailedDescription() string {
	if m != nil {
		return m.DetailedDescription
	}
	return ""
}

func (m *GoogleBaseImage) GetPackageType() string {
	if m != nil {
		return m.PackageType
	}
	return ""
}

func (m *GoogleBaseImage) GetImageFamily() bool {
	if m != nil {
		return m.ImageFamily
	}
	return false
}

// Image source configuration.
type VirtualizationSettings struct {
	//  The source image. If both sourceImage and sourceImageFamily
	//  are set, sourceImage will take precedence.
	SourceImage string `protobuf:"bytes,1,opt,name=sourceImage,proto3" json:"sourceImage,omitempty"`
	// The source image family to create the image from. The newest,
	// non-deprecated image is used. If both sourceImage and
	// sourceImageFamily are set, sourceImage will take precedence.
	SourceImageFamily    string   `protobuf:"bytes,2,opt,name=sourceImageFamily,proto3" json:"sourceImageFamily,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VirtualizationSettings) Reset()         { *m = VirtualizationSettings{} }
func (m *VirtualizationSettings) String() string { return proto.CompactTextString(m) }
func (*VirtualizationSettings) ProtoMessage()    {}
func (*VirtualizationSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_dae3eb34120f6e8e, []int{5}
}

func (m *VirtualizationSettings) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualizationSettings.Unmarshal(m, b)
}
func (m *VirtualizationSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualizationSettings.Marshal(b, m, deterministic)
}
func (m *VirtualizationSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualizationSettings.Merge(m, src)
}
func (m *VirtualizationSettings) XXX_Size() int {
	return xxx_messageInfo_VirtualizationSettings.Size(m)
}
func (m *VirtualizationSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualizationSettings.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualizationSettings proto.InternalMessageInfo

func (m *VirtualizationSettings) GetSourceImage() string {
	if m != nil {
		return m.SourceImage
	}
	return ""
}

func (m *VirtualizationSettings) GetSourceImageFamily() string {
	if m != nil {
		return m.SourceImageFamily
	}
	return ""
}

// Configuration for Consul.
type Consul struct {
	// Whether Consul is enabled.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Reachable Consul node endpoint connected to the Consul cluster.
	// Defaults to localhost.
	AgentEndpoint string `protobuf:"bytes,2,opt,name=agentEndpoint,proto3" json:"agentEndpoint,omitempty"`
	// Port consul is running on for every agent. Defaults to 8500.
	AgentPort int32 `protobuf:"varint,3,opt,name=agentPort,proto3" json:"agentPort,omitempty"`
	// List of data centers to cache and keep updated. Defaults to all.
	Datacenters          []string `protobuf:"bytes,4,rep,name=datacenters,proto3" json:"datacenters,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Consul) Reset()         { *m = Consul{} }
func (m *Consul) String() string { return proto.CompactTextString(m) }
func (*Consul) ProtoMessage()    {}
func (*Consul) Descriptor() ([]byte, []int) {
	return fileDescriptor_dae3eb34120f6e8e, []int{6}
}

func (m *Consul) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Consul.Unmarshal(m, b)
}
func (m *Consul) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Consul.Marshal(b, m, deterministic)
}
func (m *Consul) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Consul.Merge(m, src)
}
func (m *Consul) XXX_Size() int {
	return xxx_messageInfo_Consul.Size(m)
}
func (m *Consul) XXX_DiscardUnknown() {
	xxx_messageInfo_Consul.DiscardUnknown(m)
}

var xxx_messageInfo_Consul proto.InternalMessageInfo

func (m *Consul) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *Consul) GetAgentEndpoint() string {
	if m != nil {
		return m.AgentEndpoint
	}
	return ""
}

func (m *Consul) GetAgentPort() int32 {
	if m != nil {
		return m.AgentPort
	}
	return 0
}

func (m *Consul) GetDatacenters() []string {
	if m != nil {
		return m.Datacenters
	}
	return nil
}

func init() {
	proto.RegisterType((*GoogleProvider)(nil), "proto.GoogleProvider")
	proto.RegisterType((*GoogleAccount)(nil), "proto.GoogleAccount")
	proto.RegisterType((*GoogleBakeryDefaults)(nil), "proto.GoogleBakeryDefaults")
	proto.RegisterType((*GoogleBaseImageSettings)(nil), "proto.GoogleBaseImageSettings")
	proto.RegisterType((*GoogleBaseImage)(nil), "proto.GoogleBaseImage")
	proto.RegisterType((*VirtualizationSettings)(nil), "proto.VirtualizationSettings")
	proto.RegisterType((*Consul)(nil), "proto.Consul")
}

func init() { proto.RegisterFile("google_provider.proto", fileDescriptor_dae3eb34120f6e8e) }

var fileDescriptor_dae3eb34120f6e8e = []byte{
	// 712 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x54, 0xcd, 0x6e, 0xe3, 0x36,
	0x10, 0x86, 0xec, 0xc4, 0xb1, 0xe8, 0xda, 0x6d, 0xd8, 0x34, 0x15, 0xd2, 0x1f, 0x18, 0x42, 0xd2,
	0x1a, 0x45, 0x11, 0x07, 0x69, 0x4e, 0x3d, 0x14, 0x68, 0x92, 0x26, 0x30, 0xd0, 0x02, 0x06, 0xfb,
	0x73, 0xe8, 0xa5, 0xa0, 0xa5, 0xa9, 0xcc, 0x58, 0x22, 0x59, 0x92, 0x4a, 0xe1, 0x3c, 0xc1, 0x3e,
	0xc9, 0xbe, 0xc8, 0x9e, 0xf6, 0x8d, 0x16, 0x7b, 0x5a, 0x90, 0xa2, 0x1d, 0xc9, 0xb1, 0x4f, 0xd2,
	0x7c, 0xf3, 0xc3, 0x6f, 0xe6, 0x1b, 0x12, 0x7d, 0x96, 0x09, 0x91, 0xe5, 0xf0, 0x8f, 0x54, 0xe2,
	0x91, 0xa5, 0xa0, 0xce, 0xa5, 0x12, 0x46, 0xe0, 0x7d, 0xf7, 0x39, 0x39, 0x94, 0xa0, 0x0a, 0xa6,
	0x35, 0x13, 0x5c, 0x57, 0x9e, 0xf8, 0x6d, 0x80, 0x06, 0xf7, 0x2e, 0x67, 0xea, 0x53, 0x70, 0x84,
	0x0e, 0x80, 0xd3, 0x59, 0x0e, 0x69, 0x14, 0x0c, 0x83, 0x51, 0x97, 0xac, 0x4c, 0x7c, 0x81, 0xba,
	0x34, 0x49, 0x44, 0xc9, 0x8d, 0x8e, 0x5a, 0xc3, 0xf6, 0xa8, 0x77, 0x79, 0x54, 0x95, 0x39, 0xaf,
	0x4a, 0xfc, 0x5c, 0x39, 0xc9, 0x3a, 0x0a, 0x7f, 0x83, 0x06, 0x52, 0xb1, 0x82, 0xaa, 0xa5, 0xf7,
	0x45, 0xed, 0x61, 0x30, 0x0a, 0xc9, 0x06, 0x8a, 0x6f, 0xd0, 0x60, 0x46, 0x17, 0xa0, 0x96, 0xb7,
	0xf0, 0x2f, 0x2d, 0x73, 0xa3, 0xa3, 0xbd, 0x61, 0x30, 0xea, 0x5d, 0x7e, 0xd1, 0xa8, 0x7f, 0xdd,
	0x08, 0x21, 0x1b, 0x29, 0xf1, 0xbb, 0x16, 0xea, 0x37, 0x88, 0x60, 0x8c, 0xf6, 0x38, 0x2d, 0xc0,
	0xf5, 0x11, 0x12, 0xf7, 0x8f, 0x7f, 0x44, 0x91, 0x82, 0xff, 0x4a, 0xa6, 0x20, 0xbd, 0x57, 0xa2,
	0x94, 0xbf, 0x41, 0x31, 0x03, 0xa5, 0xe7, 0x4c, 0xea, 0xa8, 0x3d, 0x6c, 0x8f, 0x42, 0xb2, 0xd3,
	0x8f, 0xaf, 0x50, 0xaf, 0x36, 0x42, 0xcf, 0x11, 0x7b, 0x8e, 0xd3, 0x67, 0x0f, 0xa9, 0x87, 0xd9,
	0x81, 0x4a, 0x25, 0x1e, 0x20, 0x31, 0xd1, 0xbe, 0x23, 0xb2, 0x32, 0xf1, 0x09, 0xea, 0x3e, 0x68,
	0xc1, 0xa7, 0xd4, 0xcc, 0xa3, 0x8e, 0x73, 0xad, 0x6d, 0x3c, 0x44, 0x3d, 0x9a, 0xcb, 0x39, 0xfd,
	0x95, 0x69, 0x03, 0x69, 0x74, 0xe0, 0xa4, 0xa8, 0x43, 0xf8, 0x14, 0xf5, 0x59, 0x41, 0x33, 0xab,
	0x9c, 0xad, 0xa6, 0xa3, 0xae, 0xa3, 0xdf, 0x04, 0xf1, 0x19, 0xea, 0x24, 0x82, 0xeb, 0x32, 0x8f,
	0x42, 0x47, 0xb7, 0xef, 0xe9, 0xde, 0x38, 0x90, 0x78, 0xa7, 0x25, 0xa9, 0x20, 0x73, 0x6d, 0x21,
	0x57, 0x66, 0x65, 0xe2, 0x18, 0x7d, 0x54, 0x6a, 0x50, 0xb7, 0xd4, 0xd0, 0x3b, 0x96, 0x43, 0xd4,
	0x73, 0x44, 0x1b, 0x58, 0xfc, 0x3e, 0x40, 0x47, 0xdb, 0x34, 0xb2, 0xc9, 0x06, 0x0a, 0x99, 0x53,
	0x03, 0x2e, 0xb9, 0x52, 0xa2, 0x81, 0xe1, 0x9f, 0x10, 0x9a, 0x51, 0x0d, 0x13, 0x4b, 0x7b, 0xb5,
	0x58, 0x5f, 0x6f, 0x08, 0xef, 0xdd, 0xbf, 0x83, 0x31, 0x8c, 0x67, 0x9a, 0xd4, 0x32, 0xac, 0xca,
	0x4f, 0x82, 0x83, 0x5f, 0x2d, 0xf7, 0x6f, 0xdb, 0xe1, 0x60, 0xfe, 0x17, 0x6a, 0xe1, 0x54, 0x0a,
	0xc9, 0xca, 0xb4, 0x53, 0x2b, 0x35, 0x4c, 0xb8, 0x01, 0xc5, 0x69, 0x3e, 0x91, 0x4e, 0x93, 0x2e,
	0x69, 0x82, 0xf8, 0x3b, 0xf4, 0x89, 0x4f, 0xf0, 0x83, 0x9c, 0xa4, 0x5e, 0xa1, 0x17, 0x78, 0xfc,
	0x3a, 0x40, 0x9f, 0xef, 0xe0, 0x89, 0xaf, 0x50, 0xb8, 0x66, 0xea, 0x9a, 0xef, 0x5d, 0x1e, 0x6f,
	0x6f, 0x8d, 0x3c, 0x07, 0xe2, 0x3f, 0xd1, 0xf1, 0x23, 0x53, 0xa6, 0xa4, 0x39, 0x7b, 0xa2, 0x86,
	0x09, 0xbe, 0xaa, 0x17, 0xb5, 0x5c, 0x89, 0xaf, 0x7c, 0x89, 0xbf, 0xb6, 0x06, 0x91, 0x1d, 0xc9,
	0xf1, 0x9b, 0x00, 0x7d, 0xbc, 0x71, 0x2a, 0x1e, 0xa0, 0x16, 0x4b, 0xbd, 0x2c, 0x2d, 0x96, 0xda,
	0xc6, 0xf5, 0x5c, 0x28, 0x73, 0x0b, 0x3a, 0x51, 0x4c, 0xda, 0x7c, 0x77, 0x68, 0x48, 0x5e, 0xe0,
	0xf8, 0x02, 0x7d, 0x9a, 0x82, 0xa1, 0x2c, 0x87, 0xb4, 0x1e, 0x5e, 0xe9, 0xb0, 0xcd, 0x65, 0x97,
	0x5a, 0xd2, 0x64, 0x41, 0x33, 0xf8, 0x63, 0x29, 0xc1, 0x4b, 0x53, 0x87, 0x6c, 0x84, 0xdb, 0xdf,
	0x3b, 0x5a, 0xb0, 0x7c, 0xe9, 0xc5, 0xa9, 0x43, 0xf1, 0x1c, 0x1d, 0x6f, 0xef, 0xdb, 0xe6, 0x6a,
	0x51, 0xaa, 0xa4, 0x36, 0xee, 0x90, 0xd4, 0x21, 0xfc, 0x3d, 0x3a, 0xac, 0x99, 0xfe, 0x8c, 0xaa,
	0xbd, 0x97, 0x8e, 0xf8, 0x55, 0x80, 0x3a, 0x37, 0xeb, 0xeb, 0xb1, 0xe3, 0x51, 0x3c, 0x45, 0x7d,
	0x9a, 0x01, 0x37, 0xbf, 0xf0, 0x54, 0x0a, 0xc6, 0x8d, 0x2f, 0xd7, 0x04, 0xf1, 0x97, 0x28, 0x74,
	0xc0, 0x54, 0xa8, 0xea, 0x0d, 0xdc, 0x27, 0xcf, 0x80, 0x25, 0x9e, 0x52, 0x43, 0x13, 0xb0, 0x0b,
	0x68, 0xdf, 0x15, 0x7b, 0x01, 0xeb, 0xd0, 0xf5, 0xb7, 0x7f, 0x9f, 0x65, 0xcc, 0xcc, 0xcb, 0xd9,
	0x79, 0x22, 0x8a, 0xb1, 0x96, 0x8c, 0x73, 0x7b, 0xd1, 0xc6, 0x8b, 0x1c, 0xa8, 0x19, 0x53, 0xc9,
	0xc6, 0x49, 0xce, 0x80, 0x9b, 0x59, 0xc7, 0x6d, 0xc6, 0x0f, 0x1f, 0x02, 0x00, 0x00, 0xff, 0xff,
	0xbc, 0x82, 0x47, 0x4b, 0x0a, 0x06, 0x00, 0x00,
}
