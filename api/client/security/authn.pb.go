// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.2
// source: security/authn.proto

package security

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Supported OAuth 2.0 providers.
type OAuth2_OAuth2Provider int32

const (
	// Other OAuth 2.0 provider.
	OAuth2_other OAuth2_OAuth2Provider = 0
	// Azure OAuth 2.0 provider.
	OAuth2_azure OAuth2_OAuth2Provider = 1
	// Github OAuth 2.0 provider.
	OAuth2_github OAuth2_OAuth2Provider = 2
	// Oracle OAuth 2.0 provider.
	OAuth2_oracle OAuth2_OAuth2Provider = 3
	// Google OAuth 2.0 provider.
	OAuth2_google OAuth2_OAuth2Provider = 4
)

// Enum value maps for OAuth2_OAuth2Provider.
var (
	OAuth2_OAuth2Provider_name = map[int32]string{
		0: "other",
		1: "azure",
		2: "github",
		3: "oracle",
		4: "google",
	}
	OAuth2_OAuth2Provider_value = map[string]int32{
		"other":  0,
		"azure":  1,
		"github": 2,
		"oracle": 3,
		"google": 4,
	}
)

func (x OAuth2_OAuth2Provider) Enum() *OAuth2_OAuth2Provider {
	p := new(OAuth2_OAuth2Provider)
	*p = x
	return p
}

func (x OAuth2_OAuth2Provider) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OAuth2_OAuth2Provider) Descriptor() protoreflect.EnumDescriptor {
	return file_security_authn_proto_enumTypes[0].Descriptor()
}

func (OAuth2_OAuth2Provider) Type() protoreflect.EnumType {
	return &file_security_authn_proto_enumTypes[0]
}

func (x OAuth2_OAuth2Provider) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OAuth2_OAuth2Provider.Descriptor instead.
func (OAuth2_OAuth2Provider) EnumDescriptor() ([]byte, []int) {
	return file_security_authn_proto_rawDescGZIP(), []int{1, 0}
}

// Methods to transmit authentication tokens to an OAuth 2.0 provider.
type OAuth2Client_AuthenticationScheme int32

const (
	// Token is sent in the request header.
	OAuth2Client_header OAuth2Client_AuthenticationScheme = 0
	// Token is sent as a query parameter.
	OAuth2Client_query OAuth2Client_AuthenticationScheme = 1
	// Token is sent in the form body.
	OAuth2Client_form OAuth2Client_AuthenticationScheme = 2
	// Token is not sent at all.
	OAuth2Client_none OAuth2Client_AuthenticationScheme = 3
)

// Enum value maps for OAuth2Client_AuthenticationScheme.
var (
	OAuth2Client_AuthenticationScheme_name = map[int32]string{
		0: "header",
		1: "query",
		2: "form",
		3: "none",
	}
	OAuth2Client_AuthenticationScheme_value = map[string]int32{
		"header": 0,
		"query":  1,
		"form":   2,
		"none":   3,
	}
)

func (x OAuth2Client_AuthenticationScheme) Enum() *OAuth2Client_AuthenticationScheme {
	p := new(OAuth2Client_AuthenticationScheme)
	*p = x
	return p
}

func (x OAuth2Client_AuthenticationScheme) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OAuth2Client_AuthenticationScheme) Descriptor() protoreflect.EnumDescriptor {
	return file_security_authn_proto_enumTypes[1].Descriptor()
}

func (OAuth2Client_AuthenticationScheme) Type() protoreflect.EnumType {
	return &file_security_authn_proto_enumTypes[1]
}

func (x OAuth2Client_AuthenticationScheme) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OAuth2Client_AuthenticationScheme.Descriptor instead.
func (OAuth2Client_AuthenticationScheme) EnumDescriptor() ([]byte, []int) {
	return file_security_authn_proto_rawDescGZIP(), []int{2, 0}
}

// Configuration of how users authenticate against Spinnaker.
type Authentication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether to enabled authentication.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// OAuth 2.0 configuration.
	Oauth2 *OAuth2 `protobuf:"bytes,2,opt,name=oauth2,proto3" json:"oauth2,omitempty"`
	// SAML configuration.
	Saml *Saml `protobuf:"bytes,3,opt,name=saml,proto3" json:"saml,omitempty"`
	// LDAP configuration.
	Ldap *Ldap `protobuf:"bytes,4,opt,name=ldap,proto3" json:"ldap,omitempty"`
	// X509 configuration.
	X509 *X509 `protobuf:"bytes,5,opt,name=x509,proto3" json:"x509,omitempty"`
	// Google Cloud Identity-Aware Proxy configuration.
	Iap *Iap `protobuf:"bytes,6,opt,name=iap,proto3" json:"iap,omitempty"`
}

func (x *Authentication) Reset() {
	*x = Authentication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_security_authn_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Authentication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Authentication) ProtoMessage() {}

func (x *Authentication) ProtoReflect() protoreflect.Message {
	mi := &file_security_authn_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Authentication.ProtoReflect.Descriptor instead.
func (*Authentication) Descriptor() ([]byte, []int) {
	return file_security_authn_proto_rawDescGZIP(), []int{0}
}

func (x *Authentication) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Authentication) GetOauth2() *OAuth2 {
	if x != nil {
		return x.Oauth2
	}
	return nil
}

func (x *Authentication) GetSaml() *Saml {
	if x != nil {
		return x.Saml
	}
	return nil
}

func (x *Authentication) GetLdap() *Ldap {
	if x != nil {
		return x.Ldap
	}
	return nil
}

func (x *Authentication) GetX509() *X509 {
	if x != nil {
		return x.X509
	}
	return nil
}

func (x *Authentication) GetIap() *Iap {
	if x != nil {
		return x.Iap
	}
	return nil
}

// Configuration for authentication via OAuth 2.0.
type OAuth2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether the authentication method is enabled.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Configuration for your OAuth 2.0 client.
	Client *OAuth2Client `protobuf:"bytes,2,opt,name=client,proto3" json:"client,omitempty"`
	// The map of requirements the userInfo request must have. This is used to
	// restrict user login to specific domains or having a specific attribute.
	UserInfoRequirements map[string]string `protobuf:"bytes,3,rep,name=userInfoRequirements,proto3" json:"userInfoRequirements,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Configuration for OAuth 2.0 resources.
	Resource *OAuth2Resource `protobuf:"bytes,4,opt,name=resource,proto3" json:"resource,omitempty"`
	// Mapping of user attributes to fields returned by your OAuth 2.0 provider.
	// This field controls how the fields returned from the OAuth 2.0 provider's user
	// info endpoint are translated into a Spinnaker user.
	UserInfoMapping *OAuth2UserInfoMapping `protobuf:"bytes,5,opt,name=userInfoMapping,proto3" json:"userInfoMapping,omitempty"`
	// The OAuth 2.0 provider handling authentication.
	Provider OAuth2_OAuth2Provider `protobuf:"varint,6,opt,name=provider,proto3,enum=proto.security.OAuth2_OAuth2Provider" json:"provider,omitempty"`
}

func (x *OAuth2) Reset() {
	*x = OAuth2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_security_authn_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OAuth2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OAuth2) ProtoMessage() {}

func (x *OAuth2) ProtoReflect() protoreflect.Message {
	mi := &file_security_authn_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OAuth2.ProtoReflect.Descriptor instead.
func (*OAuth2) Descriptor() ([]byte, []int) {
	return file_security_authn_proto_rawDescGZIP(), []int{1}
}

func (x *OAuth2) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *OAuth2) GetClient() *OAuth2Client {
	if x != nil {
		return x.Client
	}
	return nil
}

func (x *OAuth2) GetUserInfoRequirements() map[string]string {
	if x != nil {
		return x.UserInfoRequirements
	}
	return nil
}

func (x *OAuth2) GetResource() *OAuth2Resource {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *OAuth2) GetUserInfoMapping() *OAuth2UserInfoMapping {
	if x != nil {
		return x.UserInfoMapping
	}
	return nil
}

func (x *OAuth2) GetProvider() OAuth2_OAuth2Provider {
	if x != nil {
		return x.Provider
	}
	return OAuth2_other
}

// Configuration for an OAuth 2.0 client.
type OAuth2Client struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The OAuth client ID you have configured with your OAuth 2.0 provider.
	ClientId string `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"`
	// The OAuth client secret you have configured with your OAuth provider.
	ClientSecret string `protobuf:"bytes,2,opt,name=clientSecret,proto3" json:"clientSecret,omitempty"`
	// The access token uri for your OAuth provider.
	AccessTokenUri string `protobuf:"bytes,3,opt,name=accessTokenUri,proto3" json:"accessTokenUri,omitempty"`
	// The user authorization uri for your OAuth 2.0 provider.
	UserAuthorizationUri string `protobuf:"bytes,4,opt,name=userAuthorizationUri,proto3" json:"userAuthorizationUri,omitempty"`
	// The method used to transmit authentication credentials to your OAuth 2.0
	// provider.
	ClientAuthenticationScheme OAuth2Client_AuthenticationScheme `protobuf:"varint,5,opt,name=clientAuthenticationScheme,proto3,enum=proto.security.OAuth2Client_AuthenticationScheme" json:"clientAuthenticationScheme,omitempty"`
	// The scope to request when obtaining an access token from your OAuth 2.0 provider.
	Scope string `protobuf:"bytes,6,opt,name=scope,proto3" json:"scope,omitempty"`
	// The externally accessible URL for Gate. For use with load balancers that do
	// any kind of address manipulation for Gate traffic, such as an SSL terminating
	// load balancer.
	PreEstablishedRedirectUri string `protobuf:"bytes,7,opt,name=preEstablishedRedirectUri,proto3" json:"preEstablishedRedirectUri,omitempty"`
	// Whether the current URI in the request should be preferred over the pre-established
	// redirect URI.
	UseCurrentUri bool `protobuf:"varint,8,opt,name=useCurrentUri,proto3" json:"useCurrentUri,omitempty"`
}

func (x *OAuth2Client) Reset() {
	*x = OAuth2Client{}
	if protoimpl.UnsafeEnabled {
		mi := &file_security_authn_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OAuth2Client) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OAuth2Client) ProtoMessage() {}

func (x *OAuth2Client) ProtoReflect() protoreflect.Message {
	mi := &file_security_authn_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OAuth2Client.ProtoReflect.Descriptor instead.
func (*OAuth2Client) Descriptor() ([]byte, []int) {
	return file_security_authn_proto_rawDescGZIP(), []int{2}
}

func (x *OAuth2Client) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *OAuth2Client) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *OAuth2Client) GetAccessTokenUri() string {
	if x != nil {
		return x.AccessTokenUri
	}
	return ""
}

func (x *OAuth2Client) GetUserAuthorizationUri() string {
	if x != nil {
		return x.UserAuthorizationUri
	}
	return ""
}

func (x *OAuth2Client) GetClientAuthenticationScheme() OAuth2Client_AuthenticationScheme {
	if x != nil {
		return x.ClientAuthenticationScheme
	}
	return OAuth2Client_header
}

func (x *OAuth2Client) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *OAuth2Client) GetPreEstablishedRedirectUri() string {
	if x != nil {
		return x.PreEstablishedRedirectUri
	}
	return ""
}

func (x *OAuth2Client) GetUseCurrentUri() bool {
	if x != nil {
		return x.UseCurrentUri
	}
	return false
}

// Configuration for OAuth 2.0 resources.
type OAuth2Resource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user info URI for your OAuth 2.0 provider.
	UserInfoUri string `protobuf:"bytes,1,opt,name=userInfoUri,proto3" json:"userInfoUri,omitempty"`
}

func (x *OAuth2Resource) Reset() {
	*x = OAuth2Resource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_security_authn_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OAuth2Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OAuth2Resource) ProtoMessage() {}

func (x *OAuth2Resource) ProtoReflect() protoreflect.Message {
	mi := &file_security_authn_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OAuth2Resource.ProtoReflect.Descriptor instead.
func (*OAuth2Resource) Descriptor() ([]byte, []int) {
	return file_security_authn_proto_rawDescGZIP(), []int{3}
}

func (x *OAuth2Resource) GetUserInfoUri() string {
	if x != nil {
		return x.UserInfoUri
	}
	return ""
}

// Mapping of user attributes to fields returned by an OAuth 2.0 provider.
// This field controls how the fields returned from the OAuth 2.0 provider's user
// info endpoint are translated into a Spinnaker user.
type OAuth2UserInfoMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Email.
	Email string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	// First name.
	FirstName string `protobuf:"bytes,2,opt,name=firstName,proto3" json:"firstName,omitempty"`
	// Last name.
	LastName string `protobuf:"bytes,3,opt,name=lastName,proto3" json:"lastName,omitempty"`
	// Username.
	Username string `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *OAuth2UserInfoMapping) Reset() {
	*x = OAuth2UserInfoMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_security_authn_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OAuth2UserInfoMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OAuth2UserInfoMapping) ProtoMessage() {}

func (x *OAuth2UserInfoMapping) ProtoReflect() protoreflect.Message {
	mi := &file_security_authn_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OAuth2UserInfoMapping.ProtoReflect.Descriptor instead.
func (*OAuth2UserInfoMapping) Descriptor() ([]byte, []int) {
	return file_security_authn_proto_rawDescGZIP(), []int{4}
}

func (x *OAuth2UserInfoMapping) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *OAuth2UserInfoMapping) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *OAuth2UserInfoMapping) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *OAuth2UserInfoMapping) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

// Configuration for authentication via SAML.
// SAML authenticates users by passing cryptographically signed XML documents
// between the Gate server and an identity provider. Gate's key is stored and
// accessed via the -keystore parameters, while the identity provider's keys are
// included in the metadata.xml. Finally, the identity provider must redirect the
// control flow (through the user's browser) back to Gate by way of the
// -serviceAddressUrl. This is likely the address of Gate's load balancer.
type Saml struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether the authentication method is enabled.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// The path to a local file containing your identity provider's metadata XML file.
	MetadataLocal string `protobuf:"bytes,2,opt,name=metadataLocal,proto3" json:"metadataLocal,omitempty"`
	// The URL pointing to  your identity provider's metadata XML file.
	MetadataRemote string `protobuf:"bytes,3,opt,name=metadataRemote,proto3" json:"metadataRemote,omitempty"`
	// The identity of the Spinnaker application registered with the SAML provider.
	IssuerId string `protobuf:"bytes,4,opt,name=issuerId,proto3" json:"issuerId,omitempty"`
	// Path to the keystore that contains this server's private key. This key is
	// used to cryptographically sign SAML AuthNRequest objects.
	KeyStore string `protobuf:"bytes,5,opt,name=keyStore,proto3" json:"keyStore,omitempty"`
	// The password used to access the file specified in -keystore.
	KeyStorePassword string `protobuf:"bytes,6,opt,name=keyStorePassword,proto3" json:"keyStorePassword,omitempty"`
	// The name of the alias under which this server's private key is stored in
	// the -keystore file.
	KeyStoreAliasName string `protobuf:"bytes,7,opt,name=keyStoreAliasName,proto3" json:"keyStoreAliasName,omitempty"`
	// The address of the Gate server that will be accesible by the SAML identity
	// provider. This should be the full URL, including port, e.g. https://gate.org.com:8084/.
	// If deployed behind a load balancer, this would be the load balancer's address.
	ServiceAddress string `protobuf:"bytes,8,opt,name=serviceAddress,proto3" json:"serviceAddress,omitempty"`
	// Configuration for fields returned from your SAML provider.
	UserAttributeMapping *Saml_UserAttributes `protobuf:"bytes,9,opt,name=userAttributeMapping,proto3" json:"userAttributeMapping,omitempty"`
}

func (x *Saml) Reset() {
	*x = Saml{}
	if protoimpl.UnsafeEnabled {
		mi := &file_security_authn_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Saml) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Saml) ProtoMessage() {}

func (x *Saml) ProtoReflect() protoreflect.Message {
	mi := &file_security_authn_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Saml.ProtoReflect.Descriptor instead.
func (*Saml) Descriptor() ([]byte, []int) {
	return file_security_authn_proto_rawDescGZIP(), []int{5}
}

func (x *Saml) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Saml) GetMetadataLocal() string {
	if x != nil {
		return x.MetadataLocal
	}
	return ""
}

func (x *Saml) GetMetadataRemote() string {
	if x != nil {
		return x.MetadataRemote
	}
	return ""
}

func (x *Saml) GetIssuerId() string {
	if x != nil {
		return x.IssuerId
	}
	return ""
}

func (x *Saml) GetKeyStore() string {
	if x != nil {
		return x.KeyStore
	}
	return ""
}

func (x *Saml) GetKeyStorePassword() string {
	if x != nil {
		return x.KeyStorePassword
	}
	return ""
}

func (x *Saml) GetKeyStoreAliasName() string {
	if x != nil {
		return x.KeyStoreAliasName
	}
	return ""
}

func (x *Saml) GetServiceAddress() string {
	if x != nil {
		return x.ServiceAddress
	}
	return ""
}

func (x *Saml) GetUserAttributeMapping() *Saml_UserAttributes {
	if x != nil {
		return x.UserAttributeMapping
	}
	return nil
}

// Configuration for authentication via LDAP.
// Lightweight Directory Access Protocol (LDAP) is a standard way many organizations
// maintain user credentials and group memberships. Spinnaker uses the standard
// 'bind' approach for user authentication. This is a fancy way of saying that
// Gate uses your username and password to login to the LDAP server, and if the
// connection is successful, you're considered authenticated.
type Ldap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether the authentication method is enabled.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// ldap:// or ldaps:// url of the LDAP server.
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	// The pattern for finding a user's DN using simple pattern matching. For example,
	// if your LDAP server has the URL ldap://mysite.com/dc=spinnaker,dc=org, and
	// you have the pattern 'uid={0},ou=members', 'me' will map to a DN
	// uid=me,ou=members,dc=spinnaker,dc=org. If no match is found, will try to
	// find the user using user-search-filter, if set.
	UserDnPattern string `protobuf:"bytes,3,opt,name=userDnPattern,proto3" json:"userDnPattern,omitempty"`
	// The part of the directory tree under which user searches should be performed.
	// If user-search-base isn't supplied, the search will be performed from the root.
	UserSearchBase string `protobuf:"bytes,4,opt,name=userSearchBase,proto3" json:"userSearchBase,omitempty"`
	// The filter to use when searching for a user's DN. Will search either from
	// user-search-base (if specified) or root for entires matching the filter, then
	// attempt to bind as that user with the login password. For example, the filter
	// 'uid={0}' would apply to any user where uid matched the user's login name. If
	// -user-dn-pattern is also specified, will attempt to find a match using the
	// specified pattern first, before searching with the specified search filter
	// if no match is found from the pattern.
	UserSearchFilter string `protobuf:"bytes,5,opt,name=userSearchFilter,proto3" json:"userSearchFilter,omitempty"`
	// An LDAP manager user is required for binding to the LDAP server for the user
	// authentication process. This property refers to the DN of that entry. I.e.
	// this is not the user which will be authenticated when logging into DHIS2,
	// rather the user which binds to the LDAP server in order to do the authentication.
	ManagerDn string `protobuf:"bytes,6,opt,name=managerDn,proto3" json:"managerDn,omitempty"`
	// The password for the LDAP manager user.
	ManagerPassword string `protobuf:"bytes,7,opt,name=managerPassword,proto3" json:"managerPassword,omitempty"`
	// The part of the directory tree under which group searches should be performed.
	GroupSearchBase string `protobuf:"bytes,8,opt,name=groupSearchBase,proto3" json:"groupSearchBase,omitempty"`
}

func (x *Ldap) Reset() {
	*x = Ldap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_security_authn_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ldap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ldap) ProtoMessage() {}

func (x *Ldap) ProtoReflect() protoreflect.Message {
	mi := &file_security_authn_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ldap.ProtoReflect.Descriptor instead.
func (*Ldap) Descriptor() ([]byte, []int) {
	return file_security_authn_proto_rawDescGZIP(), []int{6}
}

func (x *Ldap) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Ldap) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Ldap) GetUserDnPattern() string {
	if x != nil {
		return x.UserDnPattern
	}
	return ""
}

func (x *Ldap) GetUserSearchBase() string {
	if x != nil {
		return x.UserSearchBase
	}
	return ""
}

func (x *Ldap) GetUserSearchFilter() string {
	if x != nil {
		return x.UserSearchFilter
	}
	return ""
}

func (x *Ldap) GetManagerDn() string {
	if x != nil {
		return x.ManagerDn
	}
	return ""
}

func (x *Ldap) GetManagerPassword() string {
	if x != nil {
		return x.ManagerPassword
	}
	return ""
}

func (x *Ldap) GetGroupSearchBase() string {
	if x != nil {
		return x.GroupSearchBase
	}
	return ""
}

// Configuration for authentication via X509 certificates.
// X509 authenticates users via client certificate and a corresponding private key.
// These certificates optionally provide authorization information via custom OIDs
// with corresponding group information for the user. This can be configured via -roleOid.
type X509 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether the authentication method is enabled.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// The OID that encodes roles that the user specified in the x509 certificate
	// belongs to.
	RoleOid string `protobuf:"bytes,2,opt,name=roleOid,proto3" json:"roleOid,omitempty"`
	// The regex used to parse the subject principal name embedded in the x509
	// certificate if necessary.
	SubjectPrincipalRegex string `protobuf:"bytes,3,opt,name=subjectPrincipalRegex,proto3" json:"subjectPrincipalRegex,omitempty"`
}

func (x *X509) Reset() {
	*x = X509{}
	if protoimpl.UnsafeEnabled {
		mi := &file_security_authn_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *X509) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*X509) ProtoMessage() {}

func (x *X509) ProtoReflect() protoreflect.Message {
	mi := &file_security_authn_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use X509.ProtoReflect.Descriptor instead.
func (*X509) Descriptor() ([]byte, []int) {
	return file_security_authn_proto_rawDescGZIP(), []int{7}
}

func (x *X509) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *X509) GetRoleOid() string {
	if x != nil {
		return x.RoleOid
	}
	return ""
}

func (x *X509) GetSubjectPrincipalRegex() string {
	if x != nil {
		return x.SubjectPrincipalRegex
	}
	return ""
}

// Configuration for authentication via Google Cloud Identity-Aware Proxy.
// Google Cloud Identity-Aware Proxy (IAP) is an authentication model that utilizes
// Google OAuth 2.0 and an authorization service to provide access control for users
// of GCP. After a user has been authenticated and authorized by IAP's service, a
// JWT token is passed along which Spinnaker uses to check for authenticity and to
// get the user email from the payload and sign the user in. To configure IAP, set
// the audience field retrieved from the IAP console.
type Iap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether the authentication method is enabled.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// The HTTP request header that contains the JWT token.
	JwtHeader string `protobuf:"bytes,2,opt,name=jwtHeader,proto3" json:"jwtHeader,omitempty"`
	// The Issuer from the ID token payload.
	IssuerId string `protobuf:"bytes,3,opt,name=issuerId,proto3" json:"issuerId,omitempty"`
	// The Audience from the ID token payload. You can retrieve this field from the
	// IAP console: https://cloud.google.com/iap/docs/signed-headers-howto#verify_the_id_token_header.
	Audience string `protobuf:"bytes,4,opt,name=audience,proto3" json:"audience,omitempty"`
	// The URL containing the Cloud IAP public keys in JWK format.
	IapVerifyKeyUrl string `protobuf:"bytes,5,opt,name=iapVerifyKeyUrl,proto3" json:"iapVerifyKeyUrl,omitempty"`
}

func (x *Iap) Reset() {
	*x = Iap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_security_authn_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Iap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Iap) ProtoMessage() {}

func (x *Iap) ProtoReflect() protoreflect.Message {
	mi := &file_security_authn_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Iap.ProtoReflect.Descriptor instead.
func (*Iap) Descriptor() ([]byte, []int) {
	return file_security_authn_proto_rawDescGZIP(), []int{8}
}

func (x *Iap) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Iap) GetJwtHeader() string {
	if x != nil {
		return x.JwtHeader
	}
	return ""
}

func (x *Iap) GetIssuerId() string {
	if x != nil {
		return x.IssuerId
	}
	return ""
}

func (x *Iap) GetAudience() string {
	if x != nil {
		return x.Audience
	}
	return ""
}

func (x *Iap) GetIapVerifyKeyUrl() string {
	if x != nil {
		return x.IapVerifyKeyUrl
	}
	return ""
}

// Configuration for fields returned from your SAML provider.
type Saml_UserAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// First name.
	FirstName string `protobuf:"bytes,1,opt,name=firstName,proto3" json:"firstName,omitempty"`
	// Last name.
	LastName string `protobuf:"bytes,2,opt,name=lastName,proto3" json:"lastName,omitempty"`
	// Roles.
	Roles string `protobuf:"bytes,3,opt,name=roles,proto3" json:"roles,omitempty"`
	// Roles delimiter.
	RolesDelimiter string `protobuf:"bytes,4,opt,name=rolesDelimiter,proto3" json:"rolesDelimiter,omitempty"`
	// Username.
	Username string `protobuf:"bytes,5,opt,name=username,proto3" json:"username,omitempty"`
	// Email.
	Email string `protobuf:"bytes,6,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *Saml_UserAttributes) Reset() {
	*x = Saml_UserAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_security_authn_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Saml_UserAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Saml_UserAttributes) ProtoMessage() {}

func (x *Saml_UserAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_security_authn_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Saml_UserAttributes.ProtoReflect.Descriptor instead.
func (*Saml_UserAttributes) Descriptor() ([]byte, []int) {
	return file_security_authn_proto_rawDescGZIP(), []int{5, 0}
}

func (x *Saml_UserAttributes) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *Saml_UserAttributes) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *Saml_UserAttributes) GetRoles() string {
	if x != nil {
		return x.Roles
	}
	return ""
}

func (x *Saml_UserAttributes) GetRolesDelimiter() string {
	if x != nil {
		return x.RolesDelimiter
	}
	return ""
}

func (x *Saml_UserAttributes) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Saml_UserAttributes) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

var File_security_authn_proto protoreflect.FileDescriptor

var file_security_authn_proto_rawDesc = []byte{
	0x0a, 0x14, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x22, 0xff, 0x01, 0x0a, 0x0e, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x06, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x32, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x2e, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x52, 0x06, 0x6f, 0x61, 0x75,
	0x74, 0x68, 0x32, 0x12, 0x28, 0x0a, 0x04, 0x73, 0x61, 0x6d, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x2e, 0x53, 0x61, 0x6d, 0x6c, 0x52, 0x04, 0x73, 0x61, 0x6d, 0x6c, 0x12, 0x28, 0x0a,
	0x04, 0x6c, 0x64, 0x61, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x4c, 0x64, 0x61,
	0x70, 0x52, 0x04, 0x6c, 0x64, 0x61, 0x70, 0x12, 0x28, 0x0a, 0x04, 0x78, 0x35, 0x30, 0x39, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x58, 0x35, 0x30, 0x39, 0x52, 0x04, 0x78, 0x35, 0x30,
	0x39, 0x12, 0x25, 0x0a, 0x03, 0x69, 0x61, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e,
	0x49, 0x61, 0x70, 0x52, 0x03, 0x69, 0x61, 0x70, 0x22, 0xa3, 0x04, 0x0a, 0x06, 0x4f, 0x41, 0x75,
	0x74, 0x68, 0x32, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x34, 0x0a,
	0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x4f,
	0x41, 0x75, 0x74, 0x68, 0x32, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x12, 0x64, 0x0a, 0x14, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x2e, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x14, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x4f, 0x41, 0x75,
	0x74, 0x68, 0x32, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e,
	0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x41, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32,
	0x2e, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x1a, 0x47, 0x0a, 0x19, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x4a, 0x0a, 0x0e, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x12, 0x09, 0x0a, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65,
	0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x10, 0x04, 0x22, 0xda,
	0x03, 0x0a, 0x0c, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12,
	0x26, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x72,
	0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x72, 0x69, 0x12, 0x32, 0x0a, 0x14, 0x75, 0x73, 0x65, 0x72, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72, 0x69, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x75, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72, 0x69, 0x12, 0x71, 0x0a, 0x1a, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x2e, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x65, 0x52, 0x1a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x19, 0x70, 0x72, 0x65, 0x45, 0x73, 0x74, 0x61, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72,
	0x69, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x70, 0x72, 0x65, 0x45, 0x73, 0x74, 0x61,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55,
	0x72, 0x69, 0x12, 0x24, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x55, 0x72, 0x69, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x72, 0x69, 0x22, 0x41, 0x0a, 0x14, 0x41, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65,
	0x12, 0x0a, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x66, 0x6f, 0x72, 0x6d, 0x10,
	0x02, 0x12, 0x08, 0x0a, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x10, 0x03, 0x22, 0x32, 0x0a, 0x0e, 0x4f,
	0x41, 0x75, 0x74, 0x68, 0x32, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x55, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x55, 0x72, 0x69, 0x22,
	0x83, 0x01, 0x0a, 0x15, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x1c, 0x0a, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xbe, 0x04, 0x0a, 0x04, 0x53, 0x61, 0x6d, 0x6c, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x26,
	0x0a, 0x0e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x2a,
	0x0a, 0x10, 0x6b, 0x65, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6b, 0x65, 0x79, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x6b, 0x65,
	0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6b, 0x65, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x41,
	0x6c, 0x69, 0x61, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x57, 0x0a, 0x14, 0x75, 0x73, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e,
	0x53, 0x61, 0x6d, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x52, 0x14, 0x75, 0x73, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x1a, 0xba, 0x01, 0x0a, 0x0e, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e,
	0x72, 0x6f, 0x6c, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x9e, 0x02, 0x0a, 0x04, 0x4c, 0x64, 0x61, 0x70, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x75,
	0x73, 0x65, 0x72, 0x44, 0x6e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x44, 0x6e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42,
	0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x61, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x75, 0x73, 0x65,
	0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x75, 0x73, 0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x44, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x44, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x28, 0x0a,
	0x0f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x61, 0x73, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x42, 0x61, 0x73, 0x65, 0x22, 0x70, 0x0a, 0x04, 0x58, 0x35, 0x30, 0x39, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x6f, 0x6c,
	0x65, 0x4f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x6c, 0x65,
	0x4f, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x72,
	0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x52, 0x65, 0x67, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x72, 0x69, 0x6e, 0x63,
	0x69, 0x70, 0x61, 0x6c, 0x52, 0x65, 0x67, 0x65, 0x78, 0x22, 0x9f, 0x01, 0x0a, 0x03, 0x49, 0x61,
	0x70, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6a,
	0x77, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6a, 0x77, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x61, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4b, 0x65,
	0x79, 0x55, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x61, 0x70, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x4b, 0x65, 0x79, 0x55, 0x72, 0x6c, 0x42, 0x30, 0x5a, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x70, 0x69, 0x6e, 0x6e, 0x61,
	0x6b, 0x65, 0x72, 0x2f, 0x6b, 0x6c, 0x65, 0x61, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_security_authn_proto_rawDescOnce sync.Once
	file_security_authn_proto_rawDescData = file_security_authn_proto_rawDesc
)

func file_security_authn_proto_rawDescGZIP() []byte {
	file_security_authn_proto_rawDescOnce.Do(func() {
		file_security_authn_proto_rawDescData = protoimpl.X.CompressGZIP(file_security_authn_proto_rawDescData)
	})
	return file_security_authn_proto_rawDescData
}

var file_security_authn_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_security_authn_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_security_authn_proto_goTypes = []interface{}{
	(OAuth2_OAuth2Provider)(0),             // 0: proto.security.OAuth2.OAuth2Provider
	(OAuth2Client_AuthenticationScheme)(0), // 1: proto.security.OAuth2Client.AuthenticationScheme
	(*Authentication)(nil),                 // 2: proto.security.Authentication
	(*OAuth2)(nil),                         // 3: proto.security.OAuth2
	(*OAuth2Client)(nil),                   // 4: proto.security.OAuth2Client
	(*OAuth2Resource)(nil),                 // 5: proto.security.OAuth2Resource
	(*OAuth2UserInfoMapping)(nil),          // 6: proto.security.OAuth2UserInfoMapping
	(*Saml)(nil),                           // 7: proto.security.Saml
	(*Ldap)(nil),                           // 8: proto.security.Ldap
	(*X509)(nil),                           // 9: proto.security.X509
	(*Iap)(nil),                            // 10: proto.security.Iap
	nil,                                    // 11: proto.security.OAuth2.UserInfoRequirementsEntry
	(*Saml_UserAttributes)(nil),            // 12: proto.security.Saml.UserAttributes
}
var file_security_authn_proto_depIdxs = []int32{
	3,  // 0: proto.security.Authentication.oauth2:type_name -> proto.security.OAuth2
	7,  // 1: proto.security.Authentication.saml:type_name -> proto.security.Saml
	8,  // 2: proto.security.Authentication.ldap:type_name -> proto.security.Ldap
	9,  // 3: proto.security.Authentication.x509:type_name -> proto.security.X509
	10, // 4: proto.security.Authentication.iap:type_name -> proto.security.Iap
	4,  // 5: proto.security.OAuth2.client:type_name -> proto.security.OAuth2Client
	11, // 6: proto.security.OAuth2.userInfoRequirements:type_name -> proto.security.OAuth2.UserInfoRequirementsEntry
	5,  // 7: proto.security.OAuth2.resource:type_name -> proto.security.OAuth2Resource
	6,  // 8: proto.security.OAuth2.userInfoMapping:type_name -> proto.security.OAuth2UserInfoMapping
	0,  // 9: proto.security.OAuth2.provider:type_name -> proto.security.OAuth2.OAuth2Provider
	1,  // 10: proto.security.OAuth2Client.clientAuthenticationScheme:type_name -> proto.security.OAuth2Client.AuthenticationScheme
	12, // 11: proto.security.Saml.userAttributeMapping:type_name -> proto.security.Saml.UserAttributes
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_security_authn_proto_init() }
func file_security_authn_proto_init() {
	if File_security_authn_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_security_authn_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Authentication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_security_authn_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OAuth2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_security_authn_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OAuth2Client); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_security_authn_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OAuth2Resource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_security_authn_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OAuth2UserInfoMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_security_authn_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Saml); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_security_authn_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ldap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_security_authn_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*X509); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_security_authn_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Iap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_security_authn_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Saml_UserAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_security_authn_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_security_authn_proto_goTypes,
		DependencyIndexes: file_security_authn_proto_depIdxs,
		EnumInfos:         file_security_authn_proto_enumTypes,
		MessageInfos:      file_security_authn_proto_msgTypes,
	}.Build()
	File_security_authn_proto = out.File
	file_security_authn_proto_rawDesc = nil
	file_security_authn_proto_goTypes = nil
	file_security_authn_proto_depIdxs = nil
}
