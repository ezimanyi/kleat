// Code generated by protoc-gen-go. DO NOT EDIT.
// source: providers.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Configuration for the Kubernetes provider.
type Kubernetes struct {
	// Whether the provider is enabled.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// The list of configured accounts.
	Accounts []*Kubernetes_Account `protobuf:"bytes,2,rep,name=accounts,proto3" json:"accounts,omitempty"`
	// The name of the primary account.
	PrimaryAccount       string   `protobuf:"bytes,3,opt,name=primaryAccount,proto3" json:"primaryAccount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Kubernetes) Reset()         { *m = Kubernetes{} }
func (m *Kubernetes) String() string { return proto.CompactTextString(m) }
func (*Kubernetes) ProtoMessage()    {}
func (*Kubernetes) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9f7cb8e43f784d4, []int{0}
}

func (m *Kubernetes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Kubernetes.Unmarshal(m, b)
}
func (m *Kubernetes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Kubernetes.Marshal(b, m, deterministic)
}
func (m *Kubernetes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Kubernetes.Merge(m, src)
}
func (m *Kubernetes) XXX_Size() int {
	return xxx_messageInfo_Kubernetes.Size(m)
}
func (m *Kubernetes) XXX_DiscardUnknown() {
	xxx_messageInfo_Kubernetes.DiscardUnknown(m)
}

var xxx_messageInfo_Kubernetes proto.InternalMessageInfo

func (m *Kubernetes) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *Kubernetes) GetAccounts() []*Kubernetes_Account {
	if m != nil {
		return m.Accounts
	}
	return nil
}

func (m *Kubernetes) GetPrimaryAccount() string {
	if m != nil {
		return m.PrimaryAccount
	}
	return ""
}

// Configuration for a Spinnaker Kubernetes account. An account maps to a
// credential that can authenticate against your Kubernetes cluster.
type Kubernetes_Account struct {
	// The name of the account.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Some providers support multiple versions/release tracks.
	// This allows you to pick the version of the provider (not the
	// resources it manages) to run within Spinnaker.
	ProviderVersion string `protobuf:"bytes,2,opt,name=providerVersion,proto3" json:"providerVersion,omitempty"`
	// A list of resource kinds this Spinnaker account can deploy and
	// will cache. When no kinds are configured, this defaults to all kinds
	// described here:
	// https://spinnaker.io/reference/providers/kubernetes-v2/.
	// This can only be set when omitKinds is empty or not set.
	Kinds []string `protobuf:"bytes,3,rep,name=kinds,proto3" json:"kinds,omitempty"`
	// A list of resource kinds this Spinnaker account cannot deploy to or
	// cache. This can only be set when kinds is empty or not set.
	OmitKinds []string `protobuf:"bytes,4,rep,name=omitKinds,proto3" json:"omitKinds,omitempty"`
	// The kubernetes context to be managed by Spinnaker. See
	// http://kubernetes.io/docs/user-guide/kubeconfig-file/#context for
	// more information. When no context is configured for an account the
	// ‘current-context’ in your kubeconfig is assumed.
	Context string `protobuf:"bytes,5,opt,name=context,proto3" json:"context,omitempty"`
	// Number of caching agents for this kubernetes account.
	// Each agent handles a subset of the namespaces available to this account.
	// By default, only 1 agent caches all kinds for all namespaces in the
	// account.
	CacheThreads int32 `protobuf:"varint,6,opt,name=cacheThreads,proto3" json:"cacheThreads,omitempty"`
	// A list of namespaces this Spinnaker account can deploy to and will
	// cache. When no namespaces are configured, this defaults to all
	// namespaces.
	Namespaces []string `protobuf:"bytes,7,rep,name=namespaces,proto3" json:"namespaces,omitempty"`
	// A list of namespaces this Spinnaker account cannot deploy to or
	// cache. This can only be set when namespaces is empty or not set.
	OmitNamespaces []string `protobuf:"bytes,8,rep,name=omitNamespaces,proto3" json:"omitNamespaces,omitempty"`
	// The list of custom resources Clouddriver will manage and make
	// available for use in Patch and Delete (Manifest) stages.
	CustomResources []*Kubernetes_CustomResource `protobuf:"bytes,9,rep,name=customResources,proto3" json:"customResources,omitempty"`
	// The list of kind-specific caching policies.
	CachingPolicies []*Kubernetes_CachingPolicy `protobuf:"bytes,10,rep,name=cachingPolicies,proto3" json:"cachingPolicies,omitempty"`
	// The list of the Spinnaker docker registry account names this
	// Spinnaker account can use as image sources. These docker registry
	// accounts must be registered in your halconfig before you can add them
	// here.
	DockerRegistries []*Kubernetes_DockerRegistry `protobuf:"bytes,11,rep,name=dockerRegistries,proto3" json:"dockerRegistries,omitempty"`
	// The list of OAuth scopes used by kubectl to fetch an OAuth token.
	OAuthScopes []string `protobuf:"bytes,12,rep,name=oAuthScopes,proto3" json:"oAuthScopes,omitempty"`
	// The path to your kubeconfig file. By default, it will be under the
	// Spinnaker user’s home directory in the typical .kube/config location.
	// todo: document new var/secrets convention.
	KubeconfigFile string `protobuf:"bytes,13,opt,name=kubeconfigFile,proto3" json:"kubeconfigFile,omitempty"`
	// Fiat permissions configuration.
	Permissions *Permissions `protobuf:"bytes,14,opt,name=permissions,proto3" json:"permissions,omitempty"`
	// (Deprecated): List of required Fiat permission groups. Configure
	// `permissions` instead.
	RequiredGroupMemberships []string `protobuf:"bytes,15,rep,name=requiredGroupMemberships,proto3" json:"requiredGroupMemberships,omitempty"`
	XXX_NoUnkeyedLiteral     struct{} `json:"-"`
	XXX_unrecognized         []byte   `json:"-"`
	XXX_sizecache            int32    `json:"-"`
}

func (m *Kubernetes_Account) Reset()         { *m = Kubernetes_Account{} }
func (m *Kubernetes_Account) String() string { return proto.CompactTextString(m) }
func (*Kubernetes_Account) ProtoMessage()    {}
func (*Kubernetes_Account) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9f7cb8e43f784d4, []int{0, 0}
}

func (m *Kubernetes_Account) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Kubernetes_Account.Unmarshal(m, b)
}
func (m *Kubernetes_Account) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Kubernetes_Account.Marshal(b, m, deterministic)
}
func (m *Kubernetes_Account) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Kubernetes_Account.Merge(m, src)
}
func (m *Kubernetes_Account) XXX_Size() int {
	return xxx_messageInfo_Kubernetes_Account.Size(m)
}
func (m *Kubernetes_Account) XXX_DiscardUnknown() {
	xxx_messageInfo_Kubernetes_Account.DiscardUnknown(m)
}

var xxx_messageInfo_Kubernetes_Account proto.InternalMessageInfo

func (m *Kubernetes_Account) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Kubernetes_Account) GetProviderVersion() string {
	if m != nil {
		return m.ProviderVersion
	}
	return ""
}

func (m *Kubernetes_Account) GetKinds() []string {
	if m != nil {
		return m.Kinds
	}
	return nil
}

func (m *Kubernetes_Account) GetOmitKinds() []string {
	if m != nil {
		return m.OmitKinds
	}
	return nil
}

func (m *Kubernetes_Account) GetContext() string {
	if m != nil {
		return m.Context
	}
	return ""
}

func (m *Kubernetes_Account) GetCacheThreads() int32 {
	if m != nil {
		return m.CacheThreads
	}
	return 0
}

func (m *Kubernetes_Account) GetNamespaces() []string {
	if m != nil {
		return m.Namespaces
	}
	return nil
}

func (m *Kubernetes_Account) GetOmitNamespaces() []string {
	if m != nil {
		return m.OmitNamespaces
	}
	return nil
}

func (m *Kubernetes_Account) GetCustomResources() []*Kubernetes_CustomResource {
	if m != nil {
		return m.CustomResources
	}
	return nil
}

func (m *Kubernetes_Account) GetCachingPolicies() []*Kubernetes_CachingPolicy {
	if m != nil {
		return m.CachingPolicies
	}
	return nil
}

func (m *Kubernetes_Account) GetDockerRegistries() []*Kubernetes_DockerRegistry {
	if m != nil {
		return m.DockerRegistries
	}
	return nil
}

func (m *Kubernetes_Account) GetOAuthScopes() []string {
	if m != nil {
		return m.OAuthScopes
	}
	return nil
}

func (m *Kubernetes_Account) GetKubeconfigFile() string {
	if m != nil {
		return m.KubeconfigFile
	}
	return ""
}

func (m *Kubernetes_Account) GetPermissions() *Permissions {
	if m != nil {
		return m.Permissions
	}
	return nil
}

func (m *Kubernetes_Account) GetRequiredGroupMemberships() []string {
	if m != nil {
		return m.RequiredGroupMemberships
	}
	return nil
}

// Configuration for a CRD to be managed by Spinnaker. If Spinnaker does not
// have permission to list CRDs but you need Spinnaker to manage CRDs, you
// need to explicitly register each CRD.
type Kubernetes_CustomResource struct {
	// The Kubernetes kind of the custom resource.
	KubernetesKind string `protobuf:"bytes,1,opt,name=kubernetesKind,proto3" json:"kubernetesKind,omitempty"`
	// The Spinnaker kind to which you would like the custom resource to
	// map.
	SpinnakerKind string `protobuf:"bytes,2,opt,name=spinnakerKind,proto3" json:"spinnakerKind,omitempty"`
	// An integer representing the deployment priority of this resource.
	// Resources with lower values are deployed before resources with higher
	// values.
	DeployPriority string `protobuf:"bytes,3,opt,name=deployPriority,proto3" json:"deployPriority,omitempty"`
	// Whether Spinnaker should manage versioning this resource.
	Versioned bool `protobuf:"varint,4,opt,name=versioned,proto3" json:"versioned,omitempty"`
	// Whether the resource is namespaced.
	Namespaced           bool     `protobuf:"varint,5,opt,name=namespaced,proto3" json:"namespaced,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Kubernetes_CustomResource) Reset()         { *m = Kubernetes_CustomResource{} }
func (m *Kubernetes_CustomResource) String() string { return proto.CompactTextString(m) }
func (*Kubernetes_CustomResource) ProtoMessage()    {}
func (*Kubernetes_CustomResource) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9f7cb8e43f784d4, []int{0, 1}
}

func (m *Kubernetes_CustomResource) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Kubernetes_CustomResource.Unmarshal(m, b)
}
func (m *Kubernetes_CustomResource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Kubernetes_CustomResource.Marshal(b, m, deterministic)
}
func (m *Kubernetes_CustomResource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Kubernetes_CustomResource.Merge(m, src)
}
func (m *Kubernetes_CustomResource) XXX_Size() int {
	return xxx_messageInfo_Kubernetes_CustomResource.Size(m)
}
func (m *Kubernetes_CustomResource) XXX_DiscardUnknown() {
	xxx_messageInfo_Kubernetes_CustomResource.DiscardUnknown(m)
}

var xxx_messageInfo_Kubernetes_CustomResource proto.InternalMessageInfo

func (m *Kubernetes_CustomResource) GetKubernetesKind() string {
	if m != nil {
		return m.KubernetesKind
	}
	return ""
}

func (m *Kubernetes_CustomResource) GetSpinnakerKind() string {
	if m != nil {
		return m.SpinnakerKind
	}
	return ""
}

func (m *Kubernetes_CustomResource) GetDeployPriority() string {
	if m != nil {
		return m.DeployPriority
	}
	return ""
}

func (m *Kubernetes_CustomResource) GetVersioned() bool {
	if m != nil {
		return m.Versioned
	}
	return false
}

func (m *Kubernetes_CustomResource) GetNamespaced() bool {
	if m != nil {
		return m.Namespaced
	}
	return false
}

// Configuration for a kind-specific caching policy.
type Kubernetes_CachingPolicy struct {
	// The Kubernetes kind to which the policy applies.
	KubernetesKind string `protobuf:"bytes,1,opt,name=kubernetesKind,proto3" json:"kubernetesKind,omitempty"`
	// The maximum number of resources an agent will cache of the specified
	// Kubernetes kind.
	MaxEntriesPerAgent   int32    `protobuf:"varint,2,opt,name=maxEntriesPerAgent,proto3" json:"maxEntriesPerAgent,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Kubernetes_CachingPolicy) Reset()         { *m = Kubernetes_CachingPolicy{} }
func (m *Kubernetes_CachingPolicy) String() string { return proto.CompactTextString(m) }
func (*Kubernetes_CachingPolicy) ProtoMessage()    {}
func (*Kubernetes_CachingPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9f7cb8e43f784d4, []int{0, 2}
}

func (m *Kubernetes_CachingPolicy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Kubernetes_CachingPolicy.Unmarshal(m, b)
}
func (m *Kubernetes_CachingPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Kubernetes_CachingPolicy.Marshal(b, m, deterministic)
}
func (m *Kubernetes_CachingPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Kubernetes_CachingPolicy.Merge(m, src)
}
func (m *Kubernetes_CachingPolicy) XXX_Size() int {
	return xxx_messageInfo_Kubernetes_CachingPolicy.Size(m)
}
func (m *Kubernetes_CachingPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_Kubernetes_CachingPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_Kubernetes_CachingPolicy proto.InternalMessageInfo

func (m *Kubernetes_CachingPolicy) GetKubernetesKind() string {
	if m != nil {
		return m.KubernetesKind
	}
	return ""
}

func (m *Kubernetes_CachingPolicy) GetMaxEntriesPerAgent() int32 {
	if m != nil {
		return m.MaxEntriesPerAgent
	}
	return 0
}

// Configuration for a Docker registry.
type Kubernetes_DockerRegistry struct {
	// The configured name of the Docker registry.
	AccountName string `protobuf:"bytes,1,opt,name=accountName,proto3" json:"accountName,omitempty"`
	// The list of Docker registry namespaces usable as image sources.
	Namespaces           []string `protobuf:"bytes,2,rep,name=namespaces,proto3" json:"namespaces,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Kubernetes_DockerRegistry) Reset()         { *m = Kubernetes_DockerRegistry{} }
func (m *Kubernetes_DockerRegistry) String() string { return proto.CompactTextString(m) }
func (*Kubernetes_DockerRegistry) ProtoMessage()    {}
func (*Kubernetes_DockerRegistry) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9f7cb8e43f784d4, []int{0, 3}
}

func (m *Kubernetes_DockerRegistry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Kubernetes_DockerRegistry.Unmarshal(m, b)
}
func (m *Kubernetes_DockerRegistry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Kubernetes_DockerRegistry.Marshal(b, m, deterministic)
}
func (m *Kubernetes_DockerRegistry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Kubernetes_DockerRegistry.Merge(m, src)
}
func (m *Kubernetes_DockerRegistry) XXX_Size() int {
	return xxx_messageInfo_Kubernetes_DockerRegistry.Size(m)
}
func (m *Kubernetes_DockerRegistry) XXX_DiscardUnknown() {
	xxx_messageInfo_Kubernetes_DockerRegistry.DiscardUnknown(m)
}

var xxx_messageInfo_Kubernetes_DockerRegistry proto.InternalMessageInfo

func (m *Kubernetes_DockerRegistry) GetAccountName() string {
	if m != nil {
		return m.AccountName
	}
	return ""
}

func (m *Kubernetes_DockerRegistry) GetNamespaces() []string {
	if m != nil {
		return m.Namespaces
	}
	return nil
}

// Configuration for the Google Compute Engine (GCE) provider.
type Google struct {
	// Whether the provider is enabled.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// The list of configured accounts.
	Accounts []*Google_Account `protobuf:"bytes,2,rep,name=accounts,proto3" json:"accounts,omitempty"`
	// The name of the primary account.
	PrimaryAccount string `protobuf:"bytes,3,opt,name=primaryAccount,proto3" json:"primaryAccount,omitempty"`
	// Configuration for Spinnaker's image bakery.
	BakeryDefaults       *Google_BakeryDefaults `protobuf:"bytes,4,opt,name=bakeryDefaults,proto3" json:"bakeryDefaults,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *Google) Reset()         { *m = Google{} }
func (m *Google) String() string { return proto.CompactTextString(m) }
func (*Google) ProtoMessage()    {}
func (*Google) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9f7cb8e43f784d4, []int{1}
}

func (m *Google) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Google.Unmarshal(m, b)
}
func (m *Google) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Google.Marshal(b, m, deterministic)
}
func (m *Google) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Google.Merge(m, src)
}
func (m *Google) XXX_Size() int {
	return xxx_messageInfo_Google.Size(m)
}
func (m *Google) XXX_DiscardUnknown() {
	xxx_messageInfo_Google.DiscardUnknown(m)
}

var xxx_messageInfo_Google proto.InternalMessageInfo

func (m *Google) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *Google) GetAccounts() []*Google_Account {
	if m != nil {
		return m.Accounts
	}
	return nil
}

func (m *Google) GetPrimaryAccount() string {
	if m != nil {
		return m.PrimaryAccount
	}
	return ""
}

func (m *Google) GetBakeryDefaults() *Google_BakeryDefaults {
	if m != nil {
		return m.BakeryDefaults
	}
	return nil
}

// Configuration for a Spinnaker Google account. An account maps to a
// credential that can authenticate against a GCP project.
type Google_Account struct {
	// The name of the account.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// (Deprecated): List of required Fiat permission groups. Configure
	// `permissions` instead.
	RequiredGroupMemberships []string `protobuf:"bytes,3,rep,name=requiredGroupMemberships,proto3" json:"requiredGroupMemberships,omitempty"`
	// Fiat permissions configuration.
	Permissions *Permissions `protobuf:"bytes,4,opt,name=permissions,proto3" json:"permissions,omitempty"`
	// The GCP project this Spinnaker account will manage.
	Project string `protobuf:"bytes,5,opt,name=project,proto3" json:"project,omitempty"`
	// The path to a JSON service account that Spinnaker will use as
	// credentials. This is only needed if Spinnaker is not deployed on a
	// Google Compute Engine VM, or needs permissions not afforded to the VM
	// it is running on. See
	// https://cloud.google.com/compute/docs/access/service-accounts for
	// more information.
	JsonPath string `protobuf:"bytes,6,opt,name=jsonPath,proto3" json:"jsonPath,omitempty"`
	// Enable this flag if your GCP project has access to alpha features and
	// you want Spinnaker to take advantage of them.
	AlphaListed bool `protobuf:"varint,7,opt,name=alphaListed,proto3" json:"alphaListed,omitempty"`
	// A list of GCP projects from which Spinnaker will be able to cache and
	// deploy images. When this is omitted, it defaults to the current
	// project. Each project must have granted the IAM role
	// compute.imageUser to the service account associated with the JSON key
	// used by this account, as well as to the Google APIs service account
	// automatically created for the project being managed (should look
	// similar to 12345678912@cloudservices.gserviceaccount.com). See
	// https://cloud.google.com/compute/docs/images/sharing-images-across-projects
	// for more information about sharing images across GCP projects.
	ImageProjects []string `protobuf:"bytes,8,rep,name=imageProjects,proto3" json:"imageProjects,omitempty"`
	// Configuration for Consul.
	Consul *Google_Consul `protobuf:"bytes,9,opt,name=consul,proto3" json:"consul,omitempty"`
	// A list of regions for caching and mutating calls. This overwrites
	// any default regions set on the provider.
	Regions []string `protobuf:"bytes,10,rep,name=regions,proto3" json:"regions,omitempty"`
	//  The path to user data template file. Spinnaker has the ability to
	//  inject userdata into generated instance templates. The mechanism is
	//  via a template file that is token replaced to provide some specifics
	//  about the deployment. See
	//  https://github.com/spinnaker/clouddriver/blob/master/clouddriver-aws/UserData.md
	//  for more information.
	UserDataFile         string   `protobuf:"bytes,11,opt,name=userDataFile,proto3" json:"userDataFile,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Google_Account) Reset()         { *m = Google_Account{} }
func (m *Google_Account) String() string { return proto.CompactTextString(m) }
func (*Google_Account) ProtoMessage()    {}
func (*Google_Account) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9f7cb8e43f784d4, []int{1, 0}
}

func (m *Google_Account) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Google_Account.Unmarshal(m, b)
}
func (m *Google_Account) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Google_Account.Marshal(b, m, deterministic)
}
func (m *Google_Account) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Google_Account.Merge(m, src)
}
func (m *Google_Account) XXX_Size() int {
	return xxx_messageInfo_Google_Account.Size(m)
}
func (m *Google_Account) XXX_DiscardUnknown() {
	xxx_messageInfo_Google_Account.DiscardUnknown(m)
}

var xxx_messageInfo_Google_Account proto.InternalMessageInfo

func (m *Google_Account) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Google_Account) GetRequiredGroupMemberships() []string {
	if m != nil {
		return m.RequiredGroupMemberships
	}
	return nil
}

func (m *Google_Account) GetPermissions() *Permissions {
	if m != nil {
		return m.Permissions
	}
	return nil
}

func (m *Google_Account) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *Google_Account) GetJsonPath() string {
	if m != nil {
		return m.JsonPath
	}
	return ""
}

func (m *Google_Account) GetAlphaListed() bool {
	if m != nil {
		return m.AlphaListed
	}
	return false
}

func (m *Google_Account) GetImageProjects() []string {
	if m != nil {
		return m.ImageProjects
	}
	return nil
}

func (m *Google_Account) GetConsul() *Google_Consul {
	if m != nil {
		return m.Consul
	}
	return nil
}

func (m *Google_Account) GetRegions() []string {
	if m != nil {
		return m.Regions
	}
	return nil
}

func (m *Google_Account) GetUserDataFile() string {
	if m != nil {
		return m.UserDataFile
	}
	return ""
}

// Configuration for Spinnaker's image bakery.
type Google_BakeryDefaults struct {
	// The name of the Packer template that will be used to bake images from
	// this base image. The template file must be found in this list:
	// https://github.com/spinnaker/rosco/tree/master/rosco-web/config/packer,
	// or supplied as described here: https://spinnaker.io/setup/bakery/.
	TemplateFile string `protobuf:"bytes,1,opt,name=templateFile,proto3" json:"templateFile,omitempty"`
	// List of configured base images.
	BaseImages []*Google_BakeryDefaults_BaseImageSettings `protobuf:"bytes,2,rep,name=baseImages,proto3" json:"baseImages,omitempty"`
	// The default zone in which to bake an image.
	Zone string `protobuf:"bytes,3,opt,name=zone,proto3" json:"zone,omitempty"`
	// The Google Compute network ID or URL to use for the launched
	// instance. Defaults to default.
	Network string `protobuf:"bytes,4,opt,name=network,proto3" json:"network,omitempty"`
	// If true, use the instance's internal IP instead of its external IP
	// during baking.
	UseInternalIp bool `protobuf:"varint,5,opt,name=useInternalIp,proto3" json:"useInternalIp,omitempty"`
	// The default project ID for the network and subnet to use for the VM
	// baking your image.
	NetworkProjectId     string   `protobuf:"bytes,6,opt,name=networkProjectId,proto3" json:"networkProjectId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Google_BakeryDefaults) Reset()         { *m = Google_BakeryDefaults{} }
func (m *Google_BakeryDefaults) String() string { return proto.CompactTextString(m) }
func (*Google_BakeryDefaults) ProtoMessage()    {}
func (*Google_BakeryDefaults) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9f7cb8e43f784d4, []int{1, 1}
}

func (m *Google_BakeryDefaults) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Google_BakeryDefaults.Unmarshal(m, b)
}
func (m *Google_BakeryDefaults) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Google_BakeryDefaults.Marshal(b, m, deterministic)
}
func (m *Google_BakeryDefaults) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Google_BakeryDefaults.Merge(m, src)
}
func (m *Google_BakeryDefaults) XXX_Size() int {
	return xxx_messageInfo_Google_BakeryDefaults.Size(m)
}
func (m *Google_BakeryDefaults) XXX_DiscardUnknown() {
	xxx_messageInfo_Google_BakeryDefaults.DiscardUnknown(m)
}

var xxx_messageInfo_Google_BakeryDefaults proto.InternalMessageInfo

func (m *Google_BakeryDefaults) GetTemplateFile() string {
	if m != nil {
		return m.TemplateFile
	}
	return ""
}

func (m *Google_BakeryDefaults) GetBaseImages() []*Google_BakeryDefaults_BaseImageSettings {
	if m != nil {
		return m.BaseImages
	}
	return nil
}

func (m *Google_BakeryDefaults) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

func (m *Google_BakeryDefaults) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *Google_BakeryDefaults) GetUseInternalIp() bool {
	if m != nil {
		return m.UseInternalIp
	}
	return false
}

func (m *Google_BakeryDefaults) GetNetworkProjectId() string {
	if m != nil {
		return m.NetworkProjectId
	}
	return ""
}

// Configuration for a base image for the Google provider's bakery.
type Google_BakeryDefaults_BaseImageSettings struct {
	// Base image configuration.
	BaseImage *Google_BakeryDefaults_BaseImageSettings_BaseImage `protobuf:"bytes,1,opt,name=baseImage,proto3" json:"baseImage,omitempty"`
	// Image source configuration.
	VirtualizationSettings *Google_BakeryDefaults_BaseImageSettings_VirtualizationSettings `protobuf:"bytes,2,opt,name=virtualizationSettings,proto3" json:"virtualizationSettings,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}                                                        `json:"-"`
	XXX_unrecognized       []byte                                                          `json:"-"`
	XXX_sizecache          int32                                                           `json:"-"`
}

func (m *Google_BakeryDefaults_BaseImageSettings) Reset() {
	*m = Google_BakeryDefaults_BaseImageSettings{}
}
func (m *Google_BakeryDefaults_BaseImageSettings) String() string { return proto.CompactTextString(m) }
func (*Google_BakeryDefaults_BaseImageSettings) ProtoMessage()    {}
func (*Google_BakeryDefaults_BaseImageSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9f7cb8e43f784d4, []int{1, 1, 0}
}

func (m *Google_BakeryDefaults_BaseImageSettings) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Google_BakeryDefaults_BaseImageSettings.Unmarshal(m, b)
}
func (m *Google_BakeryDefaults_BaseImageSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Google_BakeryDefaults_BaseImageSettings.Marshal(b, m, deterministic)
}
func (m *Google_BakeryDefaults_BaseImageSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Google_BakeryDefaults_BaseImageSettings.Merge(m, src)
}
func (m *Google_BakeryDefaults_BaseImageSettings) XXX_Size() int {
	return xxx_messageInfo_Google_BakeryDefaults_BaseImageSettings.Size(m)
}
func (m *Google_BakeryDefaults_BaseImageSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_Google_BakeryDefaults_BaseImageSettings.DiscardUnknown(m)
}

var xxx_messageInfo_Google_BakeryDefaults_BaseImageSettings proto.InternalMessageInfo

func (m *Google_BakeryDefaults_BaseImageSettings) GetBaseImage() *Google_BakeryDefaults_BaseImageSettings_BaseImage {
	if m != nil {
		return m.BaseImage
	}
	return nil
}

func (m *Google_BakeryDefaults_BaseImageSettings) GetVirtualizationSettings() *Google_BakeryDefaults_BaseImageSettings_VirtualizationSettings {
	if m != nil {
		return m.VirtualizationSettings
	}
	return nil
}

// Base image configuration.
type Google_BakeryDefaults_BaseImageSettings_BaseImage struct {
	// This is the identifier used by GCP to find this base
	// image.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// A short description to help human operators identify the
	// image.
	ShortDescription string `protobuf:"bytes,2,opt,name=shortDescription,proto3" json:"shortDescription,omitempty"`
	// A long description to help human operators identify the
	// image.
	DetailedDescription string `protobuf:"bytes,3,opt,name=detailedDescription,proto3" json:"detailedDescription,omitempty"`
	//  This is used to help Spinnaker’s bakery download the build
	//  artifacts you supply it with. For example, specifying deb
	//  indicates that your artifacts will need to be fetched from a
	//  debian repository.
	PackageType string `protobuf:"bytes,4,opt,name=packageType,proto3" json:"packageType,omitempty"`
	// If set to true, Deck will annotate the popup tooltip to
	// indicate that the selected option represents an image family.
	ImageFamily          bool     `protobuf:"varint,5,opt,name=imageFamily,proto3" json:"imageFamily,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Google_BakeryDefaults_BaseImageSettings_BaseImage) Reset() {
	*m = Google_BakeryDefaults_BaseImageSettings_BaseImage{}
}
func (m *Google_BakeryDefaults_BaseImageSettings_BaseImage) String() string {
	return proto.CompactTextString(m)
}
func (*Google_BakeryDefaults_BaseImageSettings_BaseImage) ProtoMessage() {}
func (*Google_BakeryDefaults_BaseImageSettings_BaseImage) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9f7cb8e43f784d4, []int{1, 1, 0, 0}
}

func (m *Google_BakeryDefaults_BaseImageSettings_BaseImage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Google_BakeryDefaults_BaseImageSettings_BaseImage.Unmarshal(m, b)
}
func (m *Google_BakeryDefaults_BaseImageSettings_BaseImage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Google_BakeryDefaults_BaseImageSettings_BaseImage.Marshal(b, m, deterministic)
}
func (m *Google_BakeryDefaults_BaseImageSettings_BaseImage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Google_BakeryDefaults_BaseImageSettings_BaseImage.Merge(m, src)
}
func (m *Google_BakeryDefaults_BaseImageSettings_BaseImage) XXX_Size() int {
	return xxx_messageInfo_Google_BakeryDefaults_BaseImageSettings_BaseImage.Size(m)
}
func (m *Google_BakeryDefaults_BaseImageSettings_BaseImage) XXX_DiscardUnknown() {
	xxx_messageInfo_Google_BakeryDefaults_BaseImageSettings_BaseImage.DiscardUnknown(m)
}

var xxx_messageInfo_Google_BakeryDefaults_BaseImageSettings_BaseImage proto.InternalMessageInfo

func (m *Google_BakeryDefaults_BaseImageSettings_BaseImage) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Google_BakeryDefaults_BaseImageSettings_BaseImage) GetShortDescription() string {
	if m != nil {
		return m.ShortDescription
	}
	return ""
}

func (m *Google_BakeryDefaults_BaseImageSettings_BaseImage) GetDetailedDescription() string {
	if m != nil {
		return m.DetailedDescription
	}
	return ""
}

func (m *Google_BakeryDefaults_BaseImageSettings_BaseImage) GetPackageType() string {
	if m != nil {
		return m.PackageType
	}
	return ""
}

func (m *Google_BakeryDefaults_BaseImageSettings_BaseImage) GetImageFamily() bool {
	if m != nil {
		return m.ImageFamily
	}
	return false
}

// Image source configuration.
type Google_BakeryDefaults_BaseImageSettings_VirtualizationSettings struct {
	//  The source image. If both sourceImage and sourceImageFamily
	//  are set, sourceImage will take precedence.
	SourceImage string `protobuf:"bytes,1,opt,name=sourceImage,proto3" json:"sourceImage,omitempty"`
	// The source image family to create the image from. The newest,
	// non-deprecated image is used. If both sourceImage and
	// sourceImageFamily are set, sourceImage will take precedence.
	SourceImageFamily    string   `protobuf:"bytes,2,opt,name=sourceImageFamily,proto3" json:"sourceImageFamily,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Google_BakeryDefaults_BaseImageSettings_VirtualizationSettings) Reset() {
	*m = Google_BakeryDefaults_BaseImageSettings_VirtualizationSettings{}
}
func (m *Google_BakeryDefaults_BaseImageSettings_VirtualizationSettings) String() string {
	return proto.CompactTextString(m)
}
func (*Google_BakeryDefaults_BaseImageSettings_VirtualizationSettings) ProtoMessage() {}
func (*Google_BakeryDefaults_BaseImageSettings_VirtualizationSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9f7cb8e43f784d4, []int{1, 1, 0, 1}
}

func (m *Google_BakeryDefaults_BaseImageSettings_VirtualizationSettings) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Google_BakeryDefaults_BaseImageSettings_VirtualizationSettings.Unmarshal(m, b)
}
func (m *Google_BakeryDefaults_BaseImageSettings_VirtualizationSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Google_BakeryDefaults_BaseImageSettings_VirtualizationSettings.Marshal(b, m, deterministic)
}
func (m *Google_BakeryDefaults_BaseImageSettings_VirtualizationSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Google_BakeryDefaults_BaseImageSettings_VirtualizationSettings.Merge(m, src)
}
func (m *Google_BakeryDefaults_BaseImageSettings_VirtualizationSettings) XXX_Size() int {
	return xxx_messageInfo_Google_BakeryDefaults_BaseImageSettings_VirtualizationSettings.Size(m)
}
func (m *Google_BakeryDefaults_BaseImageSettings_VirtualizationSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_Google_BakeryDefaults_BaseImageSettings_VirtualizationSettings.DiscardUnknown(m)
}

var xxx_messageInfo_Google_BakeryDefaults_BaseImageSettings_VirtualizationSettings proto.InternalMessageInfo

func (m *Google_BakeryDefaults_BaseImageSettings_VirtualizationSettings) GetSourceImage() string {
	if m != nil {
		return m.SourceImage
	}
	return ""
}

func (m *Google_BakeryDefaults_BaseImageSettings_VirtualizationSettings) GetSourceImageFamily() string {
	if m != nil {
		return m.SourceImageFamily
	}
	return ""
}

// Configuration for Consul.
type Google_Consul struct {
	// Whether Consul is enabled.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Reachable Consul node endpoint connected to the Consul cluster.
	// Defaults to localhost.
	AgentEndpoint string `protobuf:"bytes,2,opt,name=agentEndpoint,proto3" json:"agentEndpoint,omitempty"`
	// Port consul is running on for every agent. Defaults to 8500.
	AgentPort int32 `protobuf:"varint,3,opt,name=agentPort,proto3" json:"agentPort,omitempty"`
	// List of data centers to cache and keep updated. Defaults to all.
	Datacenters          []string `protobuf:"bytes,4,rep,name=datacenters,proto3" json:"datacenters,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Google_Consul) Reset()         { *m = Google_Consul{} }
func (m *Google_Consul) String() string { return proto.CompactTextString(m) }
func (*Google_Consul) ProtoMessage()    {}
func (*Google_Consul) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9f7cb8e43f784d4, []int{1, 2}
}

func (m *Google_Consul) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Google_Consul.Unmarshal(m, b)
}
func (m *Google_Consul) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Google_Consul.Marshal(b, m, deterministic)
}
func (m *Google_Consul) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Google_Consul.Merge(m, src)
}
func (m *Google_Consul) XXX_Size() int {
	return xxx_messageInfo_Google_Consul.Size(m)
}
func (m *Google_Consul) XXX_DiscardUnknown() {
	xxx_messageInfo_Google_Consul.DiscardUnknown(m)
}

var xxx_messageInfo_Google_Consul proto.InternalMessageInfo

func (m *Google_Consul) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *Google_Consul) GetAgentEndpoint() string {
	if m != nil {
		return m.AgentEndpoint
	}
	return ""
}

func (m *Google_Consul) GetAgentPort() int32 {
	if m != nil {
		return m.AgentPort
	}
	return 0
}

func (m *Google_Consul) GetDatacenters() []string {
	if m != nil {
		return m.Datacenters
	}
	return nil
}

// Configuration for the Google App Engine (GAE) provider.
type Appengine struct {
	// Whether the provider is enabled.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// The list of configured accounts.
	Accounts []*Appengine_Account `protobuf:"bytes,2,rep,name=accounts,proto3" json:"accounts,omitempty"`
	// The name of the primary account.
	PrimaryAccount       string   `protobuf:"bytes,3,opt,name=primaryAccount,proto3" json:"primaryAccount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Appengine) Reset()         { *m = Appengine{} }
func (m *Appengine) String() string { return proto.CompactTextString(m) }
func (*Appengine) ProtoMessage()    {}
func (*Appengine) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9f7cb8e43f784d4, []int{2}
}

func (m *Appengine) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Appengine.Unmarshal(m, b)
}
func (m *Appengine) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Appengine.Marshal(b, m, deterministic)
}
func (m *Appengine) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Appengine.Merge(m, src)
}
func (m *Appengine) XXX_Size() int {
	return xxx_messageInfo_Appengine.Size(m)
}
func (m *Appengine) XXX_DiscardUnknown() {
	xxx_messageInfo_Appengine.DiscardUnknown(m)
}

var xxx_messageInfo_Appengine proto.InternalMessageInfo

func (m *Appengine) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *Appengine) GetAccounts() []*Appengine_Account {
	if m != nil {
		return m.Accounts
	}
	return nil
}

func (m *Appengine) GetPrimaryAccount() string {
	if m != nil {
		return m.PrimaryAccount
	}
	return ""
}

// Configuration for an App Engine account.
type Appengine_Account struct {
	// The interval in seconds at which Spinnaker will poll for updates in
	// your App Engine clusters.
	CachingIntervalSeconds int32 `protobuf:"varint,1,opt,name=cachingIntervalSeconds,proto3" json:"cachingIntervalSeconds,omitempty"`
	// The environment name for the account. Many accounts can share the
	// same environment (e.g., dev, test, prod).
	Environment string `protobuf:"bytes,2,opt,name=environment,proto3" json:"environment,omitempty"`
	// The gcloud release track (`ALPHA`, `BETA`, or `STABLE`) that Spinnaker will
	// use when deploying to App Engine.
	GcloudReleaseTrack string `protobuf:"bytes,3,opt,name=gcloudReleaseTrack,proto3" json:"gcloudReleaseTrack,omitempty"`
	// A username to be used when connecting to a remote git repository
	// server over HTTPS. If set, `gitHttpsPassword` must also be set.
	GitHttpsUsername string `protobuf:"bytes,4,opt,name=gitHttpsUsername,proto3" json:"gitHttpsUsername,omitempty"`
	//  A password to be used when connecting to a remote git repository
	//  server over HTTPS. If set, `gitHttpsUsername` must also be set.
	GitHttpsPassword string `protobuf:"bytes,5,opt,name=gitHttpsPassword,proto3" json:"gitHttpsPassword,omitempty"`
	// An OAuth token provided by Github for connecting to a git repository
	// over HTTPS. See
	// https://help.github.com/articles/creating-an-access-token-for-command-line-use
	// for more information.
	GithubOAuthAccessToken string `protobuf:"bytes,6,opt,name=githubOAuthAccessToken,proto3" json:"githubOAuthAccessToken,omitempty"`
	// The path to a JSON service account that Spinnaker will use as
	// credentials. This is only needed if Spinnaker is not deployed on a
	// Google Compute Engine VM, or needs permissions not afforded to the VM
	// it is running on. See
	// https://cloud.google.com/compute/docs/access/service-accounts for
	// more information.
	JsonPath string `protobuf:"bytes,7,opt,name=jsonPath,proto3" json:"jsonPath,omitempty"`
	// A local directory to be used to stage source files for App Engine
	// deployments within Clouddriver.
	// Defaults to `/var/tmp/clouddriver`.
	LocalRepositoryDirectory string `protobuf:"bytes,8,opt,name=localRepositoryDirectory,proto3" json:"localRepositoryDirectory,omitempty"`
	// A list of regular expressions. Any service matching one of these
	// regexes will be ignored by Spinnaker.
	OmitServices []string `protobuf:"bytes,9,rep,name=omitServices,proto3" json:"omitServices,omitempty"`
	//  A list of regular expressions. Any version matching one of these
	//  regexes will be ignored by Spinnaker.
	OmitVersions []string `protobuf:"bytes,10,rep,name=omitVersions,proto3" json:"omitVersions,omitempty"`
	// The Google Cloud Platform project this Spinnaker account will manage.
	Project string `protobuf:"bytes,11,opt,name=project,proto3" json:"project,omitempty"`
	// Fiat permissions configuration.
	Permissions *Permissions `protobuf:"bytes,12,opt,name=permissions,proto3" json:"permissions,omitempty"`
	// (Deprecated): List of required Fiat permission groups. Configure
	// `permissions` instead.
	RequiredGroupMemberships []string `protobuf:"bytes,13,rep,name=requiredGroupMemberships,proto3" json:"requiredGroupMemberships,omitempty"`
	// A list of regular expressions. Any service matching one of these
	// regexes will be indexed by Spinnaker (unless the service also
	// matches a regex in `omitServices`).
	Services []string `protobuf:"bytes,14,rep,name=services,proto3" json:"services,omitempty"`
	// The path to a `known_hosts` file to be used when connecting with a
	// remote git repository over SSH.
	SshKnownHostsFilePath string `protobuf:"bytes,15,opt,name=sshKnownHostsFilePath,proto3" json:"sshKnownHostsFilePath,omitempty"`
	// The path to an SSH private key to be used when connecting with a
	// remote git repository over SSH. If set, `sshPrivateKeyPassphrase` must
	// also be set.
	SshPrivateKeyFilePath string `protobuf:"bytes,16,opt,name=sshPrivateKeyFilePath,proto3" json:"sshPrivateKeyFilePath,omitempty"`
	// The passphrase to an SSH private key to be used when connecting with
	// a remote git repository over SSH. If set, `sshPrivateKeyFilePath` must
	// also be set.
	SshPrivateKeyPassphrase string `protobuf:"bytes,17,opt,name=sshPrivateKeyPassphrase,proto3" json:"sshPrivateKeyPassphrase,omitempty"`
	// Enabling this flag will allow Spinnaker to connect with a remote git
	// repository over SSH without verifying the server’s IP address against
	// a `known_hosts` file. Defaults to false.
	SshTrustUnknownHosts bool `protobuf:"varint,18,opt,name=sshTrustUnknownHosts,proto3" json:"sshTrustUnknownHosts,omitempty"`
	// A list of regular expressions. Any version matching one of these
	// regexes will be indexed by Spinnaker (unless the version also matches
	// a regex in `omitVersions`).
	Versions             []string `protobuf:"bytes,19,rep,name=versions,proto3" json:"versions,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Appengine_Account) Reset()         { *m = Appengine_Account{} }
func (m *Appengine_Account) String() string { return proto.CompactTextString(m) }
func (*Appengine_Account) ProtoMessage()    {}
func (*Appengine_Account) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9f7cb8e43f784d4, []int{2, 0}
}

func (m *Appengine_Account) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Appengine_Account.Unmarshal(m, b)
}
func (m *Appengine_Account) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Appengine_Account.Marshal(b, m, deterministic)
}
func (m *Appengine_Account) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Appengine_Account.Merge(m, src)
}
func (m *Appengine_Account) XXX_Size() int {
	return xxx_messageInfo_Appengine_Account.Size(m)
}
func (m *Appengine_Account) XXX_DiscardUnknown() {
	xxx_messageInfo_Appengine_Account.DiscardUnknown(m)
}

var xxx_messageInfo_Appengine_Account proto.InternalMessageInfo

func (m *Appengine_Account) GetCachingIntervalSeconds() int32 {
	if m != nil {
		return m.CachingIntervalSeconds
	}
	return 0
}

func (m *Appengine_Account) GetEnvironment() string {
	if m != nil {
		return m.Environment
	}
	return ""
}

func (m *Appengine_Account) GetGcloudReleaseTrack() string {
	if m != nil {
		return m.GcloudReleaseTrack
	}
	return ""
}

func (m *Appengine_Account) GetGitHttpsUsername() string {
	if m != nil {
		return m.GitHttpsUsername
	}
	return ""
}

func (m *Appengine_Account) GetGitHttpsPassword() string {
	if m != nil {
		return m.GitHttpsPassword
	}
	return ""
}

func (m *Appengine_Account) GetGithubOAuthAccessToken() string {
	if m != nil {
		return m.GithubOAuthAccessToken
	}
	return ""
}

func (m *Appengine_Account) GetJsonPath() string {
	if m != nil {
		return m.JsonPath
	}
	return ""
}

func (m *Appengine_Account) GetLocalRepositoryDirectory() string {
	if m != nil {
		return m.LocalRepositoryDirectory
	}
	return ""
}

func (m *Appengine_Account) GetOmitServices() []string {
	if m != nil {
		return m.OmitServices
	}
	return nil
}

func (m *Appengine_Account) GetOmitVersions() []string {
	if m != nil {
		return m.OmitVersions
	}
	return nil
}

func (m *Appengine_Account) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *Appengine_Account) GetPermissions() *Permissions {
	if m != nil {
		return m.Permissions
	}
	return nil
}

func (m *Appengine_Account) GetRequiredGroupMemberships() []string {
	if m != nil {
		return m.RequiredGroupMemberships
	}
	return nil
}

func (m *Appengine_Account) GetServices() []string {
	if m != nil {
		return m.Services
	}
	return nil
}

func (m *Appengine_Account) GetSshKnownHostsFilePath() string {
	if m != nil {
		return m.SshKnownHostsFilePath
	}
	return ""
}

func (m *Appengine_Account) GetSshPrivateKeyFilePath() string {
	if m != nil {
		return m.SshPrivateKeyFilePath
	}
	return ""
}

func (m *Appengine_Account) GetSshPrivateKeyPassphrase() string {
	if m != nil {
		return m.SshPrivateKeyPassphrase
	}
	return ""
}

func (m *Appengine_Account) GetSshTrustUnknownHosts() bool {
	if m != nil {
		return m.SshTrustUnknownHosts
	}
	return false
}

func (m *Appengine_Account) GetVersions() []string {
	if m != nil {
		return m.Versions
	}
	return nil
}

// A Fiat permissions configuration object.
type Permissions struct {
	// A user must have at least one of these roles in order to view this
	// account’s cloud resources.
	READ []string `protobuf:"bytes,1,rep,name=READ,proto3" json:"READ,omitempty"`
	// A user must have at least one of these roles in order to make changes to
	// this account’s cloud resources.
	WRITE []string `protobuf:"bytes,2,rep,name=WRITE,proto3" json:"WRITE,omitempty"`
	// A user must have at least one of these roles in order to execute
	// pipelines.
	EXECUTE              []string `protobuf:"bytes,3,rep,name=EXECUTE,proto3" json:"EXECUTE,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Permissions) Reset()         { *m = Permissions{} }
func (m *Permissions) String() string { return proto.CompactTextString(m) }
func (*Permissions) ProtoMessage()    {}
func (*Permissions) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9f7cb8e43f784d4, []int{3}
}

func (m *Permissions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Permissions.Unmarshal(m, b)
}
func (m *Permissions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Permissions.Marshal(b, m, deterministic)
}
func (m *Permissions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Permissions.Merge(m, src)
}
func (m *Permissions) XXX_Size() int {
	return xxx_messageInfo_Permissions.Size(m)
}
func (m *Permissions) XXX_DiscardUnknown() {
	xxx_messageInfo_Permissions.DiscardUnknown(m)
}

var xxx_messageInfo_Permissions proto.InternalMessageInfo

func (m *Permissions) GetREAD() []string {
	if m != nil {
		return m.READ
	}
	return nil
}

func (m *Permissions) GetWRITE() []string {
	if m != nil {
		return m.WRITE
	}
	return nil
}

func (m *Permissions) GetEXECUTE() []string {
	if m != nil {
		return m.EXECUTE
	}
	return nil
}

func init() {
	proto.RegisterType((*Kubernetes)(nil), "proto.Kubernetes")
	proto.RegisterType((*Kubernetes_Account)(nil), "proto.Kubernetes.Account")
	proto.RegisterType((*Kubernetes_CustomResource)(nil), "proto.Kubernetes.CustomResource")
	proto.RegisterType((*Kubernetes_CachingPolicy)(nil), "proto.Kubernetes.CachingPolicy")
	proto.RegisterType((*Kubernetes_DockerRegistry)(nil), "proto.Kubernetes.DockerRegistry")
	proto.RegisterType((*Google)(nil), "proto.Google")
	proto.RegisterType((*Google_Account)(nil), "proto.Google.Account")
	proto.RegisterType((*Google_BakeryDefaults)(nil), "proto.Google.BakeryDefaults")
	proto.RegisterType((*Google_BakeryDefaults_BaseImageSettings)(nil), "proto.Google.BakeryDefaults.BaseImageSettings")
	proto.RegisterType((*Google_BakeryDefaults_BaseImageSettings_BaseImage)(nil), "proto.Google.BakeryDefaults.BaseImageSettings.BaseImage")
	proto.RegisterType((*Google_BakeryDefaults_BaseImageSettings_VirtualizationSettings)(nil), "proto.Google.BakeryDefaults.BaseImageSettings.VirtualizationSettings")
	proto.RegisterType((*Google_Consul)(nil), "proto.Google.Consul")
	proto.RegisterType((*Appengine)(nil), "proto.Appengine")
	proto.RegisterType((*Appengine_Account)(nil), "proto.Appengine.Account")
	proto.RegisterType((*Permissions)(nil), "proto.Permissions")
}

func init() { proto.RegisterFile("providers.proto", fileDescriptor_f9f7cb8e43f784d4) }

var fileDescriptor_f9f7cb8e43f784d4 = []byte{
	// 1376 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x57, 0xcb, 0x6e, 0x1b, 0xb7,
	0x1a, 0x86, 0x6c, 0xeb, 0x32, 0x54, 0x2c, 0x27, 0xcc, 0xe5, 0xcc, 0x11, 0x82, 0x73, 0x04, 0x23,
	0x38, 0x10, 0x0e, 0x02, 0xa3, 0x75, 0xd3, 0x22, 0xc8, 0xce, 0xb1, 0x94, 0xc4, 0x75, 0x9a, 0xaa,
	0xb4, 0x92, 0x76, 0x4b, 0xcd, 0xfc, 0x19, 0x31, 0x1a, 0x91, 0x53, 0x92, 0xa3, 0x44, 0x01, 0xba,
	0xef, 0x03, 0x74, 0xd7, 0x5d, 0x1f, 0xa0, 0x6f, 0xd0, 0x5d, 0x5f, 0xa4, 0xab, 0xf6, 0x15, 0xba,
	0x2b, 0xc8, 0xe1, 0x48, 0x33, 0xba, 0xb8, 0x49, 0xb3, 0xd2, 0xf0, 0xfb, 0x2f, 0xfc, 0xef, 0x3f,
	0x85, 0x0e, 0x12, 0x29, 0x66, 0x2c, 0x04, 0xa9, 0x8e, 0x12, 0x29, 0xb4, 0xc0, 0x55, 0xfb, 0x73,
	0xf8, 0xb3, 0x87, 0xd0, 0x79, 0x3a, 0x02, 0xc9, 0x41, 0x83, 0xc2, 0x3e, 0xaa, 0x03, 0xa7, 0xa3,
	0x18, 0x42, 0xbf, 0xd2, 0xa9, 0x74, 0x1b, 0x24, 0x3f, 0xe2, 0x4f, 0x51, 0x83, 0x06, 0x81, 0x48,
	0xb9, 0x56, 0xfe, 0x4e, 0x67, 0xb7, 0xdb, 0x3c, 0xfe, 0x77, 0xa6, 0xe9, 0x68, 0x29, 0x7e, 0x74,
	0x92, 0x71, 0x90, 0x05, 0x2b, 0xfe, 0x1f, 0x6a, 0x25, 0x92, 0x4d, 0xa9, 0x9c, 0x3b, 0x9a, 0xbf,
	0xdb, 0xa9, 0x74, 0x3d, 0xb2, 0x82, 0xb6, 0x7f, 0xaa, 0xa2, 0xba, 0xfb, 0xc6, 0x18, 0xed, 0x71,
	0x3a, 0x05, 0x6b, 0x81, 0x47, 0xec, 0x37, 0xee, 0x2e, 0x3d, 0x78, 0x01, 0x52, 0x31, 0xc1, 0xfd,
	0x1d, 0x4b, 0x5e, 0x85, 0xf1, 0x0d, 0x54, 0x9d, 0x30, 0x1e, 0x2a, 0x7f, 0xb7, 0xb3, 0xdb, 0xf5,
	0x48, 0x76, 0xc0, 0xb7, 0x91, 0x27, 0xa6, 0x4c, 0x9f, 0x5b, 0xca, 0x9e, 0xa5, 0x2c, 0x01, 0xe3,
	0x76, 0x20, 0xb8, 0x86, 0x37, 0xda, 0xaf, 0x5a, 0xad, 0xf9, 0x11, 0x1f, 0xa2, 0x2b, 0x01, 0x0d,
	0xc6, 0x30, 0x1c, 0x4b, 0xa0, 0xa1, 0xf2, 0x6b, 0x9d, 0x4a, 0xb7, 0x4a, 0x4a, 0x18, 0xfe, 0x0f,
	0x42, 0xc6, 0x46, 0x95, 0xd0, 0x00, 0x94, 0x5f, 0xb7, 0xca, 0x0b, 0x88, 0x89, 0x81, 0xb9, 0xea,
	0xd9, 0x92, 0xa7, 0x61, 0x79, 0x56, 0x50, 0xfc, 0x39, 0x3a, 0x08, 0x52, 0xa5, 0xc5, 0x94, 0x80,
	0x12, 0xa9, 0x34, 0x8c, 0x9e, 0x8d, 0x74, 0x67, 0x3d, 0xd2, 0xa7, 0x25, 0x46, 0xb2, 0x2a, 0x88,
	0xcf, 0xd0, 0x81, 0xb1, 0x91, 0xf1, 0x68, 0x20, 0x62, 0x16, 0x30, 0x50, 0x3e, 0xb2, 0xba, 0xfe,
	0xbb, 0x41, 0x57, 0x81, 0x71, 0x4e, 0x56, 0xe5, 0xf0, 0x53, 0x74, 0x35, 0x14, 0xc1, 0x04, 0x24,
	0x81, 0x88, 0x29, 0x2d, 0x8d, 0xae, 0xe6, 0x36, 0xbb, 0x7a, 0x45, 0xce, 0x39, 0x59, 0x93, 0xc4,
	0x1d, 0xd4, 0x14, 0x27, 0xa9, 0x1e, 0x5f, 0x04, 0x22, 0x01, 0xe5, 0x5f, 0xb1, 0x91, 0x28, 0x42,
	0x26, 0x5c, 0x93, 0x74, 0x04, 0x81, 0xe0, 0x2f, 0x59, 0xf4, 0x88, 0xc5, 0xe0, 0xef, 0x67, 0x25,
	0x53, 0x46, 0xf1, 0x3d, 0xd4, 0x4c, 0x40, 0x4e, 0x99, 0x32, 0x69, 0x57, 0x7e, 0xab, 0x53, 0xe9,
	0x36, 0x8f, 0xb1, 0x33, 0x69, 0xb0, 0xa4, 0x90, 0x22, 0x1b, 0x7e, 0x80, 0x7c, 0x09, 0xdf, 0xa6,
	0x4c, 0x42, 0xf8, 0x58, 0x8a, 0x34, 0xf9, 0x02, 0xa6, 0x23, 0x90, 0x6a, 0xcc, 0x12, 0xe5, 0x1f,
	0x58, 0x63, 0xb6, 0xd2, 0xdb, 0xbf, 0x56, 0x50, 0xab, 0x1c, 0xf8, 0xdc, 0xd8, 0xcc, 0x7b, 0x53,
	0x4c, 0xae, 0x6a, 0x57, 0x50, 0x7c, 0x07, 0xed, 0xab, 0x84, 0x71, 0x4e, 0x27, 0x20, 0x2d, 0x5b,
	0x56, 0xbd, 0x65, 0xd0, 0x68, 0x0b, 0x21, 0x89, 0xc5, 0x7c, 0x20, 0x99, 0x90, 0x4c, 0xcf, 0xf3,
	0x6e, 0x29, 0xa3, 0xa6, 0x9a, 0x67, 0x59, 0xb9, 0x43, 0xe8, 0xef, 0xd9, 0x46, 0x5d, 0x02, 0xa5,
	0x7a, 0x0c, 0x6d, 0x41, 0x37, 0x0a, 0xf5, 0x18, 0xb6, 0x23, 0xb4, 0x5f, 0x4a, 0xf9, 0x3b, 0x3b,
	0x71, 0x84, 0xf0, 0x94, 0xbe, 0xe9, 0x73, 0x9b, 0xc9, 0x01, 0xc8, 0x93, 0x08, 0xb8, 0xb6, 0x9e,
	0x54, 0xc9, 0x06, 0x4a, 0x9b, 0xa0, 0x56, 0xb9, 0x1e, 0x4c, 0xf6, 0xdd, 0x68, 0x78, 0xb6, 0xec,
	0xf0, 0x22, 0xb4, 0xd2, 0x4c, 0x3b, 0xab, 0xcd, 0x74, 0xf8, 0x47, 0x13, 0xd5, 0x1e, 0x0b, 0x11,
	0xc5, 0x70, 0xc9, 0xb0, 0xfa, 0x78, 0x6d, 0x58, 0xdd, 0x74, 0x75, 0x91, 0x89, 0xfe, 0xf3, 0x41,
	0x85, 0x7b, 0xa8, 0x35, 0x32, 0xf9, 0x9a, 0xf7, 0xe0, 0x25, 0x4d, 0x63, 0xad, 0x6c, 0xfc, 0x9b,
	0xc7, 0xb7, 0xcb, 0x17, 0x3c, 0x2c, 0xf1, 0x90, 0x15, 0x99, 0xf6, 0x9f, 0x3b, 0x97, 0x8f, 0xbb,
	0xcb, 0xaa, 0x74, 0xf7, 0xf2, 0x2a, 0x5d, 0xed, 0x8b, 0xbd, 0x77, 0xeb, 0x0b, 0x1f, 0xd5, 0x13,
	0x29, 0x5e, 0x41, 0xb0, 0x18, 0x81, 0xee, 0x88, 0xdb, 0xa8, 0xf1, 0x4a, 0x09, 0x3e, 0xa0, 0x7a,
	0x6c, 0xc7, 0x9f, 0x47, 0x16, 0x67, 0x9b, 0xcf, 0x38, 0x19, 0xd3, 0xa7, 0x4c, 0x69, 0x08, 0xfd,
	0xba, 0x4d, 0x43, 0x11, 0x32, 0x85, 0xcf, 0xa6, 0x34, 0x82, 0x41, 0xa6, 0x2d, 0x9f, 0x7d, 0x65,
	0x10, 0xdf, 0x45, 0xb5, 0x40, 0x70, 0x95, 0xc6, 0xbe, 0x67, 0xcd, 0xbd, 0x51, 0x8e, 0xe6, 0xa9,
	0xa5, 0x11, 0xc7, 0x63, 0x6c, 0x95, 0x10, 0x59, 0xef, 0x90, 0xd5, 0x96, 0x1f, 0xcd, 0xb8, 0x4e,
	0x15, 0xc8, 0x1e, 0xd5, 0xd4, 0x4e, 0x8e, 0xa6, 0xb5, 0xb7, 0x84, 0xb5, 0x7f, 0xac, 0xa1, 0x56,
	0x39, 0x3d, 0x46, 0x4c, 0xc3, 0x34, 0x89, 0xa9, 0x06, 0x2b, 0x96, 0xa5, 0xa2, 0x84, 0xe1, 0x67,
	0x08, 0x8d, 0xa8, 0x82, 0x33, 0x63, 0x77, 0x5e, 0x55, 0x47, 0x97, 0x25, 0xfd, 0xe8, 0x61, 0xce,
	0x7e, 0x01, 0x5a, 0x33, 0x1e, 0x29, 0x52, 0xd0, 0x60, 0xd2, 0xfe, 0x56, 0x70, 0x70, 0x65, 0x66,
	0xbf, 0x8d, 0x63, 0x1c, 0xf4, 0x6b, 0x21, 0x27, 0x36, 0x6d, 0x1e, 0xc9, 0x8f, 0x26, 0x8c, 0xa9,
	0x82, 0x33, 0xae, 0x41, 0x72, 0x1a, 0x9f, 0x25, 0xae, 0xad, 0xcb, 0x20, 0xfe, 0x3f, 0xba, 0xea,
	0x04, 0x5c, 0x64, 0xcf, 0x42, 0x97, 0xb2, 0x35, 0xbc, 0xfd, 0xc3, 0x1e, 0xba, 0xb6, 0x66, 0x21,
	0x7e, 0x81, 0xbc, 0x85, 0x8d, 0x36, 0x0c, 0xcd, 0xe3, 0xfb, 0xef, 0xe7, 0xe4, 0x12, 0x21, 0x4b,
	0x55, 0xf8, 0x3b, 0x74, 0x6b, 0xc6, 0xa4, 0x4e, 0x69, 0xcc, 0xde, 0x52, 0xcd, 0x04, 0xcf, 0xd9,
	0xed, 0xf8, 0x68, 0x1e, 0xf7, 0xdf, 0xf3, 0x92, 0x17, 0x1b, 0x95, 0x91, 0x2d, 0x97, 0xb4, 0x7f,
	0xa9, 0x20, 0x6f, 0xa1, 0x04, 0xb7, 0xd0, 0x0e, 0xcb, 0x67, 0xdc, 0x0e, 0x0b, 0x4d, 0xd8, 0xd4,
	0x58, 0x48, 0xdd, 0x03, 0x15, 0x48, 0x96, 0xe8, 0xe5, 0xeb, 0x62, 0x0d, 0xc7, 0x1f, 0xa1, 0xeb,
	0x21, 0x68, 0xca, 0x62, 0x08, 0x8b, 0xec, 0x59, 0x16, 0x37, 0x91, 0x4c, 0x8f, 0x24, 0x34, 0x98,
	0xd0, 0x08, 0x86, 0xf3, 0x04, 0x5c, 0x62, 0x8b, 0x90, 0xe1, 0xb0, 0xed, 0xf0, 0x88, 0x4e, 0x59,
	0x3c, 0x77, 0xa9, 0x2d, 0x42, 0xed, 0x31, 0xba, 0xb5, 0xd9, 0x63, 0x23, 0x9b, 0xad, 0xa2, 0x65,
	0xca, 0x3c, 0x52, 0x84, 0xf0, 0x5d, 0x74, 0xad, 0x70, 0x74, 0x77, 0x64, 0xee, 0xad, 0x13, 0xda,
	0xdf, 0x57, 0x50, 0xed, 0x74, 0xd1, 0x66, 0x5b, 0xe6, 0xeb, 0x1d, 0xb4, 0x4f, 0xcd, 0x84, 0xef,
	0xf3, 0x30, 0x11, 0xcc, 0xed, 0x00, 0x8f, 0x94, 0x41, 0xb3, 0xa5, 0x2c, 0x30, 0x10, 0x32, 0x9b,
	0xa6, 0x55, 0xb2, 0x04, 0x8c, 0xe1, 0x21, 0xd5, 0x34, 0x00, 0x53, 0xbe, 0xf9, 0x9b, 0xac, 0x08,
	0x1d, 0xfe, 0x5e, 0x47, 0xde, 0x49, 0x92, 0x00, 0x8f, 0x18, 0xbf, 0x6c, 0xda, 0xdf, 0x5b, 0x9b,
	0xf6, 0xbe, 0xab, 0xa6, 0x85, 0xf4, 0x07, 0xbc, 0x4c, 0x7f, 0xab, 0x2d, 0x47, 0xf5, 0x67, 0xe8,
	0x96, 0x7b, 0x1d, 0xd9, 0xa6, 0x9b, 0xd1, 0xf8, 0xc2, 0xbc, 0x48, 0x42, 0x65, 0x4d, 0xaa, 0x92,
	0x2d, 0x54, 0xe3, 0x2b, 0xf0, 0x19, 0x93, 0x82, 0x4f, 0x61, 0x11, 0xad, 0x22, 0x64, 0x56, 0x6b,
	0x14, 0xc4, 0x22, 0x0d, 0x09, 0xc4, 0x40, 0x15, 0x0c, 0x25, 0x0d, 0x26, 0xce, 0xa2, 0x0d, 0x14,
	0x53, 0xb2, 0x11, 0xd3, 0x4f, 0xb4, 0x4e, 0xd4, 0x73, 0x65, 0xda, 0x7f, 0x9a, 0x57, 0xd6, 0x1a,
	0x5e, 0xe4, 0x1d, 0x50, 0xa5, 0x5e, 0x0b, 0x19, 0xba, 0x19, 0xbf, 0x86, 0x1b, 0x0f, 0x23, 0xa6,
	0xc7, 0xe9, 0xe8, 0x4b, 0xf3, 0x22, 0x3b, 0x09, 0x02, 0x50, 0x6a, 0x28, 0x26, 0xc0, 0xdd, 0x1c,
	0xd9, 0x42, 0x2d, 0x2d, 0x89, 0xfa, 0xca, 0x92, 0x78, 0x80, 0xfc, 0x58, 0x04, 0x34, 0x26, 0x90,
	0x08, 0xc5, 0xb4, 0x90, 0xf3, 0x1e, 0x93, 0x10, 0x98, 0x0f, 0xbf, 0x61, 0x79, 0xb7, 0xd2, 0xcd,
	0x64, 0x36, 0xaf, 0xe4, 0x0b, 0x90, 0x33, 0x96, 0x3f, 0x88, 0x3d, 0x52, 0xc2, 0x72, 0x1e, 0xf7,
	0x07, 0x20, 0xdf, 0x09, 0x25, 0xac, 0xb8, 0xde, 0x9a, 0xe5, 0xf5, 0xb6, 0xb2, 0x2e, 0xaf, 0x7c,
	0xf8, 0x33, 0x72, 0xff, 0x6f, 0x16, 0x74, 0x1b, 0x35, 0x54, 0xee, 0x4f, 0xcb, 0xf2, 0x2e, 0xce,
	0xf8, 0x1e, 0xba, 0xa9, 0xd4, 0xf8, 0x9c, 0x8b, 0xd7, 0xfc, 0x89, 0x50, 0x5a, 0x99, 0xd5, 0x63,
	0x83, 0x7a, 0x60, 0xad, 0xde, 0x4c, 0x74, 0x52, 0x03, 0xc9, 0x66, 0x54, 0xc3, 0x39, 0xcc, 0x17,
	0x52, 0x57, 0x17, 0x52, 0xeb, 0x44, 0x7c, 0x1f, 0xfd, 0xab, 0x44, 0x30, 0x45, 0x90, 0x8c, 0x25,
	0x55, 0xe0, 0x5f, 0xb3, 0x72, 0xdb, 0xc8, 0xf8, 0x18, 0xdd, 0x50, 0x6a, 0x3c, 0x94, 0xa9, 0xd2,
	0xcf, 0xf9, 0x64, 0x61, 0x8f, 0x8f, 0x6d, 0x63, 0x6e, 0xa4, 0x19, 0xaf, 0x67, 0x79, 0x86, 0xae,
	0x67, 0x5e, 0xe7, 0xe7, 0xc3, 0xaf, 0x50, 0xb3, 0x10, 0x69, 0xb3, 0x1a, 0x49, 0xff, 0xa4, 0xe7,
	0x57, 0x2c, 0x9b, 0xfd, 0x36, 0x7f, 0xeb, 0xbe, 0x26, 0x67, 0xc3, 0xbe, 0x7b, 0x12, 0x66, 0x07,
	0x93, 0xd6, 0xfe, 0x37, 0xfd, 0xd3, 0xe7, 0xc3, 0xbe, 0x7b, 0x16, 0xe5, 0xc7, 0x51, 0xcd, 0x26,
	0xf0, 0x93, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0xa7, 0x6a, 0xf1, 0x59, 0xf9, 0x0e, 0x00, 0x00,
}
