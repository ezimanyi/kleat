syntax = "proto3";
package proto;

// Configuration for the Kubernetes provider.
message Kubernetes {
    // Whether the provider is enabled.
    bool enabled = 1;

    // The list of configured accounts.
    repeated Account accounts = 2;

    // The name of the primary account.
    string primaryAccount = 3;

    // Configuration for a Spinnaker Kubernetes account. An account maps to a
    // credential that can authenticate against your Kubernetes cluster.
    message Account {
        // The name of the account.
        string name = 1;

        // Some providers support multiple versions/release tracks.
        // This allows you to pick the version of the provider (not the
        // resources it manages) to run within Spinnaker.
        string providerVersion = 2;

        // A list of resource kinds this Spinnaker account can deploy and
        // will cache. When no kinds are configured, this defaults to all kinds
        // described here:
        // https://spinnaker.io/reference/providers/kubernetes-v2/.
        // This can only be set when omitKinds is empty or not set.
        repeated string kinds = 3;

        // A list of resource kinds this Spinnaker account cannot deploy to or
        // cache. This can only be set when kinds is empty or not set.
        repeated string omitKinds = 4;

        // The kubernetes context to be managed by Spinnaker. See
        // http://kubernetes.io/docs/user-guide/kubeconfig-file/#context for
        // more information. When no context is configured for an account the
        // ‘current-context’ in your kubeconfig is assumed.
        string context = 5;

        // Number of caching agents for this kubernetes account.
        // Each agent handles a subset of the namespaces available to this account.
        // By default, only 1 agent caches all kinds for all namespaces in the
        // account.
        int32 cacheThreads = 6;

        // A list of namespaces this Spinnaker account can deploy to and will
        // cache. When no namespaces are configured, this defaults to all
        // namespaces.
        repeated string namespaces = 7;

        // A list of namespaces this Spinnaker account cannot deploy to or
        // cache. This can only be set when namespaces is empty or not set.
        repeated string omitNamespaces = 8;

        // The list of custom resources Clouddriver will manage and make
        // available for use in Patch and Delete (Manifest) stages.
        repeated CustomResource customResources = 9;

        // The list of kind-specific caching policies.
        repeated CachingPolicy cachingPolicies = 10;

        // The list of the Spinnaker docker registry account names this
        // Spinnaker account can use as image sources. These docker registry
        // accounts must be registered in your halconfig before you can add them
        // here.
        repeated DockerRegistry dockerRegistries = 11;

        // The list of OAuth scopes used by kubectl to fetch an OAuth token.
        repeated string oAuthScopes = 12;

        // The path to your kubeconfig file. By default, it will be under the
        // Spinnaker user’s home directory in the typical .kube/config location.
        // todo: document new var/secrets convention.
        string kubeconfigFile = 13;

        // Fiat permissions configuration.
        Permissions permissions = 14;

        // (Deprecated): List of required Fiat permission groups. Configure
        // `permissions` instead.
        repeated string requiredGroupMemberships = 15;
    }

    // Configuration for a CRD to be managed by Spinnaker. If Spinnaker does not
    // have permission to list CRDs but you need Spinnaker to manage CRDs, you
    // need to explicitly register each CRD.
    message CustomResource {
        // The Kubernetes kind of the custom resource.
        string kubernetesKind = 1;

        // The Spinnaker kind to which you would like the custom resource to
        // map.
        string spinnakerKind = 2;

        // An integer representing the deployment priority of this resource.
        // Resources with lower values are deployed before resources with higher
        // values.
        string deployPriority = 3;

        // Whether Spinnaker should manage versioning this resource.
        bool versioned = 4;

        // Whether the resource is namespaced.
        bool namespaced = 5;
    }

    // Configuration for a kind-specific caching policy.
    message CachingPolicy {
        // The Kubernetes kind to which the policy applies.
        string kubernetesKind = 1;

        // The maximum number of resources an agent will cache of the specified
        // Kubernetes kind.
        int32 maxEntriesPerAgent = 2;
    }

    // Configuration for a Docker registry.
    message DockerRegistry {
        // The configured name of the Docker registry.
        string accountName = 1;

        // The list of Docker registry namespaces usable as image sources.
        repeated string namespaces = 2;
    }
}

// Configuration for the Google Compute Engine (GCE) provider.
message Google {
    // Whether the provider is enabled.
    bool enabled = 1;

    // The list of configured accounts.
    repeated Account accounts = 2;

    // The name of the primary account.
    string primaryAccount = 3;

    // Configuration for Spinnaker's image bakery.
    BakeryDefaults bakeryDefaults = 4;

    // Configuration for a Spinnaker Google account. An account maps to a
    // credential that can authenticate against a GCP project.
    message Account {
        // The name of the account.
        string name = 1;

        // (Deprecated): List of required Fiat permission groups. Configure
        // `permissions` instead.
        repeated string requiredGroupMemberships = 3;

        // Fiat permissions configuration.
        Permissions permissions = 4;

        // The GCP project this Spinnaker account will manage.
        string project = 5;

        // The path to a JSON service account that Spinnaker will use as
        // credentials. This is only needed if Spinnaker is not deployed on a
        // Google Compute Engine VM, or needs permissions not afforded to the VM
        // it is running on. See
        // https://cloud.google.com/compute/docs/access/service-accounts for
        // more information.
        string jsonPath = 6;

        // Enable this flag if your GCP project has access to alpha features and
        // you want Spinnaker to take advantage of them.
        bool alphaListed = 7;

        // A list of GCP projects from which Spinnaker will be able to cache and
        // deploy images. When this is omitted, it defaults to the current
        // project. Each project must have granted the IAM role
        // compute.imageUser to the service account associated with the JSON key
        // used by this account, as well as to the Google APIs service account
        // automatically created for the project being managed (should look
        // similar to 12345678912@cloudservices.gserviceaccount.com). See
        // https://cloud.google.com/compute/docs/images/sharing-images-across-projects
        // for more information about sharing images across GCP projects.
        repeated string imageProjects = 8;

        // Configuration for Consul.
        Consul consul = 9;

        // A list of regions for caching and mutating calls. This overwrites
        // any default regions set on the provider.
        repeated string regions = 10;

        //  The path to user data template file. Spinnaker has the ability to
        //  inject userdata into generated instance templates. The mechanism is
        //  via a template file that is token replaced to provide some specifics
        //  about the deployment. See
        //  https://github.com/spinnaker/clouddriver/blob/master/clouddriver-aws/UserData.md
        //  for more information.
        string userDataFile = 11;
    }

    // Configuration for Spinnaker's image bakery.
    message BakeryDefaults {
        // The name of the Packer template that will be used to bake images from
        // this base image. The template file must be found in this list:
        // https://github.com/spinnaker/rosco/tree/master/rosco-web/config/packer,
        // or supplied as described here: https://spinnaker.io/setup/bakery/.
        string templateFile = 1;

        // List of configured base images.
        repeated BaseImageSettings baseImages = 2;

        // The default zone in which to bake an image.
        string zone = 3;

        // The Google Compute network ID or URL to use for the launched
        // instance. Defaults to default.
        string network = 4;

        // If true, use the instance's internal IP instead of its external IP
        // during baking.
        bool useInternalIp = 5;

        // The default project ID for the network and subnet to use for the VM
        // baking your image.
        string networkProjectId = 6;

        // Configuration for a base image for the Google provider's bakery.
        message BaseImageSettings {
            // Base image configuration.
            BaseImage baseImage = 1;

            // Image source configuration.
            VirtualizationSettings virtualizationSettings = 2;

            // Base image configuration.
            message BaseImage {
                // This is the identifier used by GCP to find this base
                // image.
                string id = 1;

                // A short description to help human operators identify the
                // image.
                string shortDescription = 2;

                // A long description to help human operators identify the
                // image.
                string detailedDescription = 3;

                //  This is used to help Spinnaker’s bakery download the build
                //  artifacts you supply it with. For example, specifying deb
                //  indicates that your artifacts will need to be fetched from a
                //  debian repository.
                string packageType = 4;

                // If set to true, Deck will annotate the popup tooltip to
                // indicate that the selected option represents an image family.
                bool imageFamily = 5;
            }

            // Image source configuration.
            message VirtualizationSettings {
                //  The source image. If both sourceImage and sourceImageFamily
                //  are set, sourceImage will take precedence.
                string sourceImage = 1;

                // The source image family to create the image from. The newest,
                // non-deprecated image is used. If both sourceImage and
                // sourceImageFamily are set, sourceImage will take precedence.
                string sourceImageFamily = 2;
            }
        }
    }

    // Configuration for Consul.
    message Consul {
        // Whether Consul is enabled.
        bool enabled = 1;

        // Reachable Consul node endpoint connected to the Consul cluster.
        // Defaults to localhost.
        string agentEndpoint = 2;

        // Port consul is running on for every agent. Defaults to 8500.
        int32 agentPort = 3;

        // List of data centers to cache and keep updated. Defaults to all.
        repeated string datacenters = 4;
    }
}

// A Fiat permissions configuration object.
message Permissions {
    // A user must have at least one of these roles in order to view this
    // account’s cloud resources.
    repeated string READ = 1;

    // A user must have at least one of these roles in order to make changes to
    // this account’s cloud resources.
    repeated string WRITE = 2;

    // A user must have at least one of these roles in order to execute
    // pipelines.
    repeated string EXECUTE = 3;
}
